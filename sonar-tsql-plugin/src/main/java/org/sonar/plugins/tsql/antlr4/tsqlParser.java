// Generated from org\sonar\plugins\tsql\antlr4\tsql.g4 by ANTLR 4.7
package org.sonar.plugins.tsql.antlr4;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class tsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ADD=17, 
		ALL=18, ALTER=19, AND=20, ANY=21, APPEND=22, AS=23, ASC=24, ASYMMETRIC=25, 
		AUTHORIZATION=26, BACKUP=27, BEGIN=28, BETWEEN=29, BREAK=30, BROWSE=31, 
		BULK=32, BY=33, CALLED=34, CASCADE=35, CASE=36, CERTIFICATE=37, CHANGETABLE=38, 
		CHANGES=39, CHECK=40, CHECKPOINT=41, CLOSE=42, CLUSTERED=43, COALESCE=44, 
		COLLATE=45, COLUMN=46, COMMIT=47, COMPUTE=48, CONSTRAINT=49, CONTAINMENT=50, 
		CONTAINS=51, CONTAINSTABLE=52, CONTINUE=53, CONTRACT=54, CONVERSATION=55, 
		CONVERT=56, CREATE=57, CROSS=58, CURRENT=59, CURRENT_DATE=60, CURRENT_TIME=61, 
		CURRENT_TIMESTAMP=62, CURRENT_USER=63, CURSOR=64, DATA_COMPRESSION=65, 
		DATABASE=66, DBCC=67, DEALLOCATE=68, DECLARE=69, DEFAULT=70, DELETE=71, 
		DENY=72, DESC=73, DISK=74, DISTINCT=75, DISTRIBUTED=76, DOUBLE=77, DROP=78, 
		DUMP=79, ELSE=80, END=81, ERRLVL=82, ESCAPE=83, ERROR=84, EVENTDATA=85, 
		EXCEPT=86, EXECUTE=87, EXISTS=88, EXIT=89, EXTERNAL=90, FETCH=91, FILE=92, 
		FILENAME=93, FILLFACTOR=94, FOR=95, FORCESEEK=96, FOREIGN=97, FREETEXT=98, 
		FREETEXTTABLE=99, FROM=100, FULL=101, FUNCTION=102, GET=103, GOTO=104, 
		GRANT=105, GROUP=106, HAVING=107, IDENTITY=108, IDENTITYCOL=109, IDENTITY_INSERT=110, 
		IF=111, IN=112, INCLUDE=113, INDEX=114, INNER=115, INSERT=116, INSTEAD=117, 
		INTERSECT=118, INTO=119, IS=120, ISNULL=121, JOIN=122, KEY=123, KILL=124, 
		LEFT=125, LIFETIME=126, LIKE=127, LINENO=128, LOAD=129, LOG=130, MATCHED=131, 
		MERGE=132, NATIONAL=133, NOCHECK=134, NONCLUSTERED=135, NONE=136, NOT=137, 
		NULL=138, NULLIF=139, OF=140, OFF=141, OFFSETS=142, ON=143, OPEN=144, 
		OPENDATASOURCE=145, OPENQUERY=146, OPENROWSET=147, OPENXML=148, OPTION=149, 
		OR=150, ORDER=151, OUTER=152, OVER=153, PAGE=154, PARTIAL=155, PASSWORD=156, 
		PERCENT=157, PIVOT=158, PLAN=159, PRECISION=160, PRIMARY=161, PRINT=162, 
		PROC=163, PROCEDURE=164, PUBLIC=165, RAISERROR=166, RAW=167, READ=168, 
		READTEXT=169, RECONFIGURE=170, REFERENCES=171, RELATED_CONVERSATION=172, 
		RELATED_CONVERSATION_GROUP=173, REPLICATION=174, RESTORE=175, RESTRICT=176, 
		RETURN=177, RETURNS=178, REVERT=179, REVOKE=180, RIGHT=181, ROLLBACK=182, 
		ROWCOUNT=183, ROWGUIDCOL=184, RULE=185, SAVE=186, SCHEMA=187, SECURITYAUDIT=188, 
		SELECT=189, SEMANTICKEYPHRASETABLE=190, SEMANTICSIMILARITYDETAILSTABLE=191, 
		SEMANTICSIMILARITYTABLE=192, SERVER=193, SERVICE=194, SESSION_USER=195, 
		SET=196, SETUSER=197, SHUTDOWN=198, SOME=199, SOURCE=200, STATISTICS=201, 
		SYSTEM_USER=202, TABLE=203, TABLESAMPLE=204, TARGET=205, TEXTSIZE=206, 
		THEN=207, TO=208, TOP=209, TRAN=210, TRANSACTION=211, TRIGGER=212, TRUNCATE=213, 
		TSEQUAL=214, UNION=215, UNIQUE=216, UNPIVOT=217, UPDATE=218, UPDATETEXT=219, 
		USE=220, USER=221, VALUES=222, VARYING=223, VIEW=224, WAITFOR=225, WHEN=226, 
		WHERE=227, WHILE=228, WITH=229, WITHIN=230, WRITETEXT=231, ABSOLUTE=232, 
		ACTION=233, ACTIVE=234, ACTIVATION=235, AFTER=236, ALGORITHM=237, ALLOWED=238, 
		ALLOW_SNAPSHOT_ISOLATION=239, ANSI_NULLS=240, ANSI_NULL_DEFAULT=241, ANSI_PADDING=242, 
		ANSI_WARNINGS=243, APPLY=244, ARITHABORT=245, ASSEMBLY=246, AUTO=247, 
		AUTO_CLEANUP=248, AUTO_CLOSE=249, AUTO_CREATE_STATISTICS=250, AUTO_SHRINK=251, 
		AUTO_UPDATE_STATISTICS=252, AUTO_UPDATE_STATISTICS_ASYNC=253, AVG=254, 
		BINARY_BASE64=255, BINARY_CHECKSUM=256, BULK_LOGGED=257, CALLER=258, CAST=259, 
		CATCH=260, CHANGE_RETENTION=261, CHANGE_TRACKING=262, CHECKSUM=263, CHECKSUM_AGG=264, 
		CLEANUP=265, COLLECTION=266, COMMITTED=267, COMPATIBILITY_LEVEL=268, CONCAT=269, 
		CONCAT_NULL_YIELDS_NULL=270, CONTENT=271, CONTROL=272, COOKIE=273, COUNT=274, 
		COUNT_BIG=275, CREATE_NEW=276, CREATION_DISPOSITION=277, CURSOR_CLOSE_ON_COMMIT=278, 
		CURSOR_DEFAULT=279, DATEADD=280, DATEDIFF=281, DATENAME=282, DATEPART=283, 
		DATE_CORRELATION_OPTIMIZATION=284, DAYS=285, DB_CHAINING=286, DECRYPTION=287, 
		DEFAULT_FULLTEXT_LANGUAGE=288, DEFAULT_LANGUAGE=289, DELAY=290, DELAYED_DURABILITY=291, 
		DELETED=292, DENSE_RANK=293, DIALOG=294, DIRECTORY_NAME=295, DISABLE=296, 
		DISABLED=297, DISABLE_BROKER=298, DOCUMENT=299, DYNAMIC=300, EMERGENCY=301, 
		EMPTY=302, ENABLE_BROKER=303, ENCRYPTION=304, ERROR_BROKER_CONVERSATIONS=305, 
		EXECUTABLE=306, EXPAND=307, EXPIRY_DATE=308, EXPLICIT=309, FAST=310, FAST_FORWARD=311, 
		FILEGROUP=312, FILEGROWTH=313, FILESTREAM=314, FIRST=315, FOLLOWING=316, 
		FORCE=317, FORCED=318, FORWARD_ONLY=319, FULLSCAN=320, GB=321, GETDATE=322, 
		GETUTCDATE=323, GLOBAL=324, GO=325, GROUPING=326, GROUPING_ID=327, HADR=328, 
		HASH=329, HONOR_BROKER_PRIORITY=330, HOURS=331, IDENTITY_VALUE=332, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=333, 
		IMMEDIATE=334, IMPERSONATE=335, INCREMENTAL=336, INITIATOR=337, INPUT=338, 
		INSENSITIVE=339, INSERTED=340, ISOLATION=341, KB=342, KEEP=343, KEEPFIXED=344, 
		KEYSET=345, KEYS=346, KEY_SOURCE=347, LAST=348, LEVEL=349, LOB_COMPACTION=350, 
		LOCAL=351, LOCK_ESCALATION=352, LOGIN=353, LOOP=354, MARK=355, MASTER_KEY=356, 
		MAX=357, MAX_QUEUE_READERS=358, MAXDOP=359, MAXRECURSION=360, MAXSIZE=361, 
		MESSAGE=362, MB=363, MEMORY_OPTIMIZED_DATA=364, MIN=365, MINUTES=366, 
		MIN_ACTIVE_ROWVERSION=367, MIXED_PAGE_ALLOCATION=368, MODIFY=369, MOVE=370, 
		MULTI_USER=371, NAME=372, NESTED_TRIGGERS=373, NEW_BROKER=374, NEXT=375, 
		NOCOUNT=376, NOEXPAND=377, NON_TRANSACTED_ACCESS=378, NORECOMPUTE=379, 
		NO=380, NO_WAIT=381, NTILE=382, NUMBER=383, NUMERIC_ROUNDABORT=384, OFFLINE=385, 
		OFFSET=386, ONLINE=387, ONLY=388, OPEN_EXISTING=389, OPTIMISTIC=390, OPTIMIZE=391, 
		OUT=392, OUTPUT=393, OWNER=394, PAGE_VERIFY=395, PARAMETERIZATION=396, 
		PARTITION=397, PATH=398, POISON_MESSAGE_HANDLING=399, PRECEDING=400, PRIOR=401, 
		PRIVATE=402, PRIVILEGES=403, PROCEDURE_NAME=404, PROVIDER=405, PROVIDER_KEY_NAME=406, 
		QUEUE=407, QUOTED_IDENTIFIER=408, RANGE=409, RANK=410, READONLY=411, READ_COMMITTED_SNAPSHOT=412, 
		READ_ONLY=413, READ_WRITE=414, REBUILD=415, RECOMPILE=416, RECEIVE=417, 
		RECOVERY=418, RECURSIVE_TRIGGERS=419, RELATIVE=420, REORGANIZE=421, REMOTE=422, 
		REPEATABLE=423, RESTRICTED_USER=424, RETENTION=425, ROBUST=426, ROOT=427, 
		ROW=428, ROWGUID=429, ROWS=430, ROW_NUMBER=431, SAMPLE=432, SCHEMABINDING=433, 
		SCROLL=434, SCROLL_LOCKS=435, SECONDS=436, SELF=437, SEND=438, SENT=439, 
		SERIALIZABLE=440, SETERROR=441, SHOWPLAN=442, SIMPLE=443, SINGLE_USER=444, 
		SIZE=445, SNAPSHOT=446, SPATIAL_WINDOW_MAX_CELLS=447, START_DATE=448, 
		STATIC=449, STATS_STREAM=450, STATUS=451, STDEV=452, STDEVP=453, SUBJECT=454, 
		STUFF=455, SUM=456, SYMMETRIC=457, TAKE=458, TARGET_RECOVERY_TIME=459, 
		TB=460, TEXTIMAGE_ON=461, THROW=462, TIES=463, TIME=464, TIMER=465, TIMEOUT=466, 
		TORN_PAGE_DETECTION=467, TRANSFORM_NOISE_WORDS=468, TRUSTWORTHY=469, TRY=470, 
		TWO_DIGIT_YEAR_CUTOFF=471, TYPE=472, TYPE_WARNING=473, UNBOUNDED=474, 
		UNCOMMITTED=475, UNKNOWN=476, UNLIMITED=477, USING=478, VALIDATION=479, 
		VALID_XML=480, VAR=481, VARP=482, VIEWS=483, VIEW_METADATA=484, WELL_FORMED_XML=485, 
		WORK=486, XML=487, XMLNAMESPACES=488, DOLLAR_ACTION=489, SPACE=490, COMMENT=491, 
		LINE_COMMENT=492, DOUBLE_QUOTE_ID=493, SQUARE_BRACKET_ID=494, LOCAL_ID=495, 
		DECIMAL=496, ID=497, STRING=498, BINARY=499, FLOAT=500, REAL=501, EQUAL=502, 
		GREATER=503, LESS=504, EXCLAMATION=505, PLUS_ASSIGN=506, MINUS_ASSIGN=507, 
		MULT_ASSIGN=508, DIV_ASSIGN=509, MOD_ASSIGN=510, AND_ASSIGN=511, XOR_ASSIGN=512, 
		OR_ASSIGN=513, DOT=514, UNDERLINE=515, AT=516, SHARP=517, DOLLAR=518, 
		LR_BRACKET=519, RR_BRACKET=520, COMMA=521, SEMI=522, COLON=523, STAR=524, 
		DIVIDE=525, MODULE=526, PLUS=527, MINUS=528, BIT_NOT=529, BIT_OR=530, 
		BIT_AND=531, BIT_XOR=532;
	public static final int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_cfl_statement = 6, RULE_empty_statement = 7, 
		RULE_another_statement = 8, RULE_create_queue = 9, RULE_queue_settings = 10, 
		RULE_alter_queue = 11, RULE_queue_action = 12, RULE_queue_rebuild_options = 13, 
		RULE_create_contract = 14, RULE_conversation_statement = 15, RULE_message_statement = 16, 
		RULE_merge_statement = 17, RULE_merge_matched = 18, RULE_merge_not_matched = 19, 
		RULE_delete_statement = 20, RULE_delete_statement_from = 21, RULE_insert_statement = 22, 
		RULE_insert_statement_value = 23, RULE_receive_statement = 24, RULE_select_statement = 25, 
		RULE_time = 26, RULE_update_statement = 27, RULE_output_clause = 28, RULE_output_dml_list_elem = 29, 
		RULE_output_column_name = 30, RULE_create_database = 31, RULE_create_index = 32, 
		RULE_create_or_alter_procedure = 33, RULE_create_or_alter_trigger = 34, 
		RULE_dml_trigger = 35, RULE_dml_trigger_option = 36, RULE_dml_trigger_operation = 37, 
		RULE_ddl_trigger = 38, RULE_ddl_trigger_operation = 39, RULE_create_or_alter_function = 40, 
		RULE_func_body_returns_select = 41, RULE_func_body_returns_table = 42, 
		RULE_func_body_returns_scalar = 43, RULE_procedure_param = 44, RULE_procedure_option = 45, 
		RULE_function_option = 46, RULE_create_statistics = 47, RULE_create_table = 48, 
		RULE_table_options = 49, RULE_table_option = 50, RULE_create_view = 51, 
		RULE_view_attribute = 52, RULE_alter_table = 53, RULE_alter_database = 54, 
		RULE_database_optionspec = 55, RULE_auto_option = 56, RULE_change_tracking_option = 57, 
		RULE_change_tracking_option_list = 58, RULE_containment_option = 59, RULE_cursor_option = 60, 
		RULE_date_correlation_optimization_option = 61, RULE_db_encryption_option = 62, 
		RULE_db_state_option = 63, RULE_db_update_option = 64, RULE_db_user_access_option = 65, 
		RULE_delayed_durability_option = 66, RULE_external_access_option = 67, 
		RULE_hadr_options = 68, RULE_mixed_page_allocation_option = 69, RULE_parameterization_option = 70, 
		RULE_recovery_option = 71, RULE_service_broker_option = 72, RULE_snapshot_option = 73, 
		RULE_sql_option = 74, RULE_target_recovery_time_option = 75, RULE_termination = 76, 
		RULE_drop_index = 77, RULE_drop_procedure = 78, RULE_drop_trigger = 79, 
		RULE_drop_dml_trigger = 80, RULE_drop_ddl_trigger = 81, RULE_drop_function = 82, 
		RULE_drop_statistics = 83, RULE_drop_table = 84, RULE_drop_view = 85, 
		RULE_create_type = 86, RULE_drop_type = 87, RULE_rowset_function_limited = 88, 
		RULE_openquery = 89, RULE_opendatasource = 90, RULE_declare_statement = 91, 
		RULE_cursor_statement = 92, RULE_execute_statement = 93, RULE_execute_statement_arg = 94, 
		RULE_execute_var_string = 95, RULE_security_statement = 96, RULE_create_certificate = 97, 
		RULE_existing_keys = 98, RULE_private_key_options = 99, RULE_generate_new_keys = 100, 
		RULE_date_options = 101, RULE_open_key = 102, RULE_close_key = 103, RULE_create_key = 104, 
		RULE_key_options = 105, RULE_algorithm = 106, RULE_encryption_mechanism = 107, 
		RULE_decryption_mechanism = 108, RULE_grant_permission = 109, RULE_set_statement = 110, 
		RULE_transaction_statement = 111, RULE_go_statement = 112, RULE_use_statement = 113, 
		RULE_dbcc_clause = 114, RULE_dbcc_options = 115, RULE_execute_clause = 116, 
		RULE_declare_local = 117, RULE_table_type_definition = 118, RULE_xml_type_definition = 119, 
		RULE_xml_schema_collection = 120, RULE_column_def_table_constraints = 121, 
		RULE_column_def_table_constraint = 122, RULE_column_definition = 123, 
		RULE_column_constraint = 124, RULE_table_constraint = 125, RULE_on_delete = 126, 
		RULE_on_update = 127, RULE_index_options = 128, RULE_index_option = 129, 
		RULE_declare_cursor = 130, RULE_declare_set_cursor_common = 131, RULE_declare_set_cursor_common_partial = 132, 
		RULE_fetch_cursor = 133, RULE_set_special = 134, RULE_constant_LOCAL_ID = 135, 
		RULE_expression = 136, RULE_constant_expression = 137, RULE_subquery = 138, 
		RULE_with_expression = 139, RULE_common_table_expression = 140, RULE_update_elem = 141, 
		RULE_search_condition_list = 142, RULE_search_condition = 143, RULE_search_condition_and = 144, 
		RULE_search_condition_not = 145, RULE_predicate = 146, RULE_query_expression = 147, 
		RULE_union = 148, RULE_query_specification = 149, RULE_top_clause = 150, 
		RULE_top_percent = 151, RULE_top_count = 152, RULE_order_by_clause = 153, 
		RULE_for_clause = 154, RULE_xml_common_directives = 155, RULE_order_by_expression = 156, 
		RULE_group_by_item = 157, RULE_option_clause = 158, RULE_option = 159, 
		RULE_optimize_for_arg = 160, RULE_select_list = 161, RULE_select_list_elem = 162, 
		RULE_table_sources = 163, RULE_table_source = 164, RULE_table_source_item_joined = 165, 
		RULE_table_source_item = 166, RULE_open_xml = 167, RULE_schema_declaration = 168, 
		RULE_column_declaration = 169, RULE_change_table = 170, RULE_join_part = 171, 
		RULE_pivot_clause = 172, RULE_unpivot_clause = 173, RULE_full_column_name_list = 174, 
		RULE_table_name_with_hint = 175, RULE_rowset_function = 176, RULE_bulk_option = 177, 
		RULE_derived_table = 178, RULE_function_call = 179, RULE_xml_data_type_methods = 180, 
		RULE_value_method = 181, RULE_query_method = 182, RULE_exist_method = 183, 
		RULE_modify_method = 184, RULE_nodes_method = 185, RULE_switch_section = 186, 
		RULE_switch_search_condition_section = 187, RULE_as_table_alias = 188, 
		RULE_table_alias = 189, RULE_with_table_hints = 190, RULE_insert_with_table_hints = 191, 
		RULE_table_hint = 192, RULE_index_value = 193, RULE_column_alias_list = 194, 
		RULE_column_alias = 195, RULE_table_value_constructor = 196, RULE_expression_list = 197, 
		RULE_ranking_windowed_function = 198, RULE_aggregate_windowed_function = 199, 
		RULE_all_distinct_expression = 200, RULE_over_clause = 201, RULE_row_or_range_clause = 202, 
		RULE_window_frame_extent = 203, RULE_window_frame_bound = 204, RULE_window_frame_preceding = 205, 
		RULE_window_frame_following = 206, RULE_create_database_option = 207, 
		RULE_database_filestream_option = 208, RULE_database_file_spec = 209, 
		RULE_file_group = 210, RULE_file_spec = 211, RULE_full_table_name = 212, 
		RULE_table_name = 213, RULE_simple_name = 214, RULE_func_proc_name = 215, 
		RULE_ddl_object = 216, RULE_full_column_name = 217, RULE_column_name_list_with_order = 218, 
		RULE_column_name_list = 219, RULE_cursor_name = 220, RULE_on_off = 221, 
		RULE_clustered = 222, RULE_null_notnull = 223, RULE_null_or_default = 224, 
		RULE_scalar_function_name = 225, RULE_begin_conversation_timer = 226, 
		RULE_begin_conversation_dialog = 227, RULE_contract_name = 228, RULE_service_name = 229, 
		RULE_end_conversation = 230, RULE_waitfor_conversation = 231, RULE_get_conversation = 232, 
		RULE_queue_id = 233, RULE_send_conversation = 234, RULE_data_type = 235, 
		RULE_default_value = 236, RULE_constant = 237, RULE_sign = 238, RULE_id = 239, 
		RULE_simple_id = 240, RULE_comparison_operator = 241, RULE_assignment_operator = 242, 
		RULE_file_size = 243;
	public static final String[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"cfl_statement", "empty_statement", "another_statement", "create_queue", 
		"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
		"create_contract", "conversation_statement", "message_statement", "merge_statement", 
		"merge_matched", "merge_not_matched", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "receive_statement", "select_statement", 
		"time", "update_statement", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_database", "create_index", "create_or_alter_procedure", "create_or_alter_trigger", 
		"dml_trigger", "dml_trigger_option", "dml_trigger_operation", "ddl_trigger", 
		"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select", 
		"func_body_returns_table", "func_body_returns_scalar", "procedure_param", 
		"procedure_option", "function_option", "create_statistics", "create_table", 
		"table_options", "table_option", "create_view", "view_attribute", "alter_table", 
		"alter_database", "database_optionspec", "auto_option", "change_tracking_option", 
		"change_tracking_option_list", "containment_option", "cursor_option", 
		"date_correlation_optimization_option", "db_encryption_option", "db_state_option", 
		"db_update_option", "db_user_access_option", "delayed_durability_option", 
		"external_access_option", "hadr_options", "mixed_page_allocation_option", 
		"parameterization_option", "recovery_option", "service_broker_option", 
		"snapshot_option", "sql_option", "target_recovery_time_option", "termination", 
		"drop_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger", 
		"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type", 
		"drop_type", "rowset_function_limited", "openquery", "opendatasource", 
		"declare_statement", "cursor_statement", "execute_statement", "execute_statement_arg", 
		"execute_var_string", "security_statement", "create_certificate", "existing_keys", 
		"private_key_options", "generate_new_keys", "date_options", "open_key", 
		"close_key", "create_key", "key_options", "algorithm", "encryption_mechanism", 
		"decryption_mechanism", "grant_permission", "set_statement", "transaction_statement", 
		"go_statement", "use_statement", "dbcc_clause", "dbcc_options", "execute_clause", 
		"declare_local", "table_type_definition", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"column_constraint", "table_constraint", "on_delete", "on_update", "index_options", 
		"index_option", "declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
		"fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", "constant_expression", 
		"subquery", "with_expression", "common_table_expression", "update_elem", 
		"search_condition_list", "search_condition", "search_condition_and", "search_condition_not", 
		"predicate", "query_expression", "union", "query_specification", "top_clause", 
		"top_percent", "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg", 
		"select_list", "select_list_elem", "table_sources", "table_source", "table_source_item_joined", 
		"table_source_item", "open_xml", "schema_declaration", "column_declaration", 
		"change_table", "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_table_alias", "table_alias", "with_table_hints", "insert_with_table_hints", 
		"table_hint", "index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
		"all_distinct_expression", "over_clause", "row_or_range_clause", "window_frame_extent", 
		"window_frame_bound", "window_frame_preceding", "window_frame_following", 
		"create_database_option", "database_filestream_option", "database_file_spec", 
		"file_group", "file_spec", "full_table_name", "table_name", "simple_name", 
		"func_proc_name", "ddl_object", "full_column_name", "column_name_list_with_order", 
		"column_name_list", "cursor_name", "on_off", "clustered", "null_notnull", 
		"null_or_default", "scalar_function_name", "begin_conversation_timer", 
		"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
		"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
		"data_type", "default_value", "constant", "sign", "id", "simple_id", "comparison_operator", 
		"assignment_operator", "file_size"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'DES'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'RC2'", "'RC4'", 
		"'RC4_128'", "'DESX'", "'AES_128'", "'AES_192'", "'AES_256'", "'.value('", 
		"'.query('", "'.exist('", "'.modify('", "'.nodes('", "'DESCRIPTION'", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ADD", "ALL", "ALTER", "AND", "ANY", "APPEND", 
		"AS", "ASC", "ASYMMETRIC", "AUTHORIZATION", "BACKUP", "BEGIN", "BETWEEN", 
		"BREAK", "BROWSE", "BULK", "BY", "CALLED", "CASCADE", "CASE", "CERTIFICATE", 
		"CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
		"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINMENT", 
		"CONTAINS", "CONTAINSTABLE", "CONTINUE", "CONTRACT", "CONVERSATION", "CONVERT", 
		"CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "DATA_COMPRESSION", "DATABASE", "DBCC", "DEALLOCATE", 
		"DECLARE", "DEFAULT", "DELETE", "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", "ESCAPE", "ERROR", 
		"EVENTDATA", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", "FETCH", 
		"FILE", "FILENAME", "FILLFACTOR", "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", 
		"FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", "GOTO", "GRANT", "GROUP", 
		"HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INCLUDE", 
		"INDEX", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", 
		"JOIN", "KEY", "KILL", "LEFT", "LIFETIME", "LIKE", "LINENO", "LOAD", "LOG", 
		"MATCHED", "MERGE", "NATIONAL", "NOCHECK", "NONCLUSTERED", "NONE", "NOT", 
		"NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
		"OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", 
		"OVER", "PAGE", "PARTIAL", "PASSWORD", "PERCENT", "PIVOT", "PLAN", "PRECISION", 
		"PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", "RAISERROR", "RAW", 
		"READ", "READTEXT", "RECONFIGURE", "REFERENCES", "RELATED_CONVERSATION", 
		"RELATED_CONVERSATION_GROUP", "REPLICATION", "RESTORE", "RESTRICT", "RETURN", 
		"RETURNS", "REVERT", "REVOKE", "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", 
		"RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
		"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SERVER", 
		"SERVICE", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SOME", "SOURCE", 
		"STATISTICS", "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TARGET", "TEXTSIZE", 
		"THEN", "TO", "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", "TSEQUAL", 
		"UNION", "UNIQUE", "UNPIVOT", "UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", 
		"VARYING", "VIEW", "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", "WITHIN", 
		"WRITETEXT", "ABSOLUTE", "ACTION", "ACTIVE", "ACTIVATION", "AFTER", "ALGORITHM", 
		"ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLY", "ARITHABORT", "ASSEMBLY", "AUTO", 
		"AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
		"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BINARY_BASE64", 
		"BINARY_CHECKSUM", "BULK_LOGGED", "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", 
		"COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CREATE_NEW", "CREATION_DISPOSITION", 
		"CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATEADD", "DATEDIFF", "DATENAME", 
		"DATEPART", "DATE_CORRELATION_OPTIMIZATION", "DAYS", "DB_CHAINING", "DECRYPTION", 
		"DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
		"DELETED", "DENSE_RANK", "DIALOG", "DIRECTORY_NAME", "DISABLE", "DISABLED", 
		"DISABLE_BROKER", "DOCUMENT", "DYNAMIC", "EMERGENCY", "EMPTY", "ENABLE_BROKER", 
		"ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", "EXECUTABLE", "EXPAND", "EXPIRY_DATE", 
		"EXPLICIT", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", "FILESTREAM", 
		"FIRST", "FOLLOWING", "FORCE", "FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", 
		"GETDATE", "GETUTCDATE", "GLOBAL", "GO", "GROUPING", "GROUPING_ID", "HADR", 
		"HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
		"IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INITIATOR", "INPUT", "INSENSITIVE", 
		"INSERTED", "ISOLATION", "KB", "KEEP", "KEEPFIXED", "KEYSET", "KEYS", 
		"KEY_SOURCE", "LAST", "LEVEL", "LOB_COMPACTION", "LOCAL", "LOCK_ESCALATION", 
		"LOGIN", "LOOP", "MARK", "MASTER_KEY", "MAX", "MAX_QUEUE_READERS", "MAXDOP", 
		"MAXRECURSION", "MAXSIZE", "MESSAGE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", 
		"MINUTES", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", "MODIFY", 
		"MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_BROKER", "NEXT", 
		"NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO", "NO_WAIT", 
		"NTILE", "NUMBER", "NUMERIC_ROUNDABORT", "OFFLINE", "OFFSET", "ONLINE", 
		"ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", 
		"PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", "PATH", "POISON_MESSAGE_HANDLING", 
		"PRECEDING", "PRIOR", "PRIVATE", "PRIVILEGES", "PROCEDURE_NAME", "PROVIDER", 
		"PROVIDER_KEY_NAME", "QUEUE", "QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", 
		"READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_WRITE", "REBUILD", "RECOMPILE", 
		"RECEIVE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REORGANIZE", 
		"REMOTE", "REPEATABLE", "RESTRICTED_USER", "RETENTION", "ROBUST", "ROOT", 
		"ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", "SCROLL", 
		"SCROLL_LOCKS", "SECONDS", "SELF", "SEND", "SENT", "SERIALIZABLE", "SETERROR", 
		"SHOWPLAN", "SIMPLE", "SINGLE_USER", "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STDEV", "STDEVP", "SUBJECT", 
		"STUFF", "SUM", "SYMMETRIC", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
		"THROW", "TIES", "TIME", "TIMER", "TIMEOUT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", 
		"UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VALIDATION", 
		"VALID_XML", "VAR", "VARP", "VIEWS", "VIEW_METADATA", "WELL_FORMED_XML", 
		"WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", 
		"BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", "SHARP", 
		"DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "tsql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public tsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Tsql_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(tsqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsql_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTsql_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTsql_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTsql_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tsql_fileContext tsql_file() throws RecognitionException {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (ALTER - 19)) | (1L << (BEGIN - 19)) | (1L << (BREAK - 19)) | (1L << (CALLED - 19)) | (1L << (CLOSE - 19)) | (1L << (COMMIT - 19)) | (1L << (CONTINUE - 19)) | (1L << (CREATE - 19)) | (1L << (DATA_COMPRESSION - 19)) | (1L << (DBCC - 19)) | (1L << (DEALLOCATE - 19)) | (1L << (DECLARE - 19)) | (1L << (DELETE - 19)) | (1L << (DROP - 19)) | (1L << (END - 19)))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EVENTDATA - 85)) | (1L << (EXECUTE - 85)) | (1L << (FETCH - 85)) | (1L << (FILLFACTOR - 85)) | (1L << (FORCESEEK - 85)) | (1L << (GET - 85)) | (1L << (GOTO - 85)) | (1L << (GRANT - 85)) | (1L << (IF - 85)) | (1L << (INSERT - 85)) | (1L << (MERGE - 85)) | (1L << (OFFSETS - 85)) | (1L << (OPEN - 85)))) != 0) || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (PAGE - 154)) | (1L << (PRINT - 154)) | (1L << (PUBLIC - 154)) | (1L << (RAISERROR - 154)) | (1L << (RAW - 154)) | (1L << (RETURN - 154)) | (1L << (RETURNS - 154)) | (1L << (REVERT - 154)) | (1L << (ROLLBACK - 154)) | (1L << (ROWCOUNT - 154)) | (1L << (SAVE - 154)) | (1L << (SELECT - 154)) | (1L << (SERVER - 154)) | (1L << (SET - 154)) | (1L << (SOURCE - 154)) | (1L << (TARGET - 154)))) != 0) || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (UPDATE - 218)) | (1L << (USE - 218)) | (1L << (WAITFOR - 218)) | (1L << (WHILE - 218)) | (1L << (WITH - 218)) | (1L << (ABSOLUTE - 218)) | (1L << (APPLY - 218)) | (1L << (AUTO - 218)) | (1L << (AVG - 218)) | (1L << (CALLER - 218)) | (1L << (CAST - 218)) | (1L << (CATCH - 218)) | (1L << (CHECKSUM_AGG - 218)) | (1L << (COMMITTED - 218)) | (1L << (CONCAT - 218)) | (1L << (CONCAT_NULL_YIELDS_NULL - 218)) | (1L << (CONTROL - 218)) | (1L << (COOKIE - 218)) | (1L << (COUNT - 218)) | (1L << (COUNT_BIG - 218)))) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & ((1L << (DELAY - 290)) | (1L << (DELETED - 290)) | (1L << (DENSE_RANK - 290)) | (1L << (DISABLE - 290)) | (1L << (DYNAMIC - 290)) | (1L << (ENCRYPTION - 290)) | (1L << (EXPAND - 290)) | (1L << (FAST - 290)) | (1L << (FAST_FORWARD - 290)) | (1L << (FIRST - 290)) | (1L << (FOLLOWING - 290)) | (1L << (FORCE - 290)) | (1L << (FORCED - 290)) | (1L << (FORWARD_ONLY - 290)) | (1L << (FULLSCAN - 290)) | (1L << (GLOBAL - 290)) | (1L << (GROUPING - 290)) | (1L << (GROUPING_ID - 290)) | (1L << (HASH - 290)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 290)) | (1L << (IMPERSONATE - 290)) | (1L << (INPUT - 290)) | (1L << (INSENSITIVE - 290)) | (1L << (INSERTED - 290)) | (1L << (ISOLATION - 290)) | (1L << (KEEP - 290)) | (1L << (KEEPFIXED - 290)) | (1L << (KEYSET - 290)) | (1L << (LAST - 290)) | (1L << (LEVEL - 290)) | (1L << (LOCAL - 290)) | (1L << (LOCK_ESCALATION - 290)) | (1L << (LOGIN - 290)))) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (LOOP - 354)) | (1L << (MARK - 354)) | (1L << (MAX - 354)) | (1L << (MAXDOP - 354)) | (1L << (MAXRECURSION - 354)) | (1L << (MIN - 354)) | (1L << (MODIFY - 354)) | (1L << (NAME - 354)) | (1L << (NEXT - 354)) | (1L << (NOCOUNT - 354)) | (1L << (NOEXPAND - 354)) | (1L << (NORECOMPUTE - 354)) | (1L << (NTILE - 354)) | (1L << (NUMBER - 354)) | (1L << (OFFSET - 354)) | (1L << (ONLINE - 354)) | (1L << (ONLY - 354)) | (1L << (OPTIMISTIC - 354)) | (1L << (OPTIMIZE - 354)) | (1L << (OUT - 354)) | (1L << (OUTPUT - 354)) | (1L << (OWNER - 354)) | (1L << (PARAMETERIZATION - 354)) | (1L << (PARTITION - 354)) | (1L << (PATH - 354)) | (1L << (PRECEDING - 354)) | (1L << (PRIOR - 354)) | (1L << (PRIVILEGES - 354)) | (1L << (RANGE - 354)) | (1L << (RANK - 354)) | (1L << (READONLY - 354)) | (1L << (READ_ONLY - 354)) | (1L << (RECOMPILE - 354)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (RELATIVE - 420)) | (1L << (REMOTE - 420)) | (1L << (REPEATABLE - 420)) | (1L << (ROBUST - 420)) | (1L << (ROOT - 420)) | (1L << (ROW - 420)) | (1L << (ROWGUID - 420)) | (1L << (ROWS - 420)) | (1L << (ROW_NUMBER - 420)) | (1L << (SAMPLE - 420)) | (1L << (SCHEMABINDING - 420)) | (1L << (SCROLL - 420)) | (1L << (SCROLL_LOCKS - 420)) | (1L << (SELF - 420)) | (1L << (SEND - 420)) | (1L << (SERIALIZABLE - 420)) | (1L << (SIMPLE - 420)) | (1L << (SIZE - 420)) | (1L << (SNAPSHOT - 420)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 420)) | (1L << (STATIC - 420)) | (1L << (STATS_STREAM - 420)) | (1L << (STDEV - 420)) | (1L << (STDEVP - 420)) | (1L << (SUM - 420)) | (1L << (TEXTIMAGE_ON - 420)) | (1L << (THROW - 420)) | (1L << (TIES - 420)) | (1L << (TIME - 420)) | (1L << (TRY - 420)) | (1L << (TYPE - 420)) | (1L << (TYPE_WARNING - 420)) | (1L << (UNBOUNDED - 420)) | (1L << (UNCOMMITTED - 420)) | (1L << (UNKNOWN - 420)) | (1L << (USING - 420)) | (1L << (VAR - 420)) | (1L << (VARP - 420)) | (1L << (VIEWS - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (VIEW_METADATA - 484)) | (1L << (WORK - 484)) | (1L << (XML - 484)) | (1L << (XMLNAMESPACES - 484)) | (1L << (DOUBLE_QUOTE_ID - 484)) | (1L << (SQUARE_BRACKET_ID - 484)) | (1L << (ID - 484)) | (1L << (LR_BRACKET - 484)) | (1L << (SEMI - 484)))) != 0)) {
				{
				{
				setState(488);
				batch();
				}
				}
				setState(493);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(494);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(496);
			sql_clauses();
			setState(500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==GO) {
				{
				{
				setState(497);
				go_statement();
				}
				}
				setState(502);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(tsqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(tsqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSql_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSql_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(507); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(503);
					sql_clause();
					setState(505);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						setState(504);
						match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(509); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Empty_statementContext empty_statement() {
			return getRuleContext(Empty_statementContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSql_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSql_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSql_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clause);
		try {
			setState(517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(511);
				dml_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(512);
				ddl_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(513);
				cfl_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(514);
				dbcc_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(515);
				empty_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(516);
				another_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDml_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDml_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(519);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(520);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(521);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(522);
				select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(523);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(526);
				create_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(527);
				create_index();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(528);
				create_or_alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(529);
				create_or_alter_trigger();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(530);
				create_or_alter_function();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(531);
				create_statistics();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(532);
				create_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(533);
				create_type();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(534);
				create_view();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(535);
				alter_table();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(536);
				alter_database();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(537);
				drop_index();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(538);
				drop_procedure();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(539);
				drop_trigger();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(540);
				drop_function();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(541);
				drop_statistics();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(542);
				drop_table();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(543);
				drop_type();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(544);
				drop_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
	 
		public Cfl_statementContext() { }
		public void copyFrom(Cfl_statementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Waitfor_statementContext extends Cfl_statementContext {
		public TerminalNode WAITFOR() { return getToken(tsqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DELAY() { return getToken(tsqlParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(tsqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(tsqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWaitfor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWaitfor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWaitfor_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Print_statementContext extends Cfl_statementContext {
		public TerminalNode PRINT() { return getToken(tsqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Print_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterPrint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitPrint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitPrint_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Continue_statementContext extends Cfl_statementContext {
		public TerminalNode CONTINUE() { return getToken(tsqlParser.CONTINUE, 0); }
		public Continue_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class If_statementContext extends Cfl_statementContext {
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(tsqlParser.ELSE, 0); }
		public If_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Throw_statementContext extends Cfl_statementContext {
		public Token error_number;
		public Token message;
		public Token state;
		public TerminalNode THROW() { return getToken(tsqlParser.THROW, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(tsqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(tsqlParser.DECIMAL, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(tsqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(tsqlParser.LOCAL_ID, i);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Throw_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitThrow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitThrow_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Raiseerror_statementbContext extends Cfl_statementContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public TerminalNode RAISERROR() { return getToken(tsqlParser.RAISERROR, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode LOG() { return getToken(tsqlParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(tsqlParser.SETERROR, 0); }
		public Raiseerror_statementbContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterRaiseerror_statementb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitRaiseerror_statementb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitRaiseerror_statementb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Try_catch_statementContext extends Cfl_statementContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(tsqlParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(tsqlParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(tsqlParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(tsqlParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(tsqlParser.END); }
		public TerminalNode END(int i) {
			return getToken(tsqlParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(tsqlParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(tsqlParser.CATCH, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTry_catch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTry_catch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTry_catch_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class While_statementContext extends Cfl_statementContext {
		public TerminalNode WHILE() { return getToken(tsqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(tsqlParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(tsqlParser.CONTINUE, 0); }
		public While_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWhile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Block_statementContext extends Cfl_statementContext {
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(tsqlParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public Block_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBlock_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBlock_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Break_statementContext extends Cfl_statementContext {
		public TerminalNode BREAK() { return getToken(tsqlParser.BREAK, 0); }
		public Break_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBreak_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBreak_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Goto_statementContext extends Cfl_statementContext {
		public TerminalNode GOTO() { return getToken(tsqlParser.GOTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Goto_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Return_statementContext extends Cfl_statementContext {
		public TerminalNode RETURN() { return getToken(tsqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(Cfl_statementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_cfl_statement);
		int _la;
		try {
			setState(687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				_localctx = new Block_statementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(547);
				match(BEGIN);
				setState(549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(548);
					match(SEMI);
					}
					break;
				}
				setState(552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(551);
					sql_clauses();
					}
					break;
				}
				setState(554);
				match(END);
				setState(556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(555);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Break_statementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(558);
				match(BREAK);
				setState(560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					setState(559);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Continue_statementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(562);
				match(CONTINUE);
				setState(564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(563);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new Goto_statementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(566);
				match(GOTO);
				setState(567);
				id();
				setState(569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(568);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new Goto_statementContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(571);
				id();
				setState(572);
				match(COLON);
				setState(574);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(573);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new If_statementContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(576);
				match(IF);
				setState(577);
				search_condition();
				setState(578);
				sql_clause();
				setState(581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(579);
					match(ELSE);
					setState(580);
					sql_clause();
					}
					break;
				}
				setState(584);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(583);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new Return_statementContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(586);
				match(RETURN);
				setState(588);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(587);
					expression(0);
					}
					break;
				}
				setState(591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(590);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				_localctx = new Throw_statementContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(593);
				match(THROW);
				setState(599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_ID || _la==DECIMAL) {
					{
					setState(594);
					((Throw_statementContext)_localctx).error_number = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
						((Throw_statementContext)_localctx).error_number = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(595);
					match(COMMA);
					setState(596);
					((Throw_statementContext)_localctx).message = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((Throw_statementContext)_localctx).message = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(597);
					match(COMMA);
					setState(598);
					((Throw_statementContext)_localctx).state = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
						((Throw_statementContext)_localctx).state = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					setState(601);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new Try_catch_statementContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(604);
				match(BEGIN);
				setState(605);
				match(TRY);
				setState(607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					setState(606);
					match(SEMI);
					}
					break;
				}
				setState(610);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					setState(609);
					((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
					}
					break;
				}
				setState(612);
				match(END);
				setState(613);
				match(TRY);
				setState(615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(614);
					match(SEMI);
					}
				}

				setState(617);
				match(BEGIN);
				setState(618);
				match(CATCH);
				setState(620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					setState(619);
					match(SEMI);
					}
					break;
				}
				setState(623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					setState(622);
					((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
					}
					break;
				}
				setState(625);
				match(END);
				setState(626);
				match(CATCH);
				setState(628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					setState(627);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new Waitfor_statementContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(630);
				match(WAITFOR);
				setState(632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					setState(631);
					receive_statement();
					}
					break;
				}
				setState(635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(634);
					match(COMMA);
					}
				}

				setState(639);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(637);
					_la = _input.LA(1);
					if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(638);
					time();
					}
					break;
				}
				setState(642);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(641);
					expression(0);
					}
					break;
				}
				setState(645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(644);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new While_statementContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(647);
				match(WHILE);
				setState(648);
				search_condition();
				setState(658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(649);
					sql_clause();
					}
					break;
				case 2:
					{
					setState(650);
					match(BREAK);
					setState(652);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
					case 1:
						{
						setState(651);
						match(SEMI);
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(654);
					match(CONTINUE);
					setState(656);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
					case 1:
						{
						setState(655);
						match(SEMI);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new Print_statementContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(660);
				match(PRINT);
				setState(661);
				expression(0);
				setState(663);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(662);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new Raiseerror_statementbContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(665);
				match(RAISERROR);
				setState(666);
				match(LR_BRACKET);
				setState(667);
				((Raiseerror_statementbContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 495)) & ~0x3f) == 0 && ((1L << (_la - 495)) & ((1L << (LOCAL_ID - 495)) | (1L << (DECIMAL - 495)) | (1L << (STRING - 495)))) != 0)) ) {
					((Raiseerror_statementbContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(668);
				match(COMMA);
				setState(669);
				((Raiseerror_statementbContext)_localctx).severity = constant_LOCAL_ID();
				setState(670);
				match(COMMA);
				setState(671);
				((Raiseerror_statementbContext)_localctx).state = constant_LOCAL_ID();
				setState(676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(672);
					match(COMMA);
					setState(673);
					constant_LOCAL_ID();
					}
					}
					setState(678);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(679);
				match(RR_BRACKET);
				setState(682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(680);
					match(WITH);
					setState(681);
					_la = _input.LA(1);
					if ( !(_la==LOG || _la==SETERROR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(685);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(684);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitEmpty_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitEmpty_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(689);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAnother_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAnother_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAnother_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_another_statement);
		try {
			setState(703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(691);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(692);
				cursor_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(693);
				conversation_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(694);
				create_contract();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(695);
				create_queue();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(696);
				alter_queue();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(697);
				execute_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(698);
				message_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(699);
				security_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(700);
				set_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(701);
				transaction_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(702);
				use_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode QUEUE() { return getToken(tsqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(705);
			match(CREATE);
			setState(706);
			match(QUEUE);
			setState(709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(707);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(708);
				((Create_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				setState(711);
				queue_settings();
				}
				break;
			}
			setState(717);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(714);
				match(ON);
				setState(715);
				((Create_queueContext)_localctx).filegroup = id();
				}
				break;
			case DEFAULT:
				{
				setState(716);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ALTER:
			case BEGIN:
			case BREAK:
			case CALLED:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DATA_COMPRESSION:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EVENTDATA:
			case EXECUTE:
			case FETCH:
			case FILLFACTOR:
			case FORCESEEK:
			case GET:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case MERGE:
			case OFFSETS:
			case OPEN:
			case PAGE:
			case PRINT:
			case PUBLIC:
			case RAISERROR:
			case RAW:
			case RETURN:
			case RETURNS:
			case REVERT:
			case ROLLBACK:
			case ROWCOUNT:
			case SAVE:
			case SELECT:
			case SERVER:
			case SET:
			case SOURCE:
			case TARGET:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GO:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SEND:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public Token user_name;
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(tsqlParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(tsqlParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(tsqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(tsqlParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(tsqlParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(tsqlParser.ACTIVATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> ON() { return getTokens(tsqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(tsqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(tsqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(tsqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(tsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(tsqlParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(tsqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(tsqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode EXECUTE() { return getToken(tsqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(tsqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode SELF() { return getToken(tsqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(tsqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQueue_settings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQueue_settings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQueue_settings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(719);
			match(WITH);
			setState(726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(720);
				match(STATUS);
				setState(721);
				match(EQUAL);
				setState(722);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(723);
					match(COMMA);
					}
				}

				}
			}

			setState(734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETENTION) {
				{
				setState(728);
				match(RETENTION);
				setState(729);
				match(EQUAL);
				setState(730);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(731);
					match(COMMA);
					}
				}

				}
			}

			setState(790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACTIVATION) {
				{
				setState(736);
				match(ACTIVATION);
				setState(737);
				match(LR_BRACKET);
				setState(744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(739);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(738);
						match(COMMA);
						}
					}

					setState(741);
					match(STATUS);
					setState(742);
					match(EQUAL);
					setState(743);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(747);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(746);
						match(COMMA);
						}
					}

					setState(749);
					match(PROCEDURE_NAME);
					setState(750);
					match(EQUAL);
					setState(751);
					func_proc_name();
					}
					break;
				}
				setState(760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(755);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(754);
						match(COMMA);
						}
					}

					setState(757);
					match(MAX_QUEUE_READERS);
					setState(758);
					match(EQUAL);
					setState(759);
					((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
					}
					break;
				}
				setState(772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(763);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(762);
						match(COMMA);
						}
					}

					setState(765);
					match(EXECUTE);
					setState(766);
					match(AS);
					setState(770);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELF:
						{
						setState(767);
						match(SELF);
						}
						break;
					case STRING:
						{
						setState(768);
						((Queue_settingsContext)_localctx).user_name = match(STRING);
						}
						break;
					case OWNER:
						{
						setState(769);
						match(OWNER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(775);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(774);
						match(COMMA);
						}
					}

					setState(777);
					match(POISON_MESSAGE_HANDLING);
					setState(778);
					match(STATUS);
					setState(779);
					match(EQUAL);
					setState(780);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DROP || _la==COMMA) {
					{
					setState(784);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(783);
						match(COMMA);
						}
					}

					setState(786);
					match(DROP);
					}
				}

				setState(789);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public TerminalNode QUEUE() { return getToken(tsqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAlter_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAlter_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAlter_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(792);
			match(ALTER);
			setState(793);
			match(QUEUE);
			setState(796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(794);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(795);
				((Alter_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(800);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(798);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(799);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(tsqlParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(tsqlParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(tsqlParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(tsqlParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(tsqlParser.TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQueue_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQueue_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQueue_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_queue_action);
		int _la;
		try {
			setState(823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(802);
				match(REBUILD);
				setState(808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					setState(803);
					match(WITH);
					setState(804);
					match(LR_BRACKET);
					setState(805);
					queue_rebuild_options();
					setState(806);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(810);
				match(REORGANIZE);
				setState(815);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(811);
					match(WITH);
					setState(812);
					match(LOB_COMPACTION);
					setState(813);
					match(EQUAL);
					setState(814);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(817);
				match(MOVE);
				setState(818);
				match(TO);
				setState(821);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(819);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(820);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(tsqlParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQueue_rebuild_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQueue_rebuild_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQueue_rebuild_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(825);
			match(MAXDOP);
			setState(826);
			match(EQUAL);
			setState(827);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode CONTRACT() { return getToken(tsqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(tsqlParser.AUTHORIZATION, 0); }
		public List<TerminalNode> SENT() { return getTokens(tsqlParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(tsqlParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(tsqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(tsqlParser.BY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(tsqlParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(tsqlParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(tsqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(tsqlParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(tsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(tsqlParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(tsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(tsqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(tsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(tsqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_contract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_contract(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(829);
			match(CREATE);
			setState(830);
			match(CONTRACT);
			setState(831);
			contract_name();
			setState(834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(832);
				match(AUTHORIZATION);
				setState(833);
				((Create_contractContext)_localctx).owner_name = id();
				}
			}

			setState(836);
			match(LR_BRACKET);
			setState(847); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(839);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(837);
					((Create_contractContext)_localctx).message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					setState(838);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(841);
				match(SENT);
				setState(842);
				match(BY);
				setState(843);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==TARGET || _la==INITIATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(844);
					match(COMMA);
					}
				}

				}
				}
				setState(849); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (DEFAULT - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0) );
			setState(851);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterConversation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitConversation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitConversation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_conversation_statement);
		try {
			setState(859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(853);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(854);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(855);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(856);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(857);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(858);
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode MESSAGE() { return getToken(tsqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(tsqlParser.TYPE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(tsqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(tsqlParser.AUTHORIZATION, 0); }
		public TerminalNode NONE() { return getToken(tsqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(tsqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(tsqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(tsqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(tsqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(tsqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterMessage_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitMessage_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitMessage_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(861);
			match(CREATE);
			setState(862);
			match(MESSAGE);
			setState(863);
			match(TYPE);
			setState(864);
			((Message_statementContext)_localctx).message_type_name = id();
			setState(867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(865);
				match(AUTHORIZATION);
				setState(866);
				((Message_statementContext)_localctx).owner_name = id();
				}
			}

			{
			setState(869);
			match(VALIDATION);
			setState(870);
			match(EQUAL);
			setState(879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(871);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(872);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(873);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(874);
				match(VALID_XML);
				setState(875);
				match(WITH);
				setState(876);
				match(SCHEMA);
				setState(877);
				match(COLLECTION);
				setState(878);
				((Message_statementContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(tsqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(tsqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(tsqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(tsqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(tsqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(tsqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(tsqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(tsqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(tsqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(tsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(tsqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(tsqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(tsqlParser.BY, i);
		}
		public List<TerminalNode> SOURCE() { return getTokens(tsqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(tsqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(tsqlParser.PERCENT, 0); }
		public List<TerminalNode> AND() { return getTokens(tsqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(tsqlParser.AND, i);
		}
		public TerminalNode TARGET() { return getToken(tsqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(881);
				with_expression();
				}
			}

			setState(884);
			match(MERGE);
			setState(892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(885);
				match(TOP);
				setState(886);
				match(LR_BRACKET);
				setState(887);
				expression(0);
				setState(888);
				match(RR_BRACKET);
				setState(890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(889);
					match(PERCENT);
					}
				}

				}
			}

			setState(895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(894);
				match(INTO);
				}
			}

			setState(897);
			ddl_object();
			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(898);
				insert_with_table_hints();
				}
			}

			setState(902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(901);
				as_table_alias();
				}
				break;
			}
			setState(904);
			match(USING);
			setState(905);
			table_sources();
			setState(906);
			match(ON);
			setState(907);
			search_condition();
			setState(918);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(908);
					match(WHEN);
					setState(909);
					match(MATCHED);
					setState(912);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(910);
						match(AND);
						setState(911);
						search_condition();
						}
					}

					setState(914);
					match(THEN);
					setState(915);
					merge_matched();
					}
					} 
				}
				setState(920);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
			}
			setState(934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				setState(921);
				match(WHEN);
				setState(922);
				match(NOT);
				setState(923);
				match(MATCHED);
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(924);
					match(BY);
					setState(925);
					match(TARGET);
					}
				}

				setState(930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(928);
					match(AND);
					setState(929);
					search_condition();
					}
				}

				setState(932);
				match(THEN);
				setState(933);
				merge_not_matched();
				}
				break;
			}
			setState(949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(936);
				match(WHEN);
				setState(937);
				match(NOT);
				setState(938);
				match(MATCHED);
				setState(939);
				match(BY);
				setState(940);
				match(SOURCE);
				setState(943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(941);
					match(AND);
					setState(942);
					search_condition();
					}
				}

				setState(945);
				match(THEN);
				setState(946);
				merge_matched();
				}
				}
				setState(951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(952);
				output_clause();
				}
			}

			setState(956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(955);
				option_clause();
				}
			}

			setState(958);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(tsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(tsqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitMerge_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitMerge_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_merge_matched);
		int _la;
		try {
			setState(971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(960);
				match(UPDATE);
				setState(961);
				match(SET);
				setState(962);
				update_elem();
				setState(967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(963);
					match(COMMA);
					setState(964);
					update_elem();
					}
					}
					setState(969);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(970);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(tsqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(tsqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitMerge_not_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitMerge_not_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(973);
			match(INSERT);
			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(974);
				match(LR_BRACKET);
				setState(975);
				column_name_list();
				setState(976);
				match(RR_BRACKET);
				}
			}

			setState(983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(980);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(981);
				match(DEFAULT);
				setState(982);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(tsqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> FROM() { return getTokens(tsqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(tsqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(tsqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(tsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(tsqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(tsqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(985);
				with_expression();
				}
			}

			setState(988);
			match(DELETE);
			setState(996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(989);
				match(TOP);
				setState(990);
				match(LR_BRACKET);
				setState(991);
				expression(0);
				setState(992);
				match(RR_BRACKET);
				setState(994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(993);
					match(PERCENT);
					}
				}

				}
			}

			setState(999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(998);
				match(FROM);
				}
			}

			setState(1001);
			delete_statement_from();
			setState(1003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1002);
				insert_with_table_hints();
				}
				break;
			}
			setState(1006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1005);
				output_clause();
				}
				break;
			}
			setState(1010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1008);
				match(FROM);
				setState(1009);
				table_sources();
				}
			}

			setState(1025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1012);
				match(WHERE);
				setState(1023);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case ISNULL:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SERVER:
				case SESSION_USER:
				case SOURCE:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case STUFF:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(1013);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(1014);
					match(CURRENT);
					setState(1015);
					match(OF);
					setState(1021);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
					case 1:
						{
						setState(1017);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
						case 1:
							{
							setState(1016);
							match(GLOBAL);
							}
							break;
						}
						setState(1019);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(1020);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1027);
				for_clause();
				}
			}

			setState(1031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(1030);
				option_clause();
				}
			}

			setState(1034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1033);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDelete_statement_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDelete_statement_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDelete_statement_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_delete_statement_from);
		try {
			setState(1040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1036);
				table_alias();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1037);
				ddl_object();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1038);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1039);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(tsqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(tsqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(tsqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1042);
				with_expression();
				}
			}

			setState(1045);
			match(INSERT);
			setState(1053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(1046);
				match(TOP);
				setState(1047);
				match(LR_BRACKET);
				setState(1048);
				expression(0);
				setState(1049);
				match(RR_BRACKET);
				setState(1051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(1050);
					match(PERCENT);
					}
				}

				}
			}

			setState(1056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1055);
				match(INTO);
				}
			}

			setState(1060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(1058);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(1059);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1062);
				insert_with_table_hints();
				}
				break;
			}
			setState(1069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				setState(1065);
				match(LR_BRACKET);
				setState(1066);
				column_name_list();
				setState(1067);
				match(RR_BRACKET);
				}
				break;
			}
			setState(1072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(1071);
				output_clause();
				}
			}

			setState(1074);
			insert_statement_value();
			setState(1076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1075);
				for_clause();
				}
			}

			setState(1079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(1078);
				option_clause();
				}
			}

			setState(1082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1081);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(tsqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitInsert_statement_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitInsert_statement_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_insert_statement_value);
		try {
			setState(1089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1084);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1085);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1086);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1087);
				match(DEFAULT);
				setState(1088);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(tsqlParser.RECEIVE, 0); }
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(tsqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(tsqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(tsqlParser.LOCAL_ID, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(tsqlParser.INTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(tsqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterReceive_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitReceive_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitReceive_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1091);
				match(LR_BRACKET);
				}
			}

			setState(1094);
			match(RECEIVE);
			setState(1099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(1095);
				match(ALL);
				}
				break;
			case DISTINCT:
				{
				setState(1096);
				match(DISTINCT);
				}
				break;
			case TOP:
				{
				setState(1097);
				top_clause();
				}
				break;
			case STAR:
				{
				setState(1098);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				setState(1101);
				match(LOCAL_ID);
				setState(1102);
				match(EQUAL);
				setState(1103);
				expression(0);
				setState(1105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1104);
					match(COMMA);
					}
				}

				}
				}
				setState(1111);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1112);
			match(FROM);
			setState(1113);
			full_table_name();
			setState(1119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1114);
				match(INTO);
				setState(1115);
				((Receive_statementContext)_localctx).table_variable = id();
				{
				setState(1116);
				match(WHERE);
				setState(1117);
				((Receive_statementContext)_localctx).where = search_condition();
				}
				}
			}

			setState(1122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(1121);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1124);
				with_expression();
				}
			}

			setState(1127);
			query_expression();
			setState(1129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(1128);
				order_by_clause();
				}
				break;
			}
			setState(1132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(1131);
				for_clause();
				}
				break;
			}
			setState(1135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
			case 1:
				{
				setState(1134);
				option_clause();
				}
				break;
			}
			setState(1138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1137);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(1140);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(1141);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(tsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(tsqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(tsqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(tsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(tsqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(tsqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1144);
				with_expression();
				}
			}

			setState(1147);
			match(UPDATE);
			setState(1155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(1148);
				match(TOP);
				setState(1149);
				match(LR_BRACKET);
				setState(1150);
				expression(0);
				setState(1151);
				match(RR_BRACKET);
				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(1152);
					match(PERCENT);
					}
				}

				}
			}

			setState(1159);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(1157);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(1158);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(1161);
				with_table_hints();
				}
			}

			setState(1164);
			match(SET);
			setState(1165);
			update_elem();
			setState(1170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1166);
				match(COMMA);
				setState(1167);
				update_elem();
				}
				}
				setState(1172);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1173);
				output_clause();
				}
				break;
			}
			setState(1178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1176);
				match(FROM);
				setState(1177);
				table_sources();
				}
			}

			setState(1193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1180);
				match(WHERE);
				setState(1191);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case ISNULL:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SERVER:
				case SESSION_USER:
				case SOURCE:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case STUFF:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(1181);
					search_condition_list();
					}
					break;
				case CURRENT:
					{
					setState(1182);
					match(CURRENT);
					setState(1183);
					match(OF);
					setState(1189);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
					case 1:
						{
						setState(1185);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
						case 1:
							{
							setState(1184);
							match(GLOBAL);
							}
							break;
						}
						setState(1187);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(1188);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1195);
				for_clause();
				}
			}

			setState(1199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(1198);
				option_clause();
				}
			}

			setState(1202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(1201);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(tsqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(tsqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOutput_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOutput_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1204);
			match(OUTPUT);
			setState(1205);
			output_dml_list_elem();
			setState(1210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1206);
				match(COMMA);
				setState(1207);
				output_dml_list_elem();
				}
				}
				setState(1212);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1213);
				match(INTO);
				setState(1216);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(1214);
					match(LOCAL_ID);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1215);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(1218);
					match(LR_BRACKET);
					setState(1219);
					column_name_list();
					setState(1220);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOutput_dml_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOutput_dml_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_output_dml_list_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1228);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1226);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(1227);
				expression(0);
				}
				break;
			}
			setState(1234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(1231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1230);
					match(AS);
					}
				}

				setState(1233);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DELETED() { return getToken(tsqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(tsqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(tsqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOutput_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOutput_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOutput_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_output_column_name);
		try {
			setState(1247);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1236);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(1237);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(1238);
					table_name();
					}
					break;
				}
				setState(1241);
				match(DOT);
				setState(1244);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(1242);
					match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1243);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1246);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(tsqlParser.DATABASE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(tsqlParser.CONTAINMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(tsqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(tsqlParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode LOG() { return getToken(tsqlParser.LOG, 0); }
		public TerminalNode COLLATE() { return getToken(tsqlParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(tsqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(tsqlParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(tsqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1249);
			match(CREATE);
			setState(1250);
			match(DATABASE);
			{
			setState(1251);
			((Create_databaseContext)_localctx).database = id();
			}
			setState(1255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINMENT) {
				{
				setState(1252);
				match(CONTAINMENT);
				setState(1253);
				match(EQUAL);
				setState(1254);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1257);
				match(ON);
				setState(1259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1258);
					match(PRIMARY);
					}
				}

				setState(1261);
				database_file_spec();
				setState(1266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1262);
					match(COMMA);
					setState(1263);
					database_file_spec();
					}
					}
					setState(1268);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(1271);
				match(LOG);
				setState(1272);
				match(ON);
				setState(1273);
				database_file_spec();
				setState(1278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1274);
					match(COMMA);
					setState(1275);
					database_file_spec();
					}
					}
					setState(1280);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1283);
				match(COLLATE);
				setState(1284);
				((Create_databaseContext)_localctx).collation_name = id();
				}
			}

			setState(1296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(1287);
				match(WITH);
				setState(1288);
				create_database_option();
				setState(1293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1289);
					match(COMMA);
					setState(1290);
					create_database_option();
					}
					}
					setState(1295);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(tsqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(tsqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(tsqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(tsqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(tsqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1298);
			match(CREATE);
			setState(1300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1299);
				match(UNIQUE);
				}
			}

			setState(1303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(1302);
				clustered();
				}
			}

			setState(1305);
			match(INDEX);
			setState(1306);
			id();
			setState(1307);
			match(ON);
			setState(1308);
			table_name_with_hint();
			setState(1309);
			match(LR_BRACKET);
			setState(1310);
			column_name_list_with_order();
			setState(1311);
			match(RR_BRACKET);
			setState(1317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1312);
				match(INCLUDE);
				setState(1313);
				match(LR_BRACKET);
				setState(1314);
				column_name_list();
				setState(1315);
				match(RR_BRACKET);
				}
			}

			setState(1321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1319);
				match(WHERE);
				setState(1320);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(1324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(1323);
				index_options();
				}
				break;
			}
			setState(1328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1326);
				match(ON);
				setState(1327);
				id();
				}
			}

			setState(1331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1330);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public TerminalNode PROC() { return getToken(tsqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(tsqlParser.PROCEDURE, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(tsqlParser.REPLICATION, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_or_alter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_or_alter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_or_alter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_create_or_alter_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1334);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1335);
			func_proc_name();
			setState(1338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1336);
				match(SEMI);
				setState(1337);
				match(DECIMAL);
				}
			}

			setState(1354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(1341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1340);
					match(LR_BRACKET);
					}
				}

				setState(1343);
				procedure_param();
				setState(1348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1344);
					match(COMMA);
					setState(1345);
					procedure_param();
					}
					}
					setState(1350);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(1351);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(1365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1356);
				match(WITH);
				setState(1357);
				procedure_option();
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1358);
					match(COMMA);
					setState(1359);
					procedure_option();
					}
					}
					setState(1364);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1367);
				match(FOR);
				setState(1368);
				match(REPLICATION);
				}
			}

			setState(1371);
			match(AS);
			setState(1372);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Dml_triggerContext dml_trigger() {
			return getRuleContext(Dml_triggerContext.class,0);
		}
		public Ddl_triggerContext ddl_trigger() {
			return getRuleContext(Ddl_triggerContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_or_alter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_or_alter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_or_alter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_create_or_alter_trigger);
		try {
			setState(1376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1374);
				dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1375);
				ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(tsqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public List<TerminalNode> FOR() { return getTokens(tsqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(tsqlParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(tsqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(tsqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(tsqlParser.OF, 0); }
		public List<TerminalNode> WITH() { return getTokens(tsqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(tsqlParser.WITH, i);
		}
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public TerminalNode APPEND() { return getToken(tsqlParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(tsqlParser.REPLICATION, 0); }
		public Dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_triggerContext dml_trigger() throws RecognitionException {
		Dml_triggerContext _localctx = new Dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1378);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1379);
			match(TRIGGER);
			setState(1380);
			simple_name();
			setState(1381);
			match(ON);
			setState(1382);
			table_name();
			setState(1392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1383);
				match(WITH);
				setState(1384);
				dml_trigger_option();
				setState(1389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1385);
					match(COMMA);
					setState(1386);
					dml_trigger_option();
					}
					}
					setState(1391);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(1394);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(1395);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1396);
				match(INSTEAD);
				setState(1397);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1400);
			dml_trigger_operation();
			setState(1405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1401);
				match(COMMA);
				setState(1402);
				dml_trigger_operation();
				}
				}
				setState(1407);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1408);
				match(WITH);
				setState(1409);
				match(APPEND);
				}
			}

			setState(1415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1412);
				match(NOT);
				setState(1413);
				match(FOR);
				setState(1414);
				match(REPLICATION);
				}
			}

			setState(1417);
			match(AS);
			setState(1418);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDml_trigger_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDml_trigger_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDml_trigger_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_trigger_optionContext dml_trigger_option() throws RecognitionException {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_dml_trigger_option);
		try {
			setState(1422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1420);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1421);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(tsqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(tsqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(tsqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDml_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDml_trigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDml_trigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_trigger_operationContext dml_trigger_operation() throws RecognitionException {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_dml_trigger_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1424);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(tsqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return getRuleContext(Ddl_trigger_operationContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(tsqlParser.AFTER, 0); }
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(tsqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(tsqlParser.DATABASE, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public Ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDdl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDdl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDdl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_triggerContext ddl_trigger() throws RecognitionException {
		Ddl_triggerContext _localctx = new Ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1426);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1427);
			match(TRIGGER);
			setState(1428);
			simple_name();
			setState(1429);
			match(ON);
			setState(1433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(1430);
				match(ALL);
				setState(1431);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(1432);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1435);
				match(WITH);
				setState(1436);
				dml_trigger_option();
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1437);
					match(COMMA);
					setState(1438);
					dml_trigger_option();
					}
					}
					setState(1443);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1446);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1447);
			ddl_trigger_operation();
			setState(1452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1448);
				match(COMMA);
				setState(1449);
				dml_trigger_operation();
				}
				}
				setState(1454);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1455);
			match(AS);
			setState(1456);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_trigger_operationContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDdl_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDdl_trigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDdl_trigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_trigger_operationContext ddl_trigger_operation() throws RecognitionException {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_ddl_trigger_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1458);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(tsqlParser.FUNCTION, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return getRuleContext(Func_body_returns_selectContext.class,0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return getRuleContext(Func_body_returns_tableContext.class,0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return getRuleContext(Func_body_returns_scalarContext.class,0);
		}
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_or_alter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_or_alter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_or_alter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1460);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1461);
			match(FUNCTION);
			setState(1462);
			func_proc_name();
			setState(1476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				{
				setState(1463);
				match(LR_BRACKET);
				setState(1464);
				procedure_param();
				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1465);
					match(COMMA);
					setState(1466);
					procedure_param();
					}
					}
					setState(1471);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1472);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				setState(1474);
				match(LR_BRACKET);
				setState(1475);
				match(RR_BRACKET);
				}
				break;
			}
			setState(1481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(1478);
				func_body_returns_select();
				}
				break;
			case 2:
				{
				setState(1479);
				func_body_returns_table();
				}
				break;
			case 3:
				{
				setState(1480);
				func_body_returns_scalar();
				}
				break;
			}
			setState(1484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(1483);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_selectContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(tsqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(tsqlParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(tsqlParser.RETURN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunc_body_returns_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunc_body_returns_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunc_body_returns_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_selectContext func_body_returns_select() throws RecognitionException {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_func_body_returns_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1486);
			match(RETURNS);
			setState(1487);
			match(TABLE);
			setState(1497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1488);
				match(WITH);
				setState(1489);
				function_option();
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1490);
					match(COMMA);
					setState(1491);
					function_option();
					}
					}
					setState(1496);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1499);
				match(AS);
				}
			}

			setState(1502);
			match(RETURN);
			setState(1503);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_tableContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(tsqlParser.RETURNS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(tsqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(tsqlParser.END, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunc_body_returns_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunc_body_returns_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunc_body_returns_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_tableContext func_body_returns_table() throws RecognitionException {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1505);
			match(RETURNS);
			setState(1506);
			match(LOCAL_ID);
			setState(1507);
			table_type_definition();
			setState(1517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1508);
				match(WITH);
				setState(1509);
				function_option();
				setState(1514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1510);
					match(COMMA);
					setState(1511);
					function_option();
					}
					}
					setState(1516);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1519);
				match(AS);
				}
			}

			setState(1522);
			match(BEGIN);
			setState(1526);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1523);
					sql_clause();
					}
					} 
				}
				setState(1528);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			}
			setState(1529);
			match(RETURN);
			setState(1530);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_scalarContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURNS() { return getToken(tsqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(tsqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(tsqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_scalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunc_body_returns_scalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunc_body_returns_scalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunc_body_returns_scalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_scalarContext func_body_returns_scalar() throws RecognitionException {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1532);
			match(RETURNS);
			setState(1533);
			data_type();
			setState(1543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1534);
				match(WITH);
				setState(1535);
				function_option();
				setState(1540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1536);
					match(COMMA);
					setState(1537);
					function_option();
					}
					}
					setState(1542);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1545);
				match(AS);
				}
			}

			setState(1548);
			match(BEGIN);
			setState(1552);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1549);
					sql_clause();
					}
					} 
				}
				setState(1554);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			}
			setState(1555);
			match(RETURN);
			setState(1556);
			((Func_body_returns_scalarContext)_localctx).ret = expression(0);
			setState(1558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1557);
				match(SEMI);
				}
			}

			setState(1560);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Default_valueContext default_val;
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public TerminalNode VARYING() { return getToken(tsqlParser.VARYING, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode OUT() { return getToken(tsqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(tsqlParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(tsqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterProcedure_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitProcedure_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitProcedure_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1562);
			match(LOCAL_ID);
			setState(1566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(1563);
				id();
				setState(1564);
				match(DOT);
				}
				break;
			}
			setState(1569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1568);
				match(AS);
				}
			}

			setState(1571);
			data_type();
			setState(1573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(1572);
				match(VARYING);
				}
			}

			setState(1577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(1575);
				match(EQUAL);
				setState(1576);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(1580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (OUT - 392)) | (1L << (OUTPUT - 392)) | (1L << (READONLY - 392)))) != 0)) {
				{
				setState(1579);
				_la = _input.LA(1);
				if ( !(((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (OUT - 392)) | (1L << (OUTPUT - 392)) | (1L << (READONLY - 392)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(tsqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterProcedure_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitProcedure_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitProcedure_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_procedure_option);
		try {
			setState(1585);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1582);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1583);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1584);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(tsqlParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(tsqlParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(tsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(tsqlParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(tsqlParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(tsqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunction_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunction_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunction_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_function_option);
		try {
			setState(1599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1587);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1588);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1589);
				match(RETURNS);
				setState(1590);
				match(NULL);
				setState(1591);
				match(ON);
				setState(1592);
				match(NULL);
				setState(1593);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(1594);
				match(CALLED);
				setState(1595);
				match(ON);
				setState(1596);
				match(NULL);
				setState(1597);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1598);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(tsqlParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode FULLSCAN() { return getToken(tsqlParser.FULLSCAN, 0); }
		public TerminalNode SAMPLE() { return getToken(tsqlParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode STATS_STREAM() { return getToken(tsqlParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(tsqlParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(tsqlParser.ROWS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(tsqlParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(tsqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1601);
			match(CREATE);
			setState(1602);
			match(STATISTICS);
			setState(1603);
			id();
			setState(1604);
			match(ON);
			setState(1605);
			table_name_with_hint();
			setState(1606);
			match(LR_BRACKET);
			setState(1607);
			column_name_list();
			setState(1608);
			match(RR_BRACKET);
			setState(1627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(1609);
				match(WITH);
				setState(1615);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(1610);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(1611);
					match(SAMPLE);
					setState(1612);
					match(DECIMAL);
					setState(1613);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					setState(1614);
					match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(1617);
					match(COMMA);
					setState(1618);
					match(NORECOMPUTE);
					}
					break;
				}
				setState(1625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1621);
					match(COMMA);
					setState(1622);
					match(INCREMENTAL);
					setState(1623);
					match(EQUAL);
					setState(1624);
					on_off();
					}
				}

				}
				break;
			}
			setState(1630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(1629);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(tsqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(tsqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(tsqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(tsqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(CREATE);
			setState(1633);
			match(TABLE);
			setState(1634);
			table_name();
			setState(1635);
			match(LR_BRACKET);
			setState(1636);
			column_def_table_constraints();
			setState(1638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1637);
				match(COMMA);
				}
			}

			setState(1640);
			match(RR_BRACKET);
			setState(1644);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1641);
					table_options();
					}
					} 
				}
				setState(1646);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
			}
			setState(1650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				{
				setState(1647);
				match(ON);
				setState(1648);
				id();
				}
				break;
			case 2:
				{
				setState(1649);
				match(DEFAULT);
				}
				break;
			}
			setState(1655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(1652);
				match(TEXTIMAGE_ON);
				setState(1653);
				id();
				}
				break;
			case 2:
				{
				setState(1654);
				match(DEFAULT);
				}
				break;
			}
			setState(1658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(1657);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1660);
			match(WITH);
			setState(1661);
			match(LR_BRACKET);
			setState(1662);
			index_option();
			setState(1667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1663);
				match(COMMA);
				setState(1664);
				index_option();
				}
				}
				setState(1669);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1670);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public Table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionContext table_option() throws RecognitionException {
		Table_optionContext _localctx = new Table_optionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_table_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1672);
			simple_id();
			setState(1673);
			match(EQUAL);
			setState(1677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(1674);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(1675);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(1676);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(tsqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(tsqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(tsqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(tsqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(tsqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1679);
			match(CREATE);
			setState(1680);
			match(VIEW);
			setState(1681);
			simple_name();
			setState(1686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1682);
				match(LR_BRACKET);
				setState(1683);
				column_name_list();
				setState(1684);
				match(RR_BRACKET);
				}
			}

			setState(1697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1688);
				match(WITH);
				setState(1689);
				view_attribute();
				setState(1694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1690);
					match(COMMA);
					setState(1691);
					view_attribute();
					}
					}
					setState(1696);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1699);
			match(AS);
			setState(1700);
			select_statement();
			setState(1704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(1701);
				match(WITH);
				setState(1702);
				match(CHECK);
				setState(1703);
				match(OPTION);
				}
				break;
			}
			setState(1707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(1706);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(tsqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(tsqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitView_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitView_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1709);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(tsqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(tsqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(tsqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(tsqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(tsqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode ADD() { return getToken(tsqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return getRuleContext(Column_def_table_constraintContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(tsqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(tsqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(tsqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(tsqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(tsqlParser.REFERENCES, 0); }
		public TerminalNode REBUILD() { return getToken(tsqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(tsqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(tsqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1711);
			match(ALTER);
			setState(1712);
			match(TABLE);
			setState(1713);
			table_name();
			setState(1752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				{
				setState(1714);
				match(SET);
				setState(1715);
				match(LR_BRACKET);
				setState(1716);
				match(LOCK_ESCALATION);
				setState(1717);
				match(EQUAL);
				setState(1718);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1719);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(1720);
				match(ADD);
				setState(1721);
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				setState(1722);
				match(ALTER);
				setState(1723);
				match(COLUMN);
				setState(1724);
				column_definition();
				}
				break;
			case 4:
				{
				setState(1725);
				match(DROP);
				setState(1726);
				match(COLUMN);
				setState(1727);
				id();
				}
				break;
			case 5:
				{
				setState(1728);
				match(DROP);
				setState(1729);
				match(CONSTRAINT);
				setState(1730);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(1731);
				match(WITH);
				setState(1732);
				match(CHECK);
				setState(1733);
				match(ADD);
				setState(1734);
				match(CONSTRAINT);
				setState(1735);
				((Alter_tableContext)_localctx).constraint = id();
				setState(1736);
				match(FOREIGN);
				setState(1737);
				match(KEY);
				setState(1738);
				match(LR_BRACKET);
				setState(1739);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(1740);
				match(RR_BRACKET);
				setState(1741);
				match(REFERENCES);
				setState(1742);
				table_name();
				setState(1743);
				match(LR_BRACKET);
				setState(1744);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(1745);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(1747);
				match(CHECK);
				setState(1748);
				match(CONSTRAINT);
				setState(1749);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(1750);
				match(REBUILD);
				setState(1751);
				table_options();
				}
				break;
			}
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(1754);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(tsqlParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(tsqlParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(tsqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(tsqlParser.NAME, 0); }
		public TerminalNode COLLATE() { return getToken(tsqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAlter_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAlter_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1757);
			match(ALTER);
			setState(1758);
			match(DATABASE);
			setState(1761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(1759);
				((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(1760);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFY:
				{
				setState(1763);
				match(MODIFY);
				setState(1764);
				match(NAME);
				setState(1765);
				match(EQUAL);
				setState(1766);
				((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case COLLATE:
				{
				setState(1767);
				match(COLLATE);
				setState(1768);
				((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case SET:
				{
				setState(1769);
				match(SET);
				setState(1770);
				database_optionspec();
				setState(1773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
				case 1:
					{
					setState(1771);
					match(WITH);
					setState(1772);
					termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(1777);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(tsqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDatabase_optionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDatabase_optionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDatabase_optionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_database_optionspec);
		try {
			setState(1802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1780);
				auto_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1781);
				change_tracking_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1782);
				containment_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1783);
				cursor_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1784);
				date_correlation_optimization_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1785);
				db_encryption_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1786);
				db_state_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1787);
				db_update_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1788);
				db_user_access_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1789);
				delayed_durability_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1790);
				external_access_option();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1791);
				match(FILESTREAM);
				setState(1792);
				database_filestream_option();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1793);
				hadr_options();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1794);
				mixed_page_allocation_option();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1795);
				parameterization_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1796);
				recovery_option();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1797);
				service_broker_option();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1798);
				snapshot_option();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1799);
				sql_option();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1800);
				target_recovery_time_option();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1801);
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(tsqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public List<TerminalNode> ON() { return getTokens(tsqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(tsqlParser.ON, i);
		}
		public TerminalNode INCREMENTAL() { return getToken(tsqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(tsqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAuto_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAuto_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAuto_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_auto_option);
		int _la;
		try {
			setState(1821);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1804);
				match(AUTO_CLOSE);
				setState(1805);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1806);
				match(AUTO_CREATE_STATISTICS);
				setState(1807);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(1808);
				match(ON);
				setState(1813);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENTAL:
					{
					setState(1809);
					match(INCREMENTAL);
					setState(1810);
					match(EQUAL);
					setState(1811);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(1812);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(1815);
				match(AUTO_SHRINK);
				setState(1816);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(1817);
				match(AUTO_UPDATE_STATISTICS);
				setState(1818);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(1819);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(1820);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(tsqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterChange_tracking_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitChange_tracking_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitChange_tracking_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_change_tracking_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1823);
			match(CHANGE_TRACKING);
			setState(1824);
			match(EQUAL);
			setState(1840);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(1825);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(1826);
				match(ON);
				setState(1837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AUTO_CLEANUP || _la==CHANGE_RETENTION) {
					{
					{
					setState(1827);
					change_tracking_option_list();
					setState(1832);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1828);
						match(COMMA);
						setState(1829);
						change_tracking_option_list();
						}
						}
						setState(1834);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					setState(1839);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(tsqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(tsqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(tsqlParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(tsqlParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(tsqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterChange_tracking_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitChange_tracking_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitChange_tracking_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(1848);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1842);
				match(AUTO_CLEANUP);
				setState(1843);
				match(EQUAL);
				setState(1844);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1845);
				match(CHANGE_RETENTION);
				setState(1846);
				match(EQUAL);
				setState(1847);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(tsqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(tsqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(tsqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterContainment_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitContainment_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitContainment_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1850);
			match(CONTAINMENT);
			setState(1851);
			match(EQUAL);
			setState(1852);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(tsqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(tsqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCursor_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCursor_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCursor_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_cursor_option);
		int _la;
		try {
			setState(1858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1854);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(1855);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1856);
				match(CURSOR_DEFAULT);
				setState(1857);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDate_correlation_optimization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDate_correlation_optimization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDate_correlation_optimization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1860);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(1861);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDb_encryption_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDb_encryption_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDb_encryption_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1863);
			match(ENCRYPTION);
			setState(1864);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(tsqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(tsqlParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(tsqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDb_state_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDb_state_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDb_state_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1866);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(tsqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(tsqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDb_update_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDb_update_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDb_update_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1868);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(tsqlParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(tsqlParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(tsqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDb_user_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDb_user_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDb_user_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(tsqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(tsqlParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(tsqlParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(tsqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDelayed_durability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDelayed_durability_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDelayed_durability_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1872);
			match(DELAYED_DURABILITY);
			setState(1873);
			match(EQUAL);
			setState(1874);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(tsqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(tsqlParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(tsqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(tsqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExternal_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExternal_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExternal_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_external_access_option);
		int _la;
		try {
			setState(1901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1876);
				match(DB_CHAINING);
				setState(1877);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1878);
				match(TRUSTWORTHY);
				setState(1879);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1880);
				match(DEFAULT_LANGUAGE);
				setState(1881);
				match(EQUAL);
				setState(1884);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1882);
					id();
					}
					break;
				case STRING:
					{
					setState(1883);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1886);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(1887);
				match(EQUAL);
				setState(1890);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1888);
					id();
					}
					break;
				case STRING:
					{
					setState(1889);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(1892);
				match(NESTED_TRIGGERS);
				setState(1893);
				match(EQUAL);
				setState(1894);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(1895);
				match(TRANSFORM_NOISE_WORDS);
				setState(1896);
				match(EQUAL);
				setState(1897);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(1898);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(1899);
				match(EQUAL);
				setState(1900);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(tsqlParser.DATABASE, 0); }
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public TerminalNode HADR() { return getToken(tsqlParser.HADR, 0); }
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterHadr_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitHadr_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitHadr_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_hadr_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1903);
			match(ALTER);
			setState(1904);
			match(DATABASE);
			setState(1905);
			match(SET);
			setState(1906);
			match(HADR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterMixed_page_allocation_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitMixed_page_allocation_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitMixed_page_allocation_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_mixed_page_allocation_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1908);
			match(MIXED_PAGE_ALLOCATION);
			setState(1909);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(tsqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(tsqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(tsqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterParameterization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitParameterization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitParameterization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1911);
			match(PARAMETERIZATION);
			setState(1912);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(tsqlParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(tsqlParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(tsqlParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(tsqlParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(tsqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(tsqlParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(tsqlParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(tsqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterRecovery_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitRecovery_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitRecovery_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_recovery_option);
		int _la;
		try {
			setState(1920);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1914);
				match(RECOVERY);
				setState(1915);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1916);
				match(TORN_PAGE_DETECTION);
				setState(1917);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1918);
				match(PAGE_VERIFY);
				setState(1919);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(tsqlParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(tsqlParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(tsqlParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterService_broker_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitService_broker_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitService_broker_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_service_broker_option);
		try {
			setState(1928);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1922);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1923);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1924);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(1925);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(1926);
				match(HONOR_BROKER_PRIORITY);
				setState(1927);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public Token MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSnapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSnapshot_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSnapshot_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_snapshot_option);
		int _la;
		try {
			setState(1935);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1930);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(1931);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1932);
				match(READ_COMMITTED_SNAPSHOT);
				setState(1933);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(1934);
				((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(tsqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(tsqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(tsqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(tsqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(tsqlParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(tsqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(tsqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(tsqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(tsqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSql_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSql_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSql_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_sql_option);
		try {
			setState(1958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1937);
				match(ANSI_NULL_DEFAULT);
				setState(1938);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1939);
				match(ANSI_NULLS);
				setState(1940);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1941);
				match(ANSI_PADDING);
				setState(1942);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(1943);
				match(ANSI_WARNINGS);
				setState(1944);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1945);
				match(ARITHABORT);
				setState(1946);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1947);
				match(COMPATIBILITY_LEVEL);
				setState(1948);
				match(EQUAL);
				setState(1949);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(1950);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(1951);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(1952);
				match(NUMERIC_ROUNDABORT);
				setState(1953);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(1954);
				match(QUOTED_IDENTIFIER);
				setState(1955);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(1956);
				match(RECURSIVE_TRIGGERS);
				setState(1957);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(tsqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(tsqlParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(tsqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTarget_recovery_time_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTarget_recovery_time_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTarget_recovery_time_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1960);
			match(TARGET_RECOVERY_TIME);
			setState(1961);
			match(EQUAL);
			setState(1962);
			match(DECIMAL);
			setState(1963);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(tsqlParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(tsqlParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(tsqlParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(tsqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTermination(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTermination(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_termination);
		try {
			setState(1971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1965);
				match(ROLLBACK);
				setState(1966);
				match(AFTER);
				setState(1967);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1968);
				match(ROLLBACK);
				setState(1969);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1970);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext table;
		public IdContext index_name;
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(tsqlParser.INDEX, 0); }
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1973);
			match(DROP);
			setState(1974);
			match(INDEX);
			setState(1977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1975);
				match(IF);
				setState(1976);
				match(EXISTS);
				}
			}

			setState(1992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				{
				setState(1982);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					{
					setState(1979);
					((Drop_indexContext)_localctx).schema = id();
					}
					setState(1980);
					match(DOT);
					}
					break;
				}
				{
				setState(1984);
				((Drop_indexContext)_localctx).table = id();
				}
				setState(1985);
				match(DOT);
				{
				setState(1986);
				((Drop_indexContext)_localctx).index_name = id();
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1988);
				id();
				setState(1989);
				match(ON);
				setState(1990);
				table_name();
				}
				}
				break;
			}
			setState(1995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(1994);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Token proc;
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public List<Func_proc_nameContext> func_proc_name() {
			return getRuleContexts(Func_proc_nameContext.class);
		}
		public Func_proc_nameContext func_proc_name(int i) {
			return getRuleContext(Func_proc_nameContext.class,i);
		}
		public TerminalNode PROC() { return getToken(tsqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(tsqlParser.PROCEDURE, 0); }
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1997);
			match(DROP);
			setState(1998);
			((Drop_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Drop_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1999);
				match(IF);
				setState(2000);
				match(EXISTS);
				}
			}

			setState(2003);
			func_proc_name();
			setState(2008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2004);
				match(COMMA);
				setState(2005);
				func_proc_name();
				}
				}
				setState(2010);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2011);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return getRuleContext(Drop_dml_triggerContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_drop_trigger);
		try {
			setState(2016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2014);
				drop_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2015);
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dml_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(tsqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_dml_triggerContext drop_dml_trigger() throws RecognitionException {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_drop_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2018);
			match(DROP);
			setState(2019);
			match(TRIGGER);
			setState(2022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2020);
				match(IF);
				setState(2021);
				match(EXISTS);
				}
			}

			setState(2024);
			simple_name();
			setState(2029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2025);
				match(COMMA);
				setState(2026);
				simple_name();
				}
				}
				setState(2031);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(2032);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(tsqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(tsqlParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(tsqlParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_ddl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_ddl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(DROP);
			setState(2036);
			match(TRIGGER);
			setState(2039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2037);
				match(IF);
				setState(2038);
				match(EXISTS);
				}
			}

			setState(2041);
			simple_name();
			setState(2046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2042);
				match(COMMA);
				setState(2043);
				simple_name();
				}
				}
				setState(2048);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2049);
			match(ON);
			setState(2053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(2050);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2051);
				match(ALL);
				setState(2052);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2055);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(tsqlParser.FUNCTION, 0); }
		public List<Func_proc_nameContext> func_proc_name() {
			return getRuleContexts(Func_proc_nameContext.class);
		}
		public Func_proc_nameContext func_proc_name(int i) {
			return getRuleContext(Func_proc_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2058);
			match(DROP);
			setState(2059);
			match(FUNCTION);
			setState(2062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2060);
				match(IF);
				setState(2061);
				match(EXISTS);
				}
			}

			setState(2064);
			func_proc_name();
			setState(2069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2065);
				match(COMMA);
				setState(2066);
				func_proc_name();
				}
				}
				setState(2071);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2072);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(tsqlParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_drop_statistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(DROP);
			setState(2076);
			match(STATISTICS);
			setState(2080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2077);
				table_name();
				setState(2078);
				match(DOT);
				}
				break;
			}
			setState(2082);
			((Drop_statisticsContext)_localctx).name = id();
			setState(2083);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(tsqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2085);
			match(DROP);
			setState(2086);
			match(TABLE);
			setState(2089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2087);
				match(IF);
				setState(2088);
				match(EXISTS);
				}
			}

			setState(2091);
			table_name();
			setState(2093);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2092);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(tsqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2095);
			match(DROP);
			setState(2096);
			match(VIEW);
			setState(2099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2097);
				match(IF);
				setState(2098);
				match(EXISTS);
				}
			}

			setState(2101);
			simple_name();
			setState(2106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2102);
				match(COMMA);
				setState(2103);
				simple_name();
				}
				}
				setState(2108);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2109);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(tsqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(tsqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			match(CREATE);
			setState(2113);
			match(TYPE);
			setState(2114);
			((Create_typeContext)_localctx).name = simple_name();
			setState(2119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2115);
				match(FROM);
				setState(2116);
				data_type();
				setState(2117);
				default_value();
				}
			}

			setState(2127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2121);
				match(AS);
				setState(2122);
				match(TABLE);
				setState(2123);
				match(LR_BRACKET);
				setState(2124);
				column_def_table_constraints();
				setState(2125);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode DROP() { return getToken(tsqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(tsqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(tsqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2129);
			match(DROP);
			setState(2130);
			match(TYPE);
			setState(2133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2131);
				match(IF);
				setState(2132);
				match(EXISTS);
				}
			}

			setState(2135);
			((Drop_typeContext)_localctx).name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitRowset_function_limited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitRowset_function_limited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_rowset_function_limited);
		try {
			setState(2139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2137);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2138);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(tsqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOpenquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOpenquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2141);
			match(OPENQUERY);
			setState(2142);
			match(LR_BRACKET);
			setState(2143);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(2144);
			match(COMMA);
			setState(2145);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(2146);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(tsqlParser.OPENDATASOURCE, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOpendatasource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOpendatasource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2148);
			match(OPENDATASOURCE);
			setState(2149);
			match(LR_BRACKET);
			setState(2150);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(2151);
			match(COMMA);
			setState(2152);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(2153);
			match(RR_BRACKET);
			setState(2154);
			match(DOT);
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
				{
				setState(2155);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(2158);
			match(DOT);
			setState(2160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
				{
				setState(2159);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(2162);
			match(DOT);
			{
			setState(2163);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode DECLARE() { return getToken(tsqlParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(tsqlParser.XMLNAMESPACES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDeclare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_declare_statement);
		int _la;
		try {
			setState(2208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2165);
				match(DECLARE);
				setState(2166);
				match(LOCAL_ID);
				setState(2168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2167);
					match(AS);
					}
				}

				setState(2170);
				table_type_definition();
				setState(2172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(2171);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2174);
				match(DECLARE);
				setState(2175);
				declare_local();
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2176);
					match(COMMA);
					setState(2177);
					declare_local();
					}
					}
					setState(2182);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(2183);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2186);
				match(DECLARE);
				setState(2187);
				match(LOCAL_ID);
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2188);
					match(AS);
					}
				}

				setState(2191);
				xml_type_definition();
				setState(2193);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2192);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2195);
				match(WITH);
				setState(2196);
				match(XMLNAMESPACES);
				setState(2197);
				match(LR_BRACKET);
				setState(2198);
				((Declare_statementContext)_localctx).xml_namespace_uri = match(STRING);
				setState(2200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2199);
					match(COMMA);
					}
				}

				setState(2202);
				match(AS);
				setState(2203);
				id();
				setState(2204);
				match(RR_BRACKET);
				setState(2206);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(2205);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(tsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(tsqlParser.DEALLOCATE, 0); }
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(tsqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_cursor_statement);
		try {
			setState(2236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2210);
				match(CLOSE);
				setState(2212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(2211);
					match(GLOBAL);
					}
					break;
				}
				setState(2214);
				cursor_name();
				setState(2216);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2215);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2218);
				match(DEALLOCATE);
				setState(2220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2219);
					match(GLOBAL);
					}
					break;
				}
				setState(2222);
				cursor_name();
				setState(2224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2223);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2226);
				declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(2227);
				fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(2228);
				match(OPEN);
				setState(2230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2229);
					match(GLOBAL);
					}
					break;
				}
				setState(2232);
				cursor_name();
				setState(2234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					setState(2233);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public Token return_status;
		public TerminalNode EXECUTE() { return getToken(tsqlParser.EXECUTE, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(tsqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(tsqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_execute_statement);
		int _la;
		try {
			setState(2282);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2238);
				match(EXECUTE);
				setState(2241);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					setState(2239);
					((Execute_statementContext)_localctx).return_status = match(LOCAL_ID);
					setState(2240);
					match(EQUAL);
					}
					break;
				}
				setState(2245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					setState(2243);
					func_proc_name();
					}
					break;
				case 2:
					{
					setState(2244);
					expression(0);
					}
					break;
				}
				setState(2255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(2247);
					execute_statement_arg();
					setState(2252);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2248);
						match(COMMA);
						setState(2249);
						execute_statement_arg();
						}
						}
						setState(2254);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(2258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2257);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2260);
				match(EXECUTE);
				setState(2261);
				match(LR_BRACKET);
				setState(2262);
				execute_var_string();
				setState(2267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(2263);
					match(PLUS);
					setState(2264);
					execute_var_string();
					}
					}
					setState(2269);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2270);
				match(RR_BRACKET);
				setState(2277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2272);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2271);
						match(AS);
						}
					}

					setState(2274);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2275);
					match(EQUAL);
					setState(2276);
					match(STRING);
					}
					break;
				}
				setState(2280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(2279);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(tsqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(tsqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExecute_statement_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExecute_statement_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(2284);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(2285);
				match(EQUAL);
				}
				break;
			}
			setState(2297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(2290);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(2288);
					constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2289);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(2292);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				setState(2295);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(2296);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExecute_var_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExecute_var_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExecute_var_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2299);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Table_nameContext on_id;
		public IdContext id;
		public List<IdContext> to_principal = new ArrayList<IdContext>();
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public List<TerminalNode> GRANT() { return getTokens(tsqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(tsqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(tsqlParser.TO, 0); }
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return getRuleContext(Grant_permissionContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(tsqlParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(tsqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode REVERT() { return getToken(tsqlParser.REVERT, 0); }
		public TerminalNode COOKIE() { return getToken(tsqlParser.COOKIE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSecurity_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSecurity_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSecurity_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_security_statement);
		int _la;
		try {
			setState(2360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2301);
				execute_clause();
				setState(2303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2302);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2305);
				match(GRANT);
				setState(2317);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(2306);
					match(ALL);
					setState(2308);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2307);
						match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					setState(2310);
					grant_permission();
					setState(2315);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LR_BRACKET) {
						{
						setState(2311);
						match(LR_BRACKET);
						setState(2312);
						column_name_list();
						setState(2313);
						match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2319);
					match(ON);
					setState(2320);
					((Security_statementContext)_localctx).on_id = table_name();
					}
				}

				setState(2323);
				match(TO);
				{
				setState(2324);
				((Security_statementContext)_localctx).id = id();
				((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
				}
				setState(2329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2325);
					match(COMMA);
					setState(2326);
					((Security_statementContext)_localctx).id = id();
					((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
					}
					}
					setState(2331);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2335);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(2332);
					match(WITH);
					setState(2333);
					match(GRANT);
					setState(2334);
					match(OPTION);
					}
					break;
				}
				setState(2339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2337);
					match(AS);
					setState(2338);
					((Security_statementContext)_localctx).as_principal = id();
					}
				}

				setState(2342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					setState(2341);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2344);
				match(REVERT);
				setState(2351);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(2345);
					match(LR_BRACKET);
					setState(2346);
					match(WITH);
					setState(2347);
					match(COOKIE);
					setState(2348);
					match(EQUAL);
					setState(2349);
					match(LOCAL_ID);
					setState(2350);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
				case 1:
					{
					setState(2353);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2356);
				open_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2357);
				close_key();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2358);
				create_key();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2359);
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(tsqlParser.CERTIFICATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(tsqlParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(tsqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(tsqlParser.DIALOG, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2362);
			match(CREATE);
			setState(2363);
			match(CERTIFICATE);
			setState(2364);
			((Create_certificateContext)_localctx).certificate_name = id();
			setState(2367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2365);
				match(AUTHORIZATION);
				setState(2366);
				((Create_certificateContext)_localctx).user_name = id();
				}
			}

			setState(2372);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(2369);
				match(FROM);
				setState(2370);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(2371);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACTIVE) {
				{
				setState(2374);
				match(ACTIVE);
				setState(2375);
				match(FOR);
				setState(2376);
				match(BEGIN);
				setState(2377);
				match(DIALOG);
				setState(2378);
				match(EQUAL);
				setState(2379);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(tsqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FILE() { return getToken(tsqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(tsqlParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(tsqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExisting_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExisting_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExisting_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_existing_keys);
		int _la;
		try {
			setState(2399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2382);
				match(ASSEMBLY);
				setState(2383);
				((Existing_keysContext)_localctx).assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(2384);
					match(EXECUTABLE);
					}
				}

				setState(2387);
				match(FILE);
				setState(2388);
				match(EQUAL);
				setState(2389);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(2397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(2390);
					match(WITH);
					setState(2391);
					match(PRIVATE);
					setState(2392);
					match(KEY);
					setState(2393);
					match(LR_BRACKET);
					setState(2394);
					private_key_options();
					setState(2395);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public TerminalNode FILE() { return getToken(tsqlParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(tsqlParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public TerminalNode BY() { return getToken(tsqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(tsqlParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(tsqlParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterPrivate_key_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitPrivate_key_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitPrivate_key_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2402);
			match(EQUAL);
			setState(2403);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(2410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2404);
				match(COMMA);
				setState(2405);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2406);
				match(BY);
				setState(2407);
				match(PASSWORD);
				setState(2408);
				match(EQUAL);
				setState(2409);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(tsqlParser.SUBJECT, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(tsqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(tsqlParser.PASSWORD, 0); }
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterGenerate_new_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitGenerate_new_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitGenerate_new_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(2412);
				match(ENCRYPTION);
				setState(2413);
				match(BY);
				setState(2414);
				match(PASSWORD);
				setState(2415);
				match(EQUAL);
				setState(2416);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(2419);
			match(WITH);
			setState(2420);
			match(SUBJECT);
			setState(2421);
			match(EQUAL);
			setState(2422);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(2427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2423);
				match(COMMA);
				setState(2424);
				date_options();
				}
				}
				setState(2429);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(tsqlParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(tsqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDate_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDate_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2430);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2431);
			match(EQUAL);
			setState(2432);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(tsqlParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(tsqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(tsqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(tsqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MASTER_KEY() { return getToken(tsqlParser.MASTER_KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(tsqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOpen_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOpen_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOpen_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_open_key);
		try {
			setState(2449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2434);
				match(OPEN);
				setState(2435);
				match(SYMMETRIC);
				setState(2436);
				match(KEY);
				setState(2437);
				((Open_keyContext)_localctx).key_name = id();
				setState(2438);
				match(DECRYPTION);
				setState(2439);
				match(BY);
				setState(2440);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2442);
				match(OPEN);
				setState(2443);
				match(MASTER_KEY);
				setState(2444);
				match(DECRYPTION);
				setState(2445);
				match(BY);
				setState(2446);
				match(PASSWORD);
				setState(2447);
				match(EQUAL);
				setState(2448);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode CLOSE() { return getToken(tsqlParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(tsqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(tsqlParser.KEYS, 0); }
		public TerminalNode MASTER_KEY() { return getToken(tsqlParser.MASTER_KEY, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterClose_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitClose_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitClose_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_close_key);
		try {
			setState(2461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2451);
				match(CLOSE);
				setState(2452);
				match(SYMMETRIC);
				setState(2453);
				match(KEY);
				setState(2454);
				((Close_keyContext)_localctx).key_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2455);
				match(CLOSE);
				setState(2456);
				match(ALL);
				setState(2457);
				match(SYMMETRIC);
				setState(2458);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2459);
				match(CLOSE);
				setState(2460);
				match(MASTER_KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode MASTER_KEY() { return getToken(tsqlParser.MASTER_KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(tsqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(tsqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(tsqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(tsqlParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(tsqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(tsqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(tsqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(tsqlParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_create_key);
		int _la;
		try {
			int _alt;
			setState(2497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2463);
				match(CREATE);
				setState(2464);
				match(MASTER_KEY);
				setState(2465);
				match(ENCRYPTION);
				setState(2466);
				match(BY);
				setState(2467);
				match(PASSWORD);
				setState(2468);
				match(EQUAL);
				setState(2469);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2470);
				match(CREATE);
				setState(2471);
				match(SYMMETRIC);
				setState(2472);
				match(KEY);
				setState(2473);
				((Create_keyContext)_localctx).key_name = id();
				setState(2476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(2474);
					match(AUTHORIZATION);
					setState(2475);
					((Create_keyContext)_localctx).user_name = id();
					}
				}

				setState(2481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(2478);
					match(FROM);
					setState(2479);
					match(PROVIDER);
					setState(2480);
					((Create_keyContext)_localctx).provider_name = id();
					}
				}

				setState(2483);
				match(WITH);
				setState(2493); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2488);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							setState(2484);
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							setState(2485);
							match(ENCRYPTION);
							setState(2486);
							match(BY);
							setState(2487);
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2491);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2490);
							match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2495); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(tsqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(tsqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(tsqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(tsqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(tsqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(tsqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(tsqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterKey_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitKey_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitKey_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_key_options);
		int _la;
		try {
			setState(2514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2499);
				match(KEY_SOURCE);
				setState(2500);
				match(EQUAL);
				setState(2501);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(2502);
				match(ALGORITHM);
				setState(2503);
				match(EQUAL);
				setState(2504);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2505);
				match(IDENTITY_VALUE);
				setState(2506);
				match(EQUAL);
				setState(2507);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(2508);
				match(PROVIDER_KEY_NAME);
				setState(2509);
				match(EQUAL);
				setState(2510);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(2511);
				match(CREATION_DISPOSITION);
				setState(2512);
				match(EQUAL);
				setState(2513);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2516);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(tsqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(tsqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(tsqlParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(tsqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterEncryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitEncryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitEncryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_encryption_mechanism);
		try {
			setState(2529);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2518);
				match(CERTIFICATE);
				setState(2519);
				((Encryption_mechanismContext)_localctx).certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2520);
				match(ASYMMETRIC);
				setState(2521);
				match(KEY);
				setState(2522);
				((Encryption_mechanismContext)_localctx).asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(2523);
				match(SYMMETRIC);
				setState(2524);
				match(KEY);
				setState(2525);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(2526);
				match(PASSWORD);
				setState(2527);
				match(EQUAL);
				setState(2528);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(tsqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(tsqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(tsqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(tsqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDecryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDecryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDecryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_decryption_mechanism);
		try {
			setState(2554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2531);
				match(CERTIFICATE);
				setState(2532);
				((Decryption_mechanismContext)_localctx).certificate_name = id();
				setState(2537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(2533);
					match(WITH);
					setState(2534);
					match(PASSWORD);
					setState(2535);
					match(EQUAL);
					setState(2536);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2539);
				match(ASYMMETRIC);
				setState(2540);
				match(KEY);
				setState(2541);
				((Decryption_mechanismContext)_localctx).asym_key_name = id();
				setState(2546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(2542);
					match(WITH);
					setState(2543);
					match(PASSWORD);
					setState(2544);
					match(EQUAL);
					setState(2545);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(2548);
				match(SYMMETRIC);
				setState(2549);
				match(KEY);
				setState(2550);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(2551);
				match(PASSWORD);
				setState(2552);
				match(EQUAL);
				setState(2553);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_permissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(tsqlParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(tsqlParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TAKE() { return getToken(tsqlParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(tsqlParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(tsqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(tsqlParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(tsqlParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(tsqlParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(tsqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(tsqlParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(tsqlParser.INSERT, 0); }
		public TerminalNode ALTER() { return getToken(tsqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(tsqlParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(tsqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterGrant_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitGrant_permission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitGrant_permission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_permissionContext grant_permission() throws RecognitionException {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_grant_permission);
		int _la;
		try {
			setState(2582);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2556);
				match(EXECUTE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 2);
				{
				setState(2557);
				match(VIEW);
				setState(2558);
				id();
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2559);
				match(TAKE);
				setState(2560);
				id();
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2561);
				match(CONTROL);
				setState(2563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
					{
					setState(2562);
					id();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2565);
				match(CREATE);
				setState(2566);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHOWPLAN:
				enterOuterAlt(_localctx, 6);
				{
				setState(2567);
				match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2568);
				match(IMPERSONATE);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 8);
				{
				setState(2569);
				match(SELECT);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 9);
				{
				setState(2570);
				match(REFERENCES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 10);
				{
				setState(2571);
				match(INSERT);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2572);
				match(ALTER);
				setState(2580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==CALLED || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (DATA_COMPRESSION - 65)) | (1L << (DATABASE - 65)) | (1L << (EVENTDATA - 65)) | (1L << (FILLFACTOR - 65)) | (1L << (FORCESEEK - 65)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
					{
					setState(2574);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(2573);
						match(ANY);
						}
					}

					setState(2578);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILLFACTOR:
					case FORCESEEK:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SERVER:
					case SOURCE:
					case TARGET:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(2576);
						id();
						}
						break;
					case DATABASE:
						{
						setState(2577);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdContext member_name;
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(tsqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(tsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(tsqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(tsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(tsqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_set_statement);
		int _la;
		try {
			setState(2623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2584);
				match(SET);
				setState(2585);
				match(LOCAL_ID);
				setState(2588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(2586);
					match(DOT);
					setState(2587);
					((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(2590);
				match(EQUAL);
				setState(2591);
				expression(0);
				setState(2593);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(2592);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2595);
				match(SET);
				setState(2596);
				match(LOCAL_ID);
				setState(2597);
				assignment_operator();
				setState(2598);
				expression(0);
				setState(2600);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(2599);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2602);
				match(SET);
				setState(2603);
				match(LOCAL_ID);
				setState(2604);
				match(EQUAL);
				setState(2605);
				match(CURSOR);
				setState(2606);
				declare_set_cursor_common();
				setState(2617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2607);
					match(FOR);
					setState(2615);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(2608);
						match(READ);
						setState(2609);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(2610);
						match(UPDATE);
						setState(2613);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(2611);
							match(OF);
							setState(2612);
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(2620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(2619);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2622);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(tsqlParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(tsqlParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(tsqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(tsqlParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(tsqlParser.COMMIT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(tsqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode WORK() { return getToken(tsqlParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(tsqlParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(tsqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTransaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTransaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_transaction_statement);
		int _la;
		try {
			setState(2702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2625);
				match(BEGIN);
				setState(2626);
				match(DISTRIBUTED);
				setState(2627);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2630);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(2628);
					id();
					}
					break;
				case 2:
					{
					setState(2629);
					match(LOCAL_ID);
					}
					break;
				}
				setState(2633);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(2632);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2635);
				match(BEGIN);
				setState(2636);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(2639);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILLFACTOR:
					case FORCESEEK:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SERVER:
					case SOURCE:
					case TARGET:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(2637);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(2638);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2644);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
					case 1:
						{
						setState(2641);
						match(WITH);
						setState(2642);
						match(MARK);
						setState(2643);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(2649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(2648);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2651);
				match(COMMIT);
				setState(2652);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(2655);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILLFACTOR:
					case FORCESEEK:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SERVER:
					case SOURCE:
					case TARGET:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(2653);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(2654);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2663);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
					case 1:
						{
						setState(2657);
						match(WITH);
						setState(2658);
						match(LR_BRACKET);
						setState(2659);
						match(DELAYED_DURABILITY);
						setState(2660);
						match(EQUAL);
						setState(2661);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2662);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(2668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(2667);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2670);
				match(COMMIT);
				setState(2672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(2671);
					match(WORK);
					}
					break;
				}
				setState(2675);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(2674);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2677);
				match(ROLLBACK);
				setState(2678);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2681);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(2679);
					id();
					}
					break;
				case 2:
					{
					setState(2680);
					match(LOCAL_ID);
					}
					break;
				}
				setState(2684);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(2683);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2686);
				match(ROLLBACK);
				setState(2688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(2687);
					match(WORK);
					}
					break;
				}
				setState(2691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(2690);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2693);
				match(SAVE);
				setState(2694);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(2695);
					id();
					}
					break;
				case 2:
					{
					setState(2696);
					match(LOCAL_ID);
					}
					break;
				}
				setState(2700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					setState(2699);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(tsqlParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterGo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitGo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitGo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_go_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			match(GO);
			setState(2706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(2705);
				((Go_statementContext)_localctx).count = match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(tsqlParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitUse_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitUse_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			match(USE);
			setState(2709);
			((Use_statementContext)_localctx).database = id();
			setState(2711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(2710);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Simple_idContext name;
		public TerminalNode DBCC() { return getToken(tsqlParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return getRuleContext(Dbcc_optionsContext.class,0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDbcc_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDbcc_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDbcc_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2713);
			match(DBCC);
			setState(2714);
			((Dbcc_clauseContext)_localctx).name = simple_id();
			setState(2719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				setState(2715);
				match(LR_BRACKET);
				setState(2716);
				expression_list();
				setState(2717);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				setState(2721);
				match(WITH);
				setState(2722);
				dbcc_options();
				}
				break;
			}
			setState(2726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				setState(2725);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_optionsContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDbcc_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDbcc_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDbcc_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_optionsContext dbcc_options() throws RecognitionException {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_dbcc_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2728);
			simple_id();
			setState(2731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2729);
				match(COMMA);
				setState(2730);
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(tsqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(tsqlParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(tsqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(tsqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExecute_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExecute_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExecute_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2733);
			match(EXECUTE);
			setState(2734);
			match(AS);
			setState(2735);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDeclare_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDeclare_local(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDeclare_local(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2737);
			match(LOCAL_ID);
			setState(2739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2738);
				match(AS);
				}
			}

			setState(2741);
			data_type();
			setState(2744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(2742);
				match(EQUAL);
				setState(2743);
				expression(0);
				}
			}

			setState(2747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(2746);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(tsqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_table_type_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(TABLE);
			setState(2750);
			match(LR_BRACKET);
			setState(2751);
			column_def_table_constraints();
			setState(2752);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(tsqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode CONTENT() { return getToken(tsqlParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(tsqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterXml_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitXml_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitXml_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2754);
			match(XML);
			setState(2755);
			match(LR_BRACKET);
			setState(2757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(2756);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2759);
			xml_schema_collection();
			setState(2760);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(tsqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(tsqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterXml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitXml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitXml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2762);
			match(ID);
			setState(2763);
			match(DOT);
			setState(2764);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_def_table_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_def_table_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			column_def_table_constraint();
			setState(2773);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,392,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2768);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2767);
						match(COMMA);
						}
					}

					setState(2770);
					column_def_table_constraint();
					}
					} 
				}
				setState(2775);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,392,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_def_table_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_def_table_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_column_def_table_constraint);
		try {
			setState(2778);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2776);
				column_definition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case DEFAULT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2777);
				table_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(tsqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(tsqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(tsqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(tsqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(tsqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(tsqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(tsqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2780);
			id();
			setState(2784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2781);
				data_type();
				}
				break;
			case AS:
				{
				setState(2782);
				match(AS);
				setState(2783);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2786);
				match(COLLATE);
				setState(2787);
				id();
				}
			}

			setState(2791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(2790);
				null_notnull();
				}
				break;
			}
			setState(2814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(2795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2793);
					match(CONSTRAINT);
					setState(2794);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(2797);
				null_or_default();
				setState(2799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(2798);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2801);
				match(IDENTITY);
				setState(2807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(2802);
					match(LR_BRACKET);
					setState(2803);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(2804);
					match(COMMA);
					setState(2805);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(2806);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(2809);
					match(NOT);
					setState(2810);
					match(FOR);
					setState(2811);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(2817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(2816);
				match(ROWGUIDCOL);
				}
			}

			setState(2822);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2819);
					column_constraint();
					}
					} 
				}
				setState(2824);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(tsqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(tsqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(tsqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(tsqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(tsqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(tsqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2825);
				match(CONSTRAINT);
				setState(2826);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(2866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(2832);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(2829);
					match(PRIMARY);
					setState(2830);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(2831);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(2834);
					clustered();
					}
				}

				setState(2838);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(2837);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(2840);
				match(CHECK);
				setState(2844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2841);
					match(NOT);
					setState(2842);
					match(FOR);
					setState(2843);
					match(REPLICATION);
					}
				}

				setState(2846);
				match(LR_BRACKET);
				setState(2847);
				search_condition();
				setState(2848);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(2852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(2850);
					match(FOREIGN);
					setState(2851);
					match(KEY);
					}
				}

				setState(2854);
				match(REFERENCES);
				setState(2855);
				table_name();
				setState(2856);
				match(LR_BRACKET);
				setState(2857);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(2858);
				match(RR_BRACKET);
				setState(2860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(2859);
					on_delete();
					}
					break;
				}
				setState(2863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2862);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(2865);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(tsqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(tsqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(tsqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(tsqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(tsqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(tsqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(tsqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(tsqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(tsqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(tsqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(tsqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(tsqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2868);
				match(CONSTRAINT);
				setState(2869);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(2933);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(2875);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(2872);
					match(PRIMARY);
					setState(2873);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(2874);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(2877);
					clustered();
					}
				}

				setState(2880);
				match(LR_BRACKET);
				setState(2881);
				column_name_list_with_order();
				setState(2882);
				match(RR_BRACKET);
				setState(2884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(2883);
					index_options();
					}
					break;
				}
				setState(2888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2886);
					match(ON);
					setState(2887);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(2890);
				match(CHECK);
				setState(2894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2891);
					match(NOT);
					setState(2892);
					match(FOR);
					setState(2893);
					match(REPLICATION);
					}
				}

				setState(2896);
				match(LR_BRACKET);
				setState(2897);
				search_condition();
				setState(2898);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(2900);
				match(DEFAULT);
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2901);
					match(LR_BRACKET);
					}
				}

				setState(2908); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2908);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(2904);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(2905);
						match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case ISNULL:
					case LEFT:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROWCOUNT:
					case SERVER:
					case SESSION_USER:
					case SOURCE:
					case SYSTEM_USER:
					case TARGET:
					case ABSOLUTE:
					case APPLY:
					case AUTO:
					case AVG:
					case BINARY_CHECKSUM:
					case CALLER:
					case CAST:
					case CATCH:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case COMMITTED:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DELAY:
					case DELETED:
					case DENSE_RANK:
					case DISABLE:
					case DYNAMIC:
					case ENCRYPTION:
					case EXPAND:
					case FAST:
					case FAST_FORWARD:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORCED:
					case FORWARD_ONLY:
					case FULLSCAN:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GROUPING:
					case GROUPING_ID:
					case HASH:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMPERSONATE:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case ISOLATION:
					case KEEP:
					case KEEPFIXED:
					case KEYSET:
					case LAST:
					case LEVEL:
					case LOCAL:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case MARK:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MODIFY:
					case NAME:
					case NEXT:
					case NOCOUNT:
					case NOEXPAND:
					case NORECOMPUTE:
					case NTILE:
					case NUMBER:
					case OFFSET:
					case ONLINE:
					case ONLY:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PARAMETERIZATION:
					case PARTITION:
					case PATH:
					case PRECEDING:
					case PRIOR:
					case PRIVILEGES:
					case RANGE:
					case RANK:
					case READONLY:
					case READ_ONLY:
					case RECOMPILE:
					case RELATIVE:
					case REMOTE:
					case REPEATABLE:
					case ROBUST:
					case ROOT:
					case ROW:
					case ROWGUID:
					case ROWS:
					case ROW_NUMBER:
					case SAMPLE:
					case SCHEMABINDING:
					case SCROLL:
					case SCROLL_LOCKS:
					case SELF:
					case SERIALIZABLE:
					case SIMPLE:
					case SIZE:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STATIC:
					case STATS_STREAM:
					case STDEV:
					case STDEVP:
					case STUFF:
					case SUM:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TRY:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case USING:
					case VAR:
					case VARP:
					case VIEWS:
					case VIEW_METADATA:
					case WORK:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
						{
						setState(2906);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(2907);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2910); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (COALESCE - 34)) | (1L << (CONVERT - 34)) | (1L << (CURRENT_TIMESTAMP - 34)) | (1L << (CURRENT_USER - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (IDENTITY - 108)) | (1L << (ISNULL - 108)) | (1L << (LEFT - 108)) | (1L << (NULLIF - 108)) | (1L << (OFFSETS - 108)) | (1L << (PAGE - 108)) | (1L << (PUBLIC - 108)) | (1L << (RAW - 108)))) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (RETURN - 177)) | (1L << (RETURNS - 177)) | (1L << (RIGHT - 177)) | (1L << (ROWCOUNT - 177)) | (1L << (SERVER - 177)) | (1L << (SESSION_USER - 177)) | (1L << (SOURCE - 177)) | (1L << (SYSTEM_USER - 177)) | (1L << (TARGET - 177)) | (1L << (ABSOLUTE - 177)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (APPLY - 244)) | (1L << (AUTO - 244)) | (1L << (AVG - 244)) | (1L << (BINARY_CHECKSUM - 244)) | (1L << (CALLER - 244)) | (1L << (CAST - 244)) | (1L << (CATCH - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CHECKSUM_AGG - 244)) | (1L << (COMMITTED - 244)) | (1L << (CONCAT - 244)) | (1L << (CONCAT_NULL_YIELDS_NULL - 244)) | (1L << (CONTROL - 244)) | (1L << (COOKIE - 244)) | (1L << (COUNT - 244)) | (1L << (COUNT_BIG - 244)) | (1L << (DATEADD - 244)) | (1L << (DATEDIFF - 244)) | (1L << (DATENAME - 244)) | (1L << (DATEPART - 244)) | (1L << (DELAY - 244)) | (1L << (DELETED - 244)) | (1L << (DENSE_RANK - 244)) | (1L << (DISABLE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENCRYPTION - 244)) | (1L << (EXPAND - 244)))) != 0) || ((((_la - 310)) & ~0x3f) == 0 && ((1L << (_la - 310)) & ((1L << (FAST - 310)) | (1L << (FAST_FORWARD - 310)) | (1L << (FIRST - 310)) | (1L << (FOLLOWING - 310)) | (1L << (FORCE - 310)) | (1L << (FORCED - 310)) | (1L << (FORWARD_ONLY - 310)) | (1L << (FULLSCAN - 310)) | (1L << (GETDATE - 310)) | (1L << (GETUTCDATE - 310)) | (1L << (GLOBAL - 310)) | (1L << (GROUPING - 310)) | (1L << (GROUPING_ID - 310)) | (1L << (HASH - 310)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 310)) | (1L << (IMPERSONATE - 310)) | (1L << (INPUT - 310)) | (1L << (INSENSITIVE - 310)) | (1L << (INSERTED - 310)) | (1L << (ISOLATION - 310)) | (1L << (KEEP - 310)) | (1L << (KEEPFIXED - 310)) | (1L << (KEYSET - 310)) | (1L << (LAST - 310)) | (1L << (LEVEL - 310)) | (1L << (LOCAL - 310)) | (1L << (LOCK_ESCALATION - 310)) | (1L << (LOGIN - 310)) | (1L << (LOOP - 310)) | (1L << (MARK - 310)) | (1L << (MAX - 310)) | (1L << (MAXDOP - 310)) | (1L << (MAXRECURSION - 310)) | (1L << (MIN - 310)) | (1L << (MIN_ACTIVE_ROWVERSION - 310)) | (1L << (MODIFY - 310)) | (1L << (NAME - 310)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (NEXT - 375)) | (1L << (NOCOUNT - 375)) | (1L << (NOEXPAND - 375)) | (1L << (NORECOMPUTE - 375)) | (1L << (NTILE - 375)) | (1L << (NUMBER - 375)) | (1L << (OFFSET - 375)) | (1L << (ONLINE - 375)) | (1L << (ONLY - 375)) | (1L << (OPTIMISTIC - 375)) | (1L << (OPTIMIZE - 375)) | (1L << (OUT - 375)) | (1L << (OUTPUT - 375)) | (1L << (OWNER - 375)) | (1L << (PARAMETERIZATION - 375)) | (1L << (PARTITION - 375)) | (1L << (PATH - 375)) | (1L << (PRECEDING - 375)) | (1L << (PRIOR - 375)) | (1L << (PRIVILEGES - 375)) | (1L << (RANGE - 375)) | (1L << (RANK - 375)) | (1L << (READONLY - 375)) | (1L << (READ_ONLY - 375)) | (1L << (RECOMPILE - 375)) | (1L << (RELATIVE - 375)) | (1L << (REMOTE - 375)) | (1L << (REPEATABLE - 375)) | (1L << (ROBUST - 375)) | (1L << (ROOT - 375)) | (1L << (ROW - 375)) | (1L << (ROWGUID - 375)) | (1L << (ROWS - 375)) | (1L << (ROW_NUMBER - 375)) | (1L << (SAMPLE - 375)) | (1L << (SCHEMABINDING - 375)) | (1L << (SCROLL - 375)) | (1L << (SCROLL_LOCKS - 375)) | (1L << (SELF - 375)))) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (SERIALIZABLE - 440)) | (1L << (SIMPLE - 440)) | (1L << (SIZE - 440)) | (1L << (SNAPSHOT - 440)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 440)) | (1L << (STATIC - 440)) | (1L << (STATS_STREAM - 440)) | (1L << (STDEV - 440)) | (1L << (STDEVP - 440)) | (1L << (STUFF - 440)) | (1L << (SUM - 440)) | (1L << (TEXTIMAGE_ON - 440)) | (1L << (THROW - 440)) | (1L << (TIES - 440)) | (1L << (TIME - 440)) | (1L << (TRY - 440)) | (1L << (TYPE - 440)) | (1L << (TYPE_WARNING - 440)) | (1L << (UNBOUNDED - 440)) | (1L << (UNCOMMITTED - 440)) | (1L << (UNKNOWN - 440)) | (1L << (USING - 440)) | (1L << (VAR - 440)) | (1L << (VARP - 440)) | (1L << (VIEWS - 440)) | (1L << (VIEW_METADATA - 440)) | (1L << (WORK - 440)) | (1L << (XML - 440)) | (1L << (XMLNAMESPACES - 440)) | (1L << (DOUBLE_QUOTE_ID - 440)) | (1L << (SQUARE_BRACKET_ID - 440)) | (1L << (LOCAL_ID - 440)) | (1L << (DECIMAL - 440)) | (1L << (ID - 440)) | (1L << (STRING - 440)))) != 0) || _la==PLUS );
				setState(2913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(2912);
					match(RR_BRACKET);
					}
				}

				setState(2915);
				match(FOR);
				setState(2916);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(2917);
				match(FOREIGN);
				setState(2918);
				match(KEY);
				setState(2919);
				match(LR_BRACKET);
				setState(2920);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(2921);
				match(RR_BRACKET);
				setState(2922);
				match(REFERENCES);
				setState(2923);
				table_name();
				setState(2924);
				match(LR_BRACKET);
				setState(2925);
				((Table_constraintContext)_localctx).pk = column_name_list();
				setState(2926);
				match(RR_BRACKET);
				setState(2928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(2927);
					on_delete();
					}
					break;
				}
				setState(2931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2930);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(tsqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(tsqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(tsqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(tsqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOn_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOn_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935);
			match(ON);
			setState(2936);
			match(DELETE);
			setState(2944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(2937);
				match(NO);
				setState(2938);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(2939);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(2940);
				match(SET);
				setState(2941);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(2942);
				match(SET);
				setState(2943);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(tsqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(tsqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(tsqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(tsqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOn_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOn_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2946);
			match(ON);
			setState(2947);
			match(UPDATE);
			setState(2955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(2948);
				match(NO);
				setState(2949);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(2950);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(2951);
				match(SET);
				setState(2952);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(2953);
				match(SET);
				setState(2954);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitIndex_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitIndex_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(WITH);
			setState(2958);
			match(LR_BRACKET);
			setState(2959);
			index_option();
			setState(2964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2960);
				match(COMMA);
				setState(2961);
				index_option();
				}
				}
				setState(2966);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2967);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitIndex_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2969);
			simple_id();
			setState(2970);
			match(EQUAL);
			setState(2974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(2971);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(2972);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(2973);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(tsqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(tsqlParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(tsqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(tsqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode INSENSITIVE() { return getToken(tsqlParser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(tsqlParser.SCROLL, 0); }
		public TerminalNode READ() { return getToken(tsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(tsqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(tsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(tsqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDeclare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2976);
			match(DECLARE);
			setState(2977);
			cursor_name();
			setState(3009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(2978);
				match(CURSOR);
				setState(2988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(2979);
					declare_set_cursor_common();
					setState(2986);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(2980);
						match(FOR);
						setState(2981);
						match(UPDATE);
						setState(2984);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(2982);
							match(OF);
							setState(2983);
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSENSITIVE) {
					{
					setState(2990);
					match(INSENSITIVE);
					}
				}

				setState(2994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(2993);
					match(SCROLL);
					}
				}

				setState(2996);
				match(CURSOR);
				setState(2997);
				match(FOR);
				setState(2998);
				select_statement();
				setState(3007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2999);
					match(FOR);
					setState(3005);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(3000);
						match(READ);
						setState(3001);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(3002);
						match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(3003);
						match(OF);
						setState(3004);
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			setState(3012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3011);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Declare_set_cursor_common_partialContext> declare_set_cursor_common_partial() {
			return getRuleContexts(Declare_set_cursor_common_partialContext.class);
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return getRuleContext(Declare_set_cursor_common_partialContext.class,i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDeclare_set_cursor_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDeclare_set_cursor_common(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDeclare_set_cursor_common(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DYNAMIC - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (FORWARD_ONLY - 300)) | (1L << (GLOBAL - 300)) | (1L << (KEYSET - 300)) | (1L << (LOCAL - 300)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (OPTIMISTIC - 390)) | (1L << (READ_ONLY - 390)) | (1L << (SCROLL - 390)) | (1L << (SCROLL_LOCKS - 390)) | (1L << (STATIC - 390)))) != 0) || _la==TYPE_WARNING) {
				{
				{
				setState(3014);
				declare_set_cursor_common_partial();
				}
				}
				setState(3019);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3020);
			match(FOR);
			setState(3021);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_common_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(tsqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(tsqlParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(tsqlParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(tsqlParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(tsqlParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(tsqlParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(tsqlParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(tsqlParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(tsqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(tsqlParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(tsqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common_partial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDeclare_set_cursor_common_partial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDeclare_set_cursor_common_partial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDeclare_set_cursor_common_partial(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() throws RecognitionException {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			setState(3028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3023);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3024);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(3025);
				_la = _input.LA(1);
				if ( !(((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (DYNAMIC - 300)) | (1L << (FAST_FORWARD - 300)) | (1L << (KEYSET - 300)))) != 0) || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				enterOuterAlt(_localctx, 4);
				{
				setState(3026);
				_la = _input.LA(1);
				if ( !(((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (OPTIMISTIC - 390)) | (1L << (READ_ONLY - 390)) | (1L << (SCROLL_LOCKS - 390)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TYPE_WARNING:
				enterOuterAlt(_localctx, 5);
				{
				setState(3027);
				match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(tsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public TerminalNode INTO() { return getToken(tsqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(tsqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(tsqlParser.LOCAL_ID, i);
		}
		public TerminalNode NEXT() { return getToken(tsqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(tsqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(tsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(tsqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(tsqlParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(tsqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFetch_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFetch_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFetch_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_fetch_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3030);
			match(FETCH);
			setState(3040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3037);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(3031);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(3032);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(3033);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(3034);
					match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					setState(3035);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3036);
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				setState(3039);
				match(FROM);
				}
				break;
			}
			setState(3043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3042);
				match(GLOBAL);
				}
				break;
			}
			setState(3045);
			cursor_name();
			setState(3055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3046);
				match(INTO);
				setState(3047);
				match(LOCAL_ID);
				setState(3052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3048);
					match(COMMA);
					setState(3049);
					match(LOCAL_ID);
					}
					}
					setState(3054);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(3057);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(tsqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(tsqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(tsqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(tsqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(tsqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(tsqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(tsqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(tsqlParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(tsqlParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(tsqlParser.SERIALIZABLE, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(tsqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(tsqlParser.ANSI_NULLS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(tsqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(tsqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(tsqlParser.ANSI_WARNINGS, 0); }
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSet_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSet_special(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSet_special(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_set_special);
		try {
			setState(3108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				match(SET);
				setState(3061);
				id();
				setState(3065);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(3062);
					id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(3063);
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					setState(3064);
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					setState(3067);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3070);
				match(SET);
				setState(3071);
				match(TRANSACTION);
				setState(3072);
				match(ISOLATION);
				setState(3073);
				match(LEVEL);
				setState(3082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					setState(3074);
					match(READ);
					setState(3075);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(3076);
					match(READ);
					setState(3077);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(3078);
					match(REPEATABLE);
					setState(3079);
					match(READ);
					}
					break;
				case 4:
					{
					setState(3080);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(3081);
					match(SERIALIZABLE);
					}
					break;
				}
				setState(3085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3084);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3087);
				match(SET);
				setState(3088);
				match(IDENTITY_INSERT);
				setState(3089);
				table_name();
				setState(3090);
				on_off();
				setState(3092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3091);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3094);
				match(SET);
				setState(3095);
				match(ANSI_NULLS);
				setState(3096);
				on_off();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3097);
				match(SET);
				setState(3098);
				match(QUOTED_IDENTIFIER);
				setState(3099);
				on_off();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3100);
				match(SET);
				setState(3101);
				match(ANSI_PADDING);
				setState(3102);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3103);
				match(SET);
				setState(3104);
				match(ANSI_WARNINGS);
				setState(3105);
				on_off();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3106);
				match(SET);
				setState(3107);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitConstant_LOCAL_ID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitConstant_LOCAL_ID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_constant_LOCAL_ID);
		try {
			setState(3112);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3110);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3111);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Binary_operator_expressionContext extends ExpressionContext {
		public Token op;
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Binary_operator_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBinary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBinary_operator_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBinary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Primitive_expressionContext extends ExpressionContext {
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitPrimitive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Asssignment_operator_expressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Asssignment_operator_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAsssignment_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAsssignment_operator_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAsssignment_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Bracket_expressionContext extends ExpressionContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Bracket_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBracket_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Unary_operator_expressionContext extends ExpressionContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterUnary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitUnary_operator_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitUnary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Function_call_expressionContext extends ExpressionContext {
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(tsqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Function_call_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunction_call_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunction_call_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunction_call_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Case_expressionContext extends ExpressionContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(tsqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(tsqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(tsqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Column_ref_expressionContext extends ExpressionContext {
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Column_ref_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_ref_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_ref_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_ref_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Subquery_expressionContext extends ExpressionContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSubquery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSubquery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSubquery_expression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Over_clause_expressionContext extends ExpressionContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Over_clause_expressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOver_clause_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOver_clause_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOver_clause_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 272;
		enterRecursionRule(_localctx, 272, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3115);
				match(DEFAULT);
				}
				break;
			case 2:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3116);
				match(NULL);
				}
				break;
			case 3:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3117);
				match(LOCAL_ID);
				}
				break;
			case 4:
				{
				_localctx = new Primitive_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3118);
				constant();
				}
				break;
			case 5:
				{
				_localctx = new Function_call_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3119);
				function_call();
				}
				break;
			case 6:
				{
				_localctx = new Case_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3120);
				match(CASE);
				setState(3121);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(3123); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3122);
					switch_section();
					}
					}
					setState(3125); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3127);
					match(ELSE);
					setState(3128);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(3131);
				match(END);
				}
				break;
			case 7:
				{
				_localctx = new Case_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3133);
				match(CASE);
				setState(3135); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3134);
					switch_search_condition_section();
					}
					}
					setState(3137); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3139);
					match(ELSE);
					setState(3140);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(3143);
				match(END);
				}
				break;
			case 8:
				{
				_localctx = new Column_ref_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3145);
				full_column_name();
				}
				break;
			case 9:
				{
				_localctx = new Bracket_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3146);
				match(LR_BRACKET);
				setState(3147);
				expression(0);
				setState(3148);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new Subquery_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3150);
				match(LR_BRACKET);
				setState(3151);
				subquery();
				setState(3152);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3154);
				match(BIT_NOT);
				setState(3155);
				expression(7);
				}
				break;
			case 12:
				{
				_localctx = new Unary_operator_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3156);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3157);
				expression(5);
				}
				break;
			case 13:
				{
				_localctx = new Over_clause_expressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3158);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3180);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3178);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
					case 1:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3161);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3162);
						((Binary_operator_expressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (STAR - 524)) | (1L << (DIVIDE - 524)) | (1L << (MODULE - 524)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3163);
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3164);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3165);
						((Binary_operator_expressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (PLUS - 527)) | (1L << (MINUS - 527)) | (1L << (BIT_OR - 527)) | (1L << (BIT_AND - 527)) | (1L << (BIT_XOR - 527)))) != 0)) ) {
							((Binary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3166);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new Binary_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3167);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3168);
						comparison_operator();
						setState(3169);
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new Asssignment_operator_expressionContext(new ExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3171);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3172);
						assignment_operator();
						setState(3173);
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new Function_call_expressionContext(new ExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3175);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(3176);
						match(COLLATE);
						setState(3177);
						id();
						}
						break;
					}
					} 
				}
				setState(3182);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitConstant_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_constant_expression);
		try {
			setState(3191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3183);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3184);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3185);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3186);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3187);
				match(LR_BRACKET);
				setState(3188);
				constant_expression();
				setState(3189);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3193);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(tsqlParser.XMLNAMESPACES, 0); }
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWith_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_with_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			match(WITH);
			setState(3198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(3196);
				match(XMLNAMESPACES);
				setState(3197);
				match(COMMA);
				}
				break;
			}
			setState(3200);
			common_table_expression();
			setState(3205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3201);
				match(COMMA);
				setState(3202);
				common_table_expression();
				}
				}
				setState(3207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCommon_table_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(3213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3209);
				match(LR_BRACKET);
				setState(3210);
				column_name_list();
				setState(3211);
				match(RR_BRACKET);
				}
			}

			setState(3215);
			match(AS);
			setState(3216);
			match(LR_BRACKET);
			setState(3217);
			select_statement();
			setState(3218);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitUpdate_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_update_elem);
		try {
			setState(3236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3222);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(3220);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(3221);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3226);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(3224);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(3225);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3228);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3229);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(3230);
				match(DOT);
				setState(3231);
				((Update_elemContext)_localctx).method_name = id();
				setState(3232);
				match(LR_BRACKET);
				setState(3233);
				expression_list();
				setState(3234);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSearch_condition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSearch_condition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSearch_condition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_search_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			search_condition();
			setState(3243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3239);
				match(COMMA);
				setState(3240);
				search_condition();
				}
				}
				setState(3245);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(tsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(tsqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			search_condition_and();
			setState(3251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(3247);
				match(OR);
				setState(3248);
				search_condition_and();
				}
				}
				setState(3253);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(tsqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(tsqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSearch_condition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSearch_condition_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSearch_condition_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_search_condition_and);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			search_condition_not();
			setState(3259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(3255);
				match(AND);
				setState(3256);
				search_condition_not();
				}
				}
				setState(3261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSearch_condition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSearch_condition_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSearch_condition_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3262);
				match(NOT);
				}
			}

			setState(3265);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(tsqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(tsqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(tsqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(tsqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(tsqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public TerminalNode IN() { return getToken(tsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(tsqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(tsqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(tsqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_predicate);
		int _la;
		try {
			setState(3322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3267);
				match(EXISTS);
				setState(3268);
				match(LR_BRACKET);
				setState(3269);
				subquery();
				setState(3270);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3272);
				expression(0);
				setState(3273);
				comparison_operator();
				setState(3274);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3276);
				expression(0);
				setState(3277);
				comparison_operator();
				setState(3278);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3279);
				match(LR_BRACKET);
				setState(3280);
				subquery();
				setState(3281);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3283);
				expression(0);
				setState(3285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3284);
					match(NOT);
					}
				}

				setState(3287);
				match(BETWEEN);
				setState(3288);
				expression(0);
				setState(3289);
				match(AND);
				setState(3290);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3292);
				expression(0);
				setState(3294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3293);
					match(NOT);
					}
				}

				setState(3296);
				match(IN);
				setState(3297);
				match(LR_BRACKET);
				setState(3300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(3298);
					subquery();
					}
					break;
				case 2:
					{
					setState(3299);
					expression_list();
					}
					break;
				}
				setState(3302);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3304);
				expression(0);
				setState(3306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3305);
					match(NOT);
					}
				}

				setState(3308);
				match(LIKE);
				setState(3309);
				expression(0);
				setState(3312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(3310);
					match(ESCAPE);
					setState(3311);
					expression(0);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3314);
				expression(0);
				setState(3315);
				match(IS);
				setState(3316);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3318);
				match(LR_BRACKET);
				setState(3319);
				search_condition();
				setState(3320);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public List<UnionContext> union() {
			return getRuleContexts(UnionContext.class);
		}
		public UnionContext union(int i) {
			return getRuleContext(UnionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3324);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(3325);
				match(LR_BRACKET);
				setState(3326);
				query_expression();
				setState(3327);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3334);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3331);
					union();
					}
					} 
				}
				setState(3336);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(tsqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(tsqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(tsqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public UnionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitUnion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionContext union() throws RecognitionException {
		UnionContext _localctx = new UnionContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(3337);
				match(UNION);
				setState(3339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3338);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(3341);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(3342);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3345);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(3346);
				match(LR_BRACKET);
				setState(3347);
				query_expression();
				setState(3348);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(tsqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(tsqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(tsqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(tsqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(tsqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(tsqlParser.HAVING, 0); }
		public List<TerminalNode> ALL() { return getTokens(tsqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(tsqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(tsqlParser.DISTINCT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3352);
			match(SELECT);
			setState(3354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3353);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(3356);
				top_clause();
				}
			}

			setState(3359);
			select_list();
			setState(3362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3360);
				match(INTO);
				setState(3361);
				table_name();
				}
			}

			setState(3366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3364);
				match(FROM);
				setState(3365);
				table_sources();
				}
			}

			setState(3370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(3368);
				match(WHERE);
				setState(3369);
				((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(3385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(3372);
				match(GROUP);
				setState(3373);
				match(BY);
				setState(3375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3374);
					match(ALL);
					}
				}

				setState(3377);
				group_by_item();
				setState(3382);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3378);
						match(COMMA);
						setState(3379);
						group_by_item();
						}
						} 
					}
					setState(3384);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
				}
				}
				break;
			}
			setState(3389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(3387);
				match(HAVING);
				setState(3388);
				((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(tsqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(tsqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3391);
			match(TOP);
			setState(3394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(3392);
				top_percent();
				}
				break;
			case 2:
				{
				setState(3393);
				top_count();
				}
				break;
			}
			setState(3398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3396);
				match(WITH);
				setState(3397);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(tsqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(tsqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(tsqlParser.FLOAT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTop_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTop_percent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTop_percent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_top_percent);
		int _la;
		try {
			setState(3407);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3400);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3401);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3402);
				match(LR_BRACKET);
				setState(3403);
				expression(0);
				setState(3404);
				match(RR_BRACKET);
				setState(3405);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTop_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTop_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_top_count);
		try {
			setState(3414);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3409);
				match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3410);
				match(LR_BRACKET);
				setState(3411);
				expression(0);
				setState(3412);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(tsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(tsqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(tsqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(tsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(tsqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(tsqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(tsqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(tsqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(tsqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(tsqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(tsqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3416);
			match(ORDER);
			setState(3417);
			match(BY);
			setState(3418);
			order_by_expression();
			setState(3423);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,496,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3419);
					match(COMMA);
					setState(3420);
					order_by_expression();
					}
					} 
				}
				setState(3425);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,496,_ctx);
			}
			setState(3437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(3426);
				match(OFFSET);
				setState(3427);
				expression(0);
				setState(3428);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
				case 1:
					{
					setState(3429);
					match(FETCH);
					setState(3430);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3431);
					expression(0);
					setState(3432);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3433);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(tsqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(tsqlParser.XML, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public TerminalNode AUTO() { return getToken(tsqlParser.AUTO, 0); }
		public TerminalNode RAW() { return getToken(tsqlParser.RAW, 0); }
		public TerminalNode PATH() { return getToken(tsqlParser.PATH, 0); }
		public TerminalNode EXPLICIT() { return getToken(tsqlParser.EXPLICIT, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(3463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3439);
				match(FOR);
				setState(3440);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3441);
				match(FOR);
				setState(3442);
				match(XML);
				setState(3444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					setState(3443);
					xml_common_directives();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3446);
				match(FOR);
				setState(3447);
				match(XML);
				setState(3448);
				_la = _input.LA(1);
				if ( !(_la==RAW || _la==AUTO || _la==EXPLICIT || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(3449);
					match(COMMA);
					}
					break;
				}
				setState(3455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
				case 1:
					{
					setState(3452);
					match(LR_BRACKET);
					setState(3453);
					match(STRING);
					setState(3454);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3460);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3457);
						xml_common_directives();
						}
						} 
					}
					setState(3462);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode BINARY_BASE64() { return getToken(tsqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(tsqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(tsqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitXml_common_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitXml_common_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_xml_common_directives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465);
			match(COMMA);
			setState(3466);
			_la = _input.LA(1);
			if ( !(_la==BINARY_BASE64 || _la==ROOT || _la==TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(tsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(tsqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOrder_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3468);
			expression(0);
			setState(3470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3469);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3472);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(tsqlParser.OPTION, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOption_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOption_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474);
			match(OPTION);
			setState(3475);
			match(LR_BRACKET);
			setState(3476);
			option();
			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3477);
				match(COMMA);
				setState(3478);
				option();
				}
				}
				setState(3483);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3484);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(tsqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(tsqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(tsqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(tsqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(tsqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(tsqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(tsqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(tsqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(tsqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(tsqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(tsqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(tsqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(tsqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(tsqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(tsqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(tsqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(tsqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(tsqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode UNKNOWN() { return getToken(tsqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(tsqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(tsqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(tsqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(tsqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(tsqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(tsqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_option);
		int _la;
		try {
			setState(3531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3486);
				match(FAST);
				setState(3487);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3488);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3489);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3490);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3491);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3492);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3493);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3494);
				match(EXPAND);
				setState(3495);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3496);
				match(FORCE);
				setState(3497);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3498);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3499);
				match(KEEP);
				setState(3500);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3501);
				match(KEEPFIXED);
				setState(3502);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3503);
				match(MAXDOP);
				setState(3504);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3505);
				match(MAXRECURSION);
				setState(3506);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3507);
				match(OPTIMIZE);
				setState(3508);
				match(FOR);
				setState(3509);
				match(LR_BRACKET);
				setState(3510);
				optimize_for_arg();
				setState(3515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3511);
					match(COMMA);
					setState(3512);
					optimize_for_arg();
					}
					}
					setState(3517);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3518);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3520);
				match(OPTIMIZE);
				setState(3521);
				match(FOR);
				setState(3522);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3523);
				match(PARAMETERIZATION);
				setState(3524);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3525);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3526);
				match(ROBUST);
				setState(3527);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3528);
				match(USE);
				setState(3529);
				match(PLAN);
				setState(3530);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(tsqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOptimize_for_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOptimize_for_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3533);
			match(LOCAL_ID);
			setState(3540);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(3534);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(3535);
				match(EQUAL);
				setState(3538);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(3536);
					constant();
					}
					break;
				case NULL:
					{
					setState(3537);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			select_list_elem();
			setState(3547);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3543);
					match(COMMA);
					setState(3544);
					select_list_elem();
					}
					} 
				}
				setState(3549);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,510,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(tsqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(tsqlParser.ROWGUID, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSelect_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_select_list_elem);
		int _la;
		try {
			setState(3571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
					{
					setState(3550);
					table_name();
					setState(3551);
					match(DOT);
					}
				}

				setState(3558);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(3555);
					match(STAR);
					}
					break;
				case DOLLAR:
					{
					setState(3556);
					match(DOLLAR);
					setState(3557);
					_la = _input.LA(1);
					if ( !(_la==IDENTITY || _la==ROWGUID) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3560);
				column_alias();
				setState(3561);
				match(EQUAL);
				setState(3562);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3564);
				expression(0);
				setState(3569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(3566);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3565);
						match(AS);
						}
					}

					setState(3568);
					column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_sources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_sources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			table_source();
			setState(3578);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3574);
					match(COMMA);
					setState(3575);
					table_source();
					}
					} 
				}
				setState(3580);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_table_source);
		try {
			setState(3586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3581);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3582);
				match(LR_BRACKET);
				setState(3583);
				table_source_item_joined();
				setState(3584);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_source_item_joined(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_source_item_joined(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3588);
			table_source_item();
			setState(3592);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,518,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3589);
					join_part();
					}
					} 
				}
				setState(3594);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,518,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_source_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_source_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_source_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_table_source_item);
		try {
			setState(3641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3595);
				table_name_with_hint();
				setState(3597);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(3596);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3599);
				full_table_name();
				setState(3601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(3600);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3603);
				rowset_function();
				setState(3605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(3604);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3607);
				derived_table();
				setState(3612);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(3608);
					as_table_alias();
					setState(3610);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
					case 1:
						{
						setState(3609);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3614);
				change_table();
				setState(3615);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3617);
				function_call();
				setState(3619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(3618);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3621);
				match(LOCAL_ID);
				setState(3623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(3622);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3625);
				match(LOCAL_ID);
				setState(3626);
				match(DOT);
				setState(3627);
				function_call();
				setState(3632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					setState(3628);
					as_table_alias();
					setState(3630);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
					case 1:
						{
						setState(3629);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3634);
				open_xml();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3635);
				match(COLON);
				setState(3636);
				match(COLON);
				setState(3637);
				function_call();
				setState(3639);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(3638);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(tsqlParser.OPENXML, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOpen_xml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOpen_xml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3643);
			match(OPENXML);
			setState(3644);
			match(LR_BRACKET);
			setState(3645);
			expression(0);
			setState(3646);
			match(COMMA);
			setState(3647);
			expression(0);
			setState(3650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3648);
				match(COMMA);
				setState(3649);
				expression(0);
				}
			}

			setState(3652);
			match(RR_BRACKET);
			setState(3658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(3653);
				match(WITH);
				setState(3654);
				match(LR_BRACKET);
				setState(3655);
				schema_declaration();
				setState(3656);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSchema_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSchema_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3660);
			column_declaration();
			setState(3665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3661);
				match(COMMA);
				setState(3662);
				column_declaration();
				}
				}
				setState(3667);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			match(ID);
			setState(3669);
			data_type();
			setState(3671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(3670);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(tsqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(tsqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitChange_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitChange_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			match(CHANGETABLE);
			setState(3674);
			match(LR_BRACKET);
			setState(3675);
			match(CHANGES);
			setState(3676);
			table_name();
			setState(3677);
			match(COMMA);
			setState(3678);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3679);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(tsqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(tsqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(tsqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(tsqlParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(tsqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(tsqlParser.OUTER, 0); }
		public TerminalNode LOOP() { return getToken(tsqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(tsqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(tsqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(tsqlParser.REMOTE, 0); }
		public TerminalNode CROSS() { return getToken(tsqlParser.CROSS, 0); }
		public TerminalNode APPLY() { return getToken(tsqlParser.APPLY, 0); }
		public TerminalNode PIVOT() { return getToken(tsqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(tsqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterJoin_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitJoin_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitJoin_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_join_part);
		int _la;
		try {
			setState(3715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3688);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(3682);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(3681);
						match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(3684);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3686);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3685);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					setState(3690);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3693);
				match(JOIN);
				setState(3694);
				table_source();
				setState(3695);
				match(ON);
				setState(3696);
				search_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3698);
				match(CROSS);
				setState(3699);
				match(JOIN);
				setState(3700);
				table_source();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3701);
				match(CROSS);
				setState(3702);
				match(APPLY);
				setState(3703);
				table_source();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3704);
				match(OUTER);
				setState(3705);
				match(APPLY);
				setState(3706);
				table_source();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3707);
				match(PIVOT);
				setState(3708);
				pivot_clause();
				setState(3709);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3711);
				match(UNPIVOT);
				setState(3712);
				unpivot_clause();
				setState(3713);
				as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(tsqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3717);
			match(LR_BRACKET);
			setState(3718);
			aggregate_windowed_function();
			setState(3719);
			match(FOR);
			setState(3720);
			full_column_name();
			setState(3721);
			match(IN);
			setState(3722);
			column_alias_list();
			setState(3723);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(tsqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(tsqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			match(LR_BRACKET);
			setState(3726);
			expression(0);
			setState(3727);
			match(FOR);
			setState(3728);
			full_column_name();
			setState(3729);
			match(IN);
			setState(3730);
			match(LR_BRACKET);
			setState(3731);
			full_column_name_list();
			setState(3732);
			match(RR_BRACKET);
			setState(3733);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFull_column_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFull_column_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3735);
			full_column_name();
			setState(3740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3736);
				match(COMMA);
				setState(3737);
				full_column_name();
				}
				}
				setState(3742);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_name_with_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_name_with_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3743);
			table_name();
			setState(3745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(3744);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(tsqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(tsqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(tsqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(tsqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitRowset_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitRowset_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_rowset_function);
		int _la;
		try {
			setState(3773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3747);
				match(OPENROWSET);
				setState(3748);
				match(LR_BRACKET);
				setState(3749);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(3750);
				match(COMMA);
				setState(3751);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(3752);
				match(COMMA);
				setState(3753);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(3754);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3755);
				match(OPENROWSET);
				setState(3756);
				match(LR_BRACKET);
				setState(3757);
				match(BULK);
				setState(3758);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(3759);
				match(COMMA);
				setState(3769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(3760);
					bulk_option();
					setState(3765);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3761);
						match(COMMA);
						setState(3762);
						bulk_option();
						}
						}
						setState(3767);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(3768);
					id();
					}
					break;
				}
				setState(3771);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBulk_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBulk_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			id();
			setState(3776);
			match(EQUAL);
			setState(3777);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_derived_table);
		try {
			setState(3789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3779);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3780);
				match(LR_BRACKET);
				setState(3781);
				subquery();
				setState(3782);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3784);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3785);
				match(LR_BRACKET);
				setState(3786);
				table_value_constructor();
				setState(3787);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public ExpressionContext style;
		public Token seed;
		public Token increment;
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode BINARY_CHECKSUM() { return getToken(tsqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CAST() { return getToken(tsqlParser.CAST, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode CONVERT() { return getToken(tsqlParser.CONVERT, 0); }
		public TerminalNode CHECKSUM() { return getToken(tsqlParser.CHECKSUM, 0); }
		public TerminalNode COALESCE() { return getToken(tsqlParser.COALESCE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(tsqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(tsqlParser.CURRENT_USER, 0); }
		public TerminalNode DATEADD() { return getToken(tsqlParser.DATEADD, 0); }
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public TerminalNode DATEDIFF() { return getToken(tsqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(tsqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(tsqlParser.DATEPART, 0); }
		public TerminalNode GETDATE() { return getToken(tsqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(tsqlParser.GETUTCDATE, 0); }
		public TerminalNode IDENTITY() { return getToken(tsqlParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(tsqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(tsqlParser.DECIMAL, i);
		}
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode NULLIF() { return getToken(tsqlParser.NULLIF, 0); }
		public TerminalNode STUFF() { return getToken(tsqlParser.STUFF, 0); }
		public TerminalNode SESSION_USER() { return getToken(tsqlParser.SESSION_USER, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(tsqlParser.SYSTEM_USER, 0); }
		public TerminalNode ISNULL() { return getToken(tsqlParser.ISNULL, 0); }
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_function_call);
		int _la;
		try {
			setState(3913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3791);
				ranking_windowed_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3792);
				aggregate_windowed_function();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3793);
				scalar_function_name();
				setState(3794);
				match(LR_BRACKET);
				setState(3796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (CASE - 34)) | (1L << (COALESCE - 34)) | (1L << (CONVERT - 34)) | (1L << (CURRENT_TIMESTAMP - 34)) | (1L << (CURRENT_USER - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (DEFAULT - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (IDENTITY - 108)) | (1L << (ISNULL - 108)) | (1L << (LEFT - 108)) | (1L << (NULL - 108)) | (1L << (NULLIF - 108)) | (1L << (OFFSETS - 108)) | (1L << (OVER - 108)) | (1L << (PAGE - 108)) | (1L << (PUBLIC - 108)) | (1L << (RAW - 108)))) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (RETURN - 177)) | (1L << (RETURNS - 177)) | (1L << (RIGHT - 177)) | (1L << (ROWCOUNT - 177)) | (1L << (SERVER - 177)) | (1L << (SESSION_USER - 177)) | (1L << (SOURCE - 177)) | (1L << (SYSTEM_USER - 177)) | (1L << (TARGET - 177)) | (1L << (ABSOLUTE - 177)))) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & ((1L << (APPLY - 244)) | (1L << (AUTO - 244)) | (1L << (AVG - 244)) | (1L << (BINARY_CHECKSUM - 244)) | (1L << (CALLER - 244)) | (1L << (CAST - 244)) | (1L << (CATCH - 244)) | (1L << (CHECKSUM - 244)) | (1L << (CHECKSUM_AGG - 244)) | (1L << (COMMITTED - 244)) | (1L << (CONCAT - 244)) | (1L << (CONCAT_NULL_YIELDS_NULL - 244)) | (1L << (CONTROL - 244)) | (1L << (COOKIE - 244)) | (1L << (COUNT - 244)) | (1L << (COUNT_BIG - 244)) | (1L << (DATEADD - 244)) | (1L << (DATEDIFF - 244)) | (1L << (DATENAME - 244)) | (1L << (DATEPART - 244)) | (1L << (DELAY - 244)) | (1L << (DELETED - 244)) | (1L << (DENSE_RANK - 244)) | (1L << (DISABLE - 244)) | (1L << (DYNAMIC - 244)) | (1L << (ENCRYPTION - 244)) | (1L << (EXPAND - 244)))) != 0) || ((((_la - 310)) & ~0x3f) == 0 && ((1L << (_la - 310)) & ((1L << (FAST - 310)) | (1L << (FAST_FORWARD - 310)) | (1L << (FIRST - 310)) | (1L << (FOLLOWING - 310)) | (1L << (FORCE - 310)) | (1L << (FORCED - 310)) | (1L << (FORWARD_ONLY - 310)) | (1L << (FULLSCAN - 310)) | (1L << (GETDATE - 310)) | (1L << (GETUTCDATE - 310)) | (1L << (GLOBAL - 310)) | (1L << (GROUPING - 310)) | (1L << (GROUPING_ID - 310)) | (1L << (HASH - 310)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 310)) | (1L << (IMPERSONATE - 310)) | (1L << (INPUT - 310)) | (1L << (INSENSITIVE - 310)) | (1L << (INSERTED - 310)) | (1L << (ISOLATION - 310)) | (1L << (KEEP - 310)) | (1L << (KEEPFIXED - 310)) | (1L << (KEYSET - 310)) | (1L << (LAST - 310)) | (1L << (LEVEL - 310)) | (1L << (LOCAL - 310)) | (1L << (LOCK_ESCALATION - 310)) | (1L << (LOGIN - 310)) | (1L << (LOOP - 310)) | (1L << (MARK - 310)) | (1L << (MAX - 310)) | (1L << (MAXDOP - 310)) | (1L << (MAXRECURSION - 310)) | (1L << (MIN - 310)) | (1L << (MIN_ACTIVE_ROWVERSION - 310)) | (1L << (MODIFY - 310)) | (1L << (NAME - 310)))) != 0) || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (NEXT - 375)) | (1L << (NOCOUNT - 375)) | (1L << (NOEXPAND - 375)) | (1L << (NORECOMPUTE - 375)) | (1L << (NTILE - 375)) | (1L << (NUMBER - 375)) | (1L << (OFFSET - 375)) | (1L << (ONLINE - 375)) | (1L << (ONLY - 375)) | (1L << (OPTIMISTIC - 375)) | (1L << (OPTIMIZE - 375)) | (1L << (OUT - 375)) | (1L << (OUTPUT - 375)) | (1L << (OWNER - 375)) | (1L << (PARAMETERIZATION - 375)) | (1L << (PARTITION - 375)) | (1L << (PATH - 375)) | (1L << (PRECEDING - 375)) | (1L << (PRIOR - 375)) | (1L << (PRIVILEGES - 375)) | (1L << (RANGE - 375)) | (1L << (RANK - 375)) | (1L << (READONLY - 375)) | (1L << (READ_ONLY - 375)) | (1L << (RECOMPILE - 375)) | (1L << (RELATIVE - 375)) | (1L << (REMOTE - 375)) | (1L << (REPEATABLE - 375)) | (1L << (ROBUST - 375)) | (1L << (ROOT - 375)) | (1L << (ROW - 375)) | (1L << (ROWGUID - 375)) | (1L << (ROWS - 375)) | (1L << (ROW_NUMBER - 375)) | (1L << (SAMPLE - 375)) | (1L << (SCHEMABINDING - 375)) | (1L << (SCROLL - 375)) | (1L << (SCROLL_LOCKS - 375)) | (1L << (SELF - 375)))) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (SERIALIZABLE - 440)) | (1L << (SIMPLE - 440)) | (1L << (SIZE - 440)) | (1L << (SNAPSHOT - 440)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 440)) | (1L << (STATIC - 440)) | (1L << (STATS_STREAM - 440)) | (1L << (STDEV - 440)) | (1L << (STDEVP - 440)) | (1L << (STUFF - 440)) | (1L << (SUM - 440)) | (1L << (TEXTIMAGE_ON - 440)) | (1L << (THROW - 440)) | (1L << (TIES - 440)) | (1L << (TIME - 440)) | (1L << (TRY - 440)) | (1L << (TYPE - 440)) | (1L << (TYPE_WARNING - 440)) | (1L << (UNBOUNDED - 440)) | (1L << (UNCOMMITTED - 440)) | (1L << (UNKNOWN - 440)) | (1L << (USING - 440)) | (1L << (VAR - 440)) | (1L << (VARP - 440)) | (1L << (VIEWS - 440)) | (1L << (VIEW_METADATA - 440)) | (1L << (WORK - 440)) | (1L << (XML - 440)) | (1L << (XMLNAMESPACES - 440)) | (1L << (DOUBLE_QUOTE_ID - 440)) | (1L << (SQUARE_BRACKET_ID - 440)) | (1L << (LOCAL_ID - 440)) | (1L << (DECIMAL - 440)) | (1L << (ID - 440)) | (1L << (STRING - 440)) | (1L << (BINARY - 440)) | (1L << (FLOAT - 440)) | (1L << (REAL - 440)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (DOLLAR - 518)) | (1L << (LR_BRACKET - 518)) | (1L << (PLUS - 518)) | (1L << (MINUS - 518)) | (1L << (BIT_NOT - 518)))) != 0)) {
					{
					setState(3795);
					expression_list();
					}
				}

				setState(3798);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3800);
				match(BINARY_CHECKSUM);
				setState(3801);
				match(LR_BRACKET);
				setState(3802);
				match(STAR);
				setState(3803);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3804);
				match(CAST);
				setState(3805);
				match(LR_BRACKET);
				setState(3806);
				expression(0);
				setState(3807);
				match(AS);
				setState(3808);
				data_type();
				setState(3809);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3811);
				match(CONVERT);
				setState(3812);
				match(LR_BRACKET);
				setState(3813);
				data_type();
				setState(3814);
				match(COMMA);
				setState(3815);
				expression(0);
				setState(3818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3816);
					match(COMMA);
					setState(3817);
					((Function_callContext)_localctx).style = expression(0);
					}
				}

				setState(3820);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3822);
				match(CHECKSUM);
				setState(3823);
				match(LR_BRACKET);
				setState(3824);
				match(STAR);
				setState(3825);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3826);
				match(COALESCE);
				setState(3827);
				match(LR_BRACKET);
				setState(3828);
				expression_list();
				setState(3829);
				match(RR_BRACKET);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3831);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3832);
				match(CURRENT_USER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3833);
				match(DATEADD);
				setState(3834);
				match(LR_BRACKET);
				setState(3835);
				match(ID);
				setState(3836);
				match(COMMA);
				setState(3837);
				expression(0);
				setState(3838);
				match(COMMA);
				setState(3839);
				expression(0);
				setState(3840);
				match(RR_BRACKET);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3842);
				match(DATEDIFF);
				setState(3843);
				match(LR_BRACKET);
				setState(3844);
				match(ID);
				setState(3845);
				match(COMMA);
				setState(3846);
				expression(0);
				setState(3847);
				match(COMMA);
				setState(3848);
				expression(0);
				setState(3849);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3851);
				match(DATENAME);
				setState(3852);
				match(LR_BRACKET);
				setState(3853);
				match(ID);
				setState(3854);
				match(COMMA);
				setState(3855);
				expression(0);
				setState(3856);
				match(RR_BRACKET);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3858);
				match(DATEPART);
				setState(3859);
				match(LR_BRACKET);
				setState(3860);
				match(ID);
				setState(3861);
				match(COMMA);
				setState(3862);
				expression(0);
				setState(3863);
				match(RR_BRACKET);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3865);
				match(GETDATE);
				setState(3866);
				match(LR_BRACKET);
				setState(3867);
				match(RR_BRACKET);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3868);
				match(GETUTCDATE);
				setState(3869);
				match(LR_BRACKET);
				setState(3870);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3871);
				match(IDENTITY);
				setState(3872);
				match(LR_BRACKET);
				setState(3873);
				data_type();
				setState(3876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
				case 1:
					{
					setState(3874);
					match(COMMA);
					setState(3875);
					((Function_callContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(3880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3878);
					match(COMMA);
					setState(3879);
					((Function_callContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(3882);
				match(RR_BRACKET);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3884);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3885);
				match(NULLIF);
				setState(3886);
				match(LR_BRACKET);
				setState(3887);
				expression(0);
				setState(3888);
				match(COMMA);
				setState(3889);
				expression(0);
				setState(3890);
				match(RR_BRACKET);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3892);
				match(STUFF);
				setState(3893);
				match(LR_BRACKET);
				setState(3894);
				expression(0);
				setState(3895);
				match(COMMA);
				setState(3896);
				match(DECIMAL);
				setState(3897);
				match(COMMA);
				setState(3898);
				match(DECIMAL);
				setState(3899);
				match(COMMA);
				setState(3900);
				expression(0);
				setState(3901);
				match(RR_BRACKET);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3903);
				match(SESSION_USER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3904);
				match(SYSTEM_USER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3905);
				match(ISNULL);
				setState(3906);
				match(LR_BRACKET);
				setState(3907);
				expression(0);
				setState(3908);
				match(COMMA);
				setState(3909);
				expression(0);
				setState(3910);
				match(RR_BRACKET);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3912);
				xml_data_type_methods();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterXml_data_type_methods(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitXml_data_type_methods(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitXml_data_type_methods(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_xml_data_type_methods);
		try {
			setState(3920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3915);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3916);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3917);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3918);
				modify_method();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3919);
				nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public TerminalNode EVENTDATA() { return getToken(tsqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterValue_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitValue_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitValue_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_value_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(3922);
				match(LOCAL_ID);
				}
				break;
			case 2:
				{
				setState(3923);
				match(ID);
				}
				break;
			case 3:
				{
				setState(3924);
				match(EVENTDATA);
				}
				break;
			case 4:
				{
				setState(3925);
				query_method();
				}
				break;
			}
			setState(3928);
			match(T__10);
			setState(3929);
			((Value_methodContext)_localctx).xquery = match(STRING);
			setState(3930);
			match(COMMA);
			setState(3931);
			((Value_methodContext)_localctx).sqltype = match(STRING);
			setState(3932);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQuery_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQuery_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQuery_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_query_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3937);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(3934);
				match(LOCAL_ID);
				}
				break;
			case 2:
				{
				setState(3935);
				match(ID);
				}
				break;
			case 3:
				{
				setState(3936);
				full_table_name();
				}
				break;
			}
			setState(3939);
			match(T__11);
			setState(3940);
			((Query_methodContext)_localctx).xquery = match(STRING);
			setState(3941);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExist_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExist_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExist_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_exist_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3943);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3944);
			match(T__12);
			setState(3945);
			((Exist_methodContext)_localctx).xquery = match(STRING);
			setState(3946);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterModify_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitModify_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitModify_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_modify_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3948);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3949);
			match(T__13);
			setState(3950);
			((Modify_methodContext)_localctx).xml_dml = match(STRING);
			setState(3951);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterNodes_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitNodes_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitNodes_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_nodes_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3953);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3954);
			match(T__14);
			setState(3955);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(3956);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(tsqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(tsqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3958);
			match(WHEN);
			setState(3959);
			expression(0);
			setState(3960);
			match(THEN);
			setState(3961);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(tsqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(tsqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSwitch_search_condition_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSwitch_search_condition_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3963);
			match(WHEN);
			setState(3964);
			search_condition();
			setState(3965);
			match(THEN);
			setState(3966);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(tsqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAs_table_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAs_table_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3968);
				match(AS);
				}
			}

			setState(3971);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			id();
			setState(3975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				setState(3974);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWith_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWith_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3977);
				match(WITH);
				}
			}

			setState(3980);
			match(LR_BRACKET);
			setState(3981);
			table_hint();
			setState(3988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || _la==SERIALIZABLE || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (SNAPSHOT - 446)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 446)) | (1L << (ID - 446)))) != 0) || _la==COMMA) {
				{
				{
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3982);
					match(COMMA);
					}
				}

				setState(3985);
				table_hint();
				}
				}
				setState(3990);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3991);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitInsert_with_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitInsert_with_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3993);
			match(WITH);
			setState(3994);
			match(LR_BRACKET);
			setState(3995);
			table_hint();
			setState(4002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || _la==SERIALIZABLE || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (SNAPSHOT - 446)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 446)) | (1L << (ID - 446)))) != 0) || _la==COMMA) {
				{
				{
				setState(3997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3996);
					match(COMMA);
					}
				}

				setState(3999);
				table_hint();
				}
				}
				setState(4004);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4005);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(tsqlParser.INDEX, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(tsqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(tsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(tsqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(tsqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(tsqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(tsqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_table_hint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(4007);
				match(NOEXPAND);
				}
			}

			setState(4048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				{
				setState(4010);
				match(INDEX);
				setState(4011);
				match(LR_BRACKET);
				setState(4012);
				index_value();
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4013);
					match(COMMA);
					setState(4014);
					index_value();
					}
					}
					setState(4019);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4020);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(4022);
				match(INDEX);
				setState(4023);
				match(EQUAL);
				setState(4024);
				index_value();
				}
				break;
			case 3:
				{
				setState(4025);
				match(FORCESEEK);
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(4026);
					match(LR_BRACKET);
					setState(4027);
					index_value();
					setState(4028);
					match(LR_BRACKET);
					setState(4029);
					match(ID);
					setState(4034);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4030);
						match(COMMA);
						setState(4031);
						match(ID);
						}
						}
						setState(4036);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4037);
					match(RR_BRACKET);
					setState(4038);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(4042);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(4043);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(4044);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(4045);
				match(EQUAL);
				setState(4046);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(4047);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitIndex_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitIndex_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_index_value);
		try {
			setState(4052);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4050);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4051);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_alias_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			match(LR_BRACKET);
			setState(4055);
			column_alias();
			setState(4060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4056);
				match(COMMA);
				setState(4057);
				column_alias();
				}
				}
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4063);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_column_alias);
		try {
			setState(4067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4065);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4066);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(tsqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4069);
			match(VALUES);
			setState(4070);
			match(LR_BRACKET);
			setState(4071);
			expression_list();
			setState(4072);
			match(RR_BRACKET);
			setState(4080);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,568,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4073);
					match(COMMA);
					setState(4074);
					match(LR_BRACKET);
					setState(4075);
					expression_list();
					setState(4076);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4082);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,568,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4083);
			expression(0);
			setState(4088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4084);
				match(COMMA);
				setState(4085);
				expression(0);
				}
				}
				setState(4090);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(tsqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(tsqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(tsqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(tsqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitRanking_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitRanking_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(4101);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4091);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4092);
				match(LR_BRACKET);
				setState(4093);
				match(RR_BRACKET);
				setState(4094);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4095);
				match(NTILE);
				setState(4096);
				match(LR_BRACKET);
				setState(4097);
				expression(0);
				setState(4098);
				match(RR_BRACKET);
				setState(4099);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode AVG() { return getToken(tsqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(tsqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(tsqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(tsqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(tsqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(tsqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(tsqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(tsqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(tsqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(tsqlParser.COUNT_BIG, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(tsqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(tsqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(tsqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(4135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4103);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (STDEV - 452)) | (1L << (STDEVP - 452)) | (1L << (SUM - 452)) | (1L << (VAR - 452)) | (1L << (VARP - 452)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4104);
				match(LR_BRACKET);
				setState(4105);
				all_distinct_expression();
				setState(4106);
				match(RR_BRACKET);
				setState(4108);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(4107);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(4110);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4111);
				match(LR_BRACKET);
				setState(4114);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(4112);
					match(STAR);
					}
					break;
				case ALL:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case ISNULL:
				case LEFT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SERVER:
				case SESSION_USER:
				case SOURCE:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case BINARY_CHECKSUM:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case STUFF:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(4113);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4116);
				match(RR_BRACKET);
				setState(4118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4117);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(4120);
				match(CHECKSUM_AGG);
				setState(4121);
				match(LR_BRACKET);
				setState(4122);
				all_distinct_expression();
				setState(4123);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(4125);
				match(GROUPING);
				setState(4126);
				match(LR_BRACKET);
				setState(4127);
				expression(0);
				setState(4128);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(4130);
				match(GROUPING_ID);
				setState(4131);
				match(LR_BRACKET);
				setState(4132);
				expression_list();
				setState(4133);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(tsqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(tsqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAll_distinct_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAll_distinct_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(4137);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4140);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(tsqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(tsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(tsqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			match(OVER);
			setState(4143);
			match(LR_BRACKET);
			setState(4147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4144);
				match(PARTITION);
				setState(4145);
				match(BY);
				setState(4146);
				expression_list();
				}
			}

			setState(4150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4149);
				order_by_clause();
				}
			}

			setState(4153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(4152);
				row_or_range_clause();
				}
			}

			setState(4155);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(tsqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(tsqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitRow_or_range_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitRow_or_range_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4157);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4158);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(tsqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(tsqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWindow_frame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWindow_frame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_window_frame_extent);
		try {
			setState(4166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4160);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(4161);
				match(BETWEEN);
				setState(4162);
				window_frame_bound();
				setState(4163);
				match(AND);
				setState(4164);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWindow_frame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWindow_frame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_window_frame_bound);
		try {
			setState(4170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4168);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4169);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(tsqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(tsqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(tsqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(tsqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWindow_frame_preceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWindow_frame_preceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_window_frame_preceding);
		try {
			setState(4178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4172);
				match(UNBOUNDED);
				setState(4173);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4174);
				match(DECIMAL);
				setState(4175);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4176);
				match(CURRENT);
				setState(4177);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(tsqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(tsqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWindow_frame_following(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWindow_frame_following(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_window_frame_following);
		try {
			setState(4184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4180);
				match(UNBOUNDED);
				setState(4181);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4182);
				match(DECIMAL);
				setState(4183);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(tsqlParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(tsqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(tsqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(tsqlParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(tsqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCreate_database_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCreate_database_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			setState(4220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4186);
				match(FILESTREAM);
				{
				setState(4187);
				database_filestream_option();
				setState(4192);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,583,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4188);
						match(COMMA);
						setState(4189);
						database_filestream_option();
						}
						} 
					}
					setState(4194);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,583,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4195);
				match(DEFAULT_LANGUAGE);
				setState(4196);
				match(EQUAL);
				setState(4199);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4197);
					id();
					}
					break;
				case STRING:
					{
					setState(4198);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4201);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(4202);
				match(EQUAL);
				setState(4205);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILLFACTOR:
				case FORCESEEK:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SERVER:
				case SOURCE:
				case TARGET:
				case ABSOLUTE:
				case APPLY:
				case AUTO:
				case AVG:
				case CALLER:
				case CAST:
				case CATCH:
				case CHECKSUM_AGG:
				case COMMITTED:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case DELAY:
				case DELETED:
				case DENSE_RANK:
				case DISABLE:
				case DYNAMIC:
				case ENCRYPTION:
				case EXPAND:
				case FAST:
				case FAST_FORWARD:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORCED:
				case FORWARD_ONLY:
				case FULLSCAN:
				case GLOBAL:
				case GROUPING:
				case GROUPING_ID:
				case HASH:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMPERSONATE:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case ISOLATION:
				case KEEP:
				case KEEPFIXED:
				case KEYSET:
				case LAST:
				case LEVEL:
				case LOCAL:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case MARK:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MIN:
				case MODIFY:
				case NAME:
				case NEXT:
				case NOCOUNT:
				case NOEXPAND:
				case NORECOMPUTE:
				case NTILE:
				case NUMBER:
				case OFFSET:
				case ONLINE:
				case ONLY:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PARAMETERIZATION:
				case PARTITION:
				case PATH:
				case PRECEDING:
				case PRIOR:
				case PRIVILEGES:
				case RANGE:
				case RANK:
				case READONLY:
				case READ_ONLY:
				case RECOMPILE:
				case RELATIVE:
				case REMOTE:
				case REPEATABLE:
				case ROBUST:
				case ROOT:
				case ROW:
				case ROWGUID:
				case ROWS:
				case ROW_NUMBER:
				case SAMPLE:
				case SCHEMABINDING:
				case SCROLL:
				case SCROLL_LOCKS:
				case SELF:
				case SERIALIZABLE:
				case SIMPLE:
				case SIZE:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STATIC:
				case STATS_STREAM:
				case STDEV:
				case STDEVP:
				case SUM:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TRY:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case USING:
				case VAR:
				case VARP:
				case VIEWS:
				case VIEW_METADATA:
				case WORK:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4203);
					id();
					}
					break;
				case STRING:
					{
					setState(4204);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4207);
				match(NESTED_TRIGGERS);
				setState(4208);
				match(EQUAL);
				setState(4209);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(4210);
				match(TRANSFORM_NOISE_WORDS);
				setState(4211);
				match(EQUAL);
				setState(4212);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(4213);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(4214);
				match(EQUAL);
				setState(4215);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(4216);
				match(DB_CHAINING);
				setState(4217);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(4218);
				match(TRUSTWORTHY);
				setState(4219);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(tsqlParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(tsqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(tsqlParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(tsqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDatabase_filestream_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDatabase_filestream_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDatabase_filestream_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4222);
			match(LR_BRACKET);
			setState(4229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				setState(4223);
				match(NON_TRANSACTED_ACCESS);
				setState(4224);
				match(EQUAL);
				setState(4225);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				setState(4226);
				match(DIRECTORY_NAME);
				setState(4227);
				match(EQUAL);
				setState(4228);
				match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4231);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDatabase_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDatabase_file_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDatabase_file_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_database_file_spec);
		try {
			setState(4235);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4233);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4234);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(tsqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(tsqlParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(tsqlParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(tsqlParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4237);
			match(FILEGROUP);
			setState(4238);
			id();
			setState(4241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				{
				setState(4239);
				match(CONTAINS);
				setState(4240);
				match(FILESTREAM);
				}
				break;
			}
			setState(4244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4243);
				match(DEFAULT);
				}
			}

			setState(4248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(4246);
				match(CONTAINS);
				setState(4247);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(4250);
			file_spec();
			setState(4255);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4251);
					match(COMMA);
					setState(4252);
					file_spec();
					}
					} 
				}
				setState(4257);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(tsqlParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(tsqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(tsqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(tsqlParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(tsqlParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(tsqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(tsqlParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(tsqlParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(tsqlParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(tsqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFile_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFile_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4258);
			match(LR_BRACKET);
			setState(4259);
			match(NAME);
			setState(4260);
			match(EQUAL);
			setState(4263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(4261);
				id();
				}
				break;
			case STRING:
				{
				setState(4262);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4265);
				match(COMMA);
				}
			}

			setState(4268);
			match(FILENAME);
			setState(4269);
			match(EQUAL);
			setState(4270);
			((File_specContext)_localctx).file = match(STRING);
			setState(4272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4271);
				match(COMMA);
				}
			}

			setState(4280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(4274);
				match(SIZE);
				setState(4275);
				match(EQUAL);
				setState(4276);
				file_size();
				setState(4278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4277);
					match(COMMA);
					}
				}

				}
			}

			setState(4291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(4282);
				match(MAXSIZE);
				setState(4283);
				match(EQUAL);
				setState(4286);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(4284);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(4285);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4288);
					match(COMMA);
					}
				}

				}
			}

			setState(4299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(4293);
				match(FILEGROWTH);
				setState(4294);
				match(EQUAL);
				setState(4295);
				file_size();
				setState(4297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4296);
					match(COMMA);
					}
				}

				}
			}

			setState(4301);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFull_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFull_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFull_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4303);
				((Full_table_nameContext)_localctx).server = id();
				setState(4304);
				match(DOT);
				setState(4305);
				((Full_table_nameContext)_localctx).database = id();
				setState(4306);
				match(DOT);
				setState(4307);
				((Full_table_nameContext)_localctx).schema = id();
				setState(4308);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(4310);
				((Full_table_nameContext)_localctx).database = id();
				setState(4311);
				match(DOT);
				setState(4313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
					{
					setState(4312);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(4315);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(4317);
				((Full_table_nameContext)_localctx).schema = id();
				setState(4318);
				match(DOT);
				}
				break;
			}
			setState(4322);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
			case 1:
				{
				setState(4324);
				((Table_nameContext)_localctx).database = id();
				setState(4325);
				match(DOT);
				setState(4327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
					{
					setState(4326);
					((Table_nameContext)_localctx).schema = id();
					}
				}

				setState(4329);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(4331);
				((Table_nameContext)_localctx).schema = id();
				setState(4332);
				match(DOT);
				}
				break;
			}
			setState(4336);
			((Table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSimple_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSimple_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
			case 1:
				{
				setState(4338);
				((Simple_nameContext)_localctx).schema = id();
				setState(4339);
				match(DOT);
				}
				break;
			}
			setState(4343);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFunc_proc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFunc_proc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFunc_proc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_nameContext func_proc_name() throws RecognitionException {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_func_proc_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(4345);
				((Func_proc_nameContext)_localctx).database = id();
				setState(4346);
				match(DOT);
				setState(4348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || ((((_la - 493)) & ~0x3f) == 0 && ((1L << (_la - 493)) & ((1L << (DOUBLE_QUOTE_ID - 493)) | (1L << (SQUARE_BRACKET_ID - 493)) | (1L << (ID - 493)))) != 0)) {
					{
					setState(4347);
					((Func_proc_nameContext)_localctx).schema = id();
					}
				}

				setState(4350);
				match(DOT);
				}
				break;
			case 2:
				{
				{
				setState(4352);
				((Func_proc_nameContext)_localctx).schema = id();
				}
				setState(4353);
				match(DOT);
				}
				break;
			}
			setState(4357);
			((Func_proc_nameContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDdl_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDdl_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDdl_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_ddl_object);
		try {
			setState(4361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4359);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4360);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_full_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				{
				setState(4363);
				table_name();
				setState(4364);
				match(DOT);
				}
				break;
			}
			setState(4368);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(tsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(tsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(tsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(tsqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_name_list_with_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_name_list_with_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4370);
			id();
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(4371);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4374);
				match(COMMA);
				setState(4375);
				id();
				setState(4377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(4376);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(4383);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4384);
			id();
			setState(4389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4385);
				match(COMMA);
				setState(4386);
				id();
				}
				}
				setState(4391);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_cursor_name);
		try {
			setState(4394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4392);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4393);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitOn_off(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitOn_off(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4396);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(tsqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(tsqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitClustered(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitClustered(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4398);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(tsqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitNull_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4400);
				match(NOT);
				}
			}

			setState(4403);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(tsqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterNull_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitNull_or_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitNull_or_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_null_or_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4412);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(4405);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(4406);
				match(DEFAULT);
				setState(4407);
				constant_expression();
				setState(4410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4408);
					match(WITH);
					setState(4409);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(tsqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(tsqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(tsqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(tsqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitScalar_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_scalar_function_name);
		try {
			setState(4419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4414);
				func_proc_name();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4415);
				match(RIGHT);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4416);
				match(LEFT);
				}
				break;
			case BINARY_CHECKSUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4417);
				match(BINARY_CHECKSUM);
				}
				break;
			case CHECKSUM:
				enterOuterAlt(_localctx, 5);
				{
				setState(4418);
				match(CHECKSUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(tsqlParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(tsqlParser.TIMER, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public TerminalNode TIMEOUT() { return getToken(tsqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBegin_conversation_timer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBegin_conversation_timer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBegin_conversation_timer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			match(BEGIN);
			setState(4422);
			match(CONVERSATION);
			setState(4423);
			match(TIMER);
			setState(4424);
			match(LR_BRACKET);
			setState(4425);
			match(LOCAL_ID);
			setState(4426);
			match(RR_BRACKET);
			setState(4427);
			match(TIMEOUT);
			setState(4428);
			match(EQUAL);
			setState(4429);
			time();
			setState(4431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4430);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(tsqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(tsqlParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(tsqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(tsqlParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(tsqlParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(tsqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(tsqlParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(tsqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(tsqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(tsqlParser.LOCAL_ID, i);
		}
		public List<Service_nameContext> service_name() {
			return getRuleContexts(Service_nameContext.class);
		}
		public Service_nameContext service_name(int i) {
			return getRuleContext(Service_nameContext.class,i);
		}
		public TerminalNode CONVERSATION() { return getToken(tsqlParser.CONVERSATION, 0); }
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode LIFETIME() { return getToken(tsqlParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(tsqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(tsqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(tsqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterBegin_conversation_dialog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitBegin_conversation_dialog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitBegin_conversation_dialog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4433);
			match(BEGIN);
			setState(4434);
			match(DIALOG);
			setState(4436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(4435);
				match(CONVERSATION);
				}
			}

			setState(4438);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(4439);
			match(FROM);
			setState(4440);
			match(SERVICE);
			setState(4441);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = service_name();
			setState(4442);
			match(TO);
			setState(4443);
			match(SERVICE);
			setState(4444);
			((Begin_conversation_dialogContext)_localctx).target_service_name = service_name();
			setState(4447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4445);
				match(COMMA);
				setState(4446);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(4449);
			match(ON);
			setState(4450);
			match(CONTRACT);
			setState(4451);
			contract_name();
			setState(4474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(4452);
				match(WITH);
				setState(4459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) {
					{
					setState(4453);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4454);
					match(EQUAL);
					setState(4455);
					match(LOCAL_ID);
					setState(4457);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4456);
						match(COMMA);
						}
					}

					}
				}

				setState(4467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIFETIME) {
					{
					setState(4461);
					match(LIFETIME);
					setState(4462);
					match(EQUAL);
					setState(4463);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4465);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4464);
						match(COMMA);
						}
					}

					}
				}

				setState(4472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
				case 1:
					{
					setState(4469);
					match(ENCRYPTION);
					setState(4470);
					match(EQUAL);
					setState(4471);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(4477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4476);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contract_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contract_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterContract_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitContract_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitContract_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Contract_nameContext contract_name() throws RecognitionException {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_contract_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				{
				setState(4479);
				id();
				}
				break;
			case 2:
				{
				setState(4480);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterService_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitService_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitService_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_nameContext service_name() throws RecognitionException {
		Service_nameContext _localctx = new Service_nameContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_service_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(4483);
				id();
				}
				break;
			case 2:
				{
				setState(4484);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(tsqlParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(tsqlParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(tsqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(tsqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(tsqlParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(tsqlParser.ERROR, 0); }
		public TerminalNode CLEANUP() { return getToken(tsqlParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterEnd_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitEnd_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitEnd_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4487);
			match(END);
			setState(4488);
			match(CONVERSATION);
			setState(4489);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(4491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				{
				setState(4490);
				match(SEMI);
				}
				break;
			}
			setState(4505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(4493);
				match(WITH);
				setState(4500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR) {
					{
					setState(4494);
					match(ERROR);
					setState(4495);
					match(EQUAL);
					setState(4496);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4497);
					match(T__15);
					setState(4498);
					match(EQUAL);
					setState(4499);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLEANUP) {
					{
					setState(4502);
					match(CLEANUP);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode WAITFOR() { return getToken(tsqlParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(tsqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterWaitfor_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitWaitfor_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitWaitfor_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(4507);
				match(WAITFOR);
				}
			}

			setState(4510);
			match(LR_BRACKET);
			setState(4511);
			get_conversation();
			setState(4512);
			match(RR_BRACKET);
			setState(4518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TIMEOUT || _la==COMMA) {
				{
				setState(4514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4513);
					match(COMMA);
					}
				}

				setState(4516);
				match(TIMEOUT);
				setState(4517);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
			}

			setState(4521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				setState(4520);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public Token conversation_group_id;
		public Queue_idContext queue;
		public TerminalNode GET() { return getToken(tsqlParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(tsqlParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(tsqlParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(tsqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return getRuleContext(Queue_idContext.class,0);
		}
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(tsqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterGet_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitGet_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitGet_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_get_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4523);
			match(GET);
			setState(4524);
			match(CONVERSATION);
			setState(4525);
			match(GROUP);
			setState(4526);
			((Get_conversationContext)_localctx).conversation_group_id = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Get_conversationContext)_localctx).conversation_group_id = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4527);
			match(FROM);
			setState(4528);
			((Get_conversationContext)_localctx).queue = queue_id();
			setState(4530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				{
				setState(4529);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_idContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterQueue_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitQueue_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitQueue_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_idContext queue_id() throws RecognitionException {
		Queue_idContext _localctx = new Queue_idContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_queue_id);
		try {
			setState(4539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4532);
				((Queue_idContext)_localctx).database_name = id();
				setState(4533);
				match(DOT);
				setState(4534);
				((Queue_idContext)_localctx).schema_name = id();
				setState(4535);
				match(DOT);
				setState(4536);
				((Queue_idContext)_localctx).name = id();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4538);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public ExpressionContext message_type_name;
		public Token message_body_expression;
		public TerminalNode SEND() { return getToken(tsqlParser.SEND, 0); }
		public TerminalNode ON() { return getToken(tsqlParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(tsqlParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(tsqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(tsqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(tsqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(tsqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(tsqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(tsqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSend_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSend_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSend_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_send_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4541);
			match(SEND);
			setState(4542);
			match(ON);
			setState(4543);
			match(CONVERSATION);
			setState(4544);
			((Send_conversationContext)_localctx).conversation_handle = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Send_conversationContext)_localctx).conversation_handle = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4545);
			match(MESSAGE);
			setState(4546);
			match(TYPE);
			setState(4547);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(4551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(4548);
				match(LR_BRACKET);
				setState(4549);
				((Send_conversationContext)_localctx).message_body_expression = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					((Send_conversationContext)_localctx).message_body_expression = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4550);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				setState(4553);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(tsqlParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(tsqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(tsqlParser.DECIMAL, i);
		}
		public TerminalNode MAX() { return getToken(tsqlParser.MAX, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_data_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			id();
			setState(4558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				{
				setState(4557);
				match(IDENTITY);
				}
				break;
			}
			setState(4567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(4560);
				match(LR_BRACKET);
				setState(4561);
				_la = _input.LA(1);
				if ( !(_la==MAX || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4562);
					match(COMMA);
					setState(4563);
					match(DECIMAL);
					}
				}

				setState(4566);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(tsqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(tsqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_default_value);
		try {
			setState(4572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4569);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4570);
				match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(4571);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(tsqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(tsqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(tsqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(tsqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_constant);
		int _la;
		try {
			setState(4589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4574);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4575);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(4576);
					sign();
					}
				}

				setState(4579);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(4580);
					sign();
					}
				}

				setState(4583);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(4584);
					sign();
					}
				}

				setState(4587);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(4588);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4591);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(tsqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(tsqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_id);
		try {
			setState(4596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILLFACTOR:
			case FORCESEEK:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SERVER:
			case SOURCE:
			case TARGET:
			case ABSOLUTE:
			case APPLY:
			case AUTO:
			case AVG:
			case CALLER:
			case CAST:
			case CATCH:
			case CHECKSUM_AGG:
			case COMMITTED:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case DELAY:
			case DELETED:
			case DENSE_RANK:
			case DISABLE:
			case DYNAMIC:
			case ENCRYPTION:
			case EXPAND:
			case FAST:
			case FAST_FORWARD:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORCED:
			case FORWARD_ONLY:
			case FULLSCAN:
			case GLOBAL:
			case GROUPING:
			case GROUPING_ID:
			case HASH:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMPERSONATE:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case ISOLATION:
			case KEEP:
			case KEEPFIXED:
			case KEYSET:
			case LAST:
			case LEVEL:
			case LOCAL:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case MARK:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MIN:
			case MODIFY:
			case NAME:
			case NEXT:
			case NOCOUNT:
			case NOEXPAND:
			case NORECOMPUTE:
			case NTILE:
			case NUMBER:
			case OFFSET:
			case ONLINE:
			case ONLY:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PARAMETERIZATION:
			case PARTITION:
			case PATH:
			case PRECEDING:
			case PRIOR:
			case PRIVILEGES:
			case RANGE:
			case RANK:
			case READONLY:
			case READ_ONLY:
			case RECOMPILE:
			case RELATIVE:
			case REMOTE:
			case REPEATABLE:
			case ROBUST:
			case ROOT:
			case ROW:
			case ROWGUID:
			case ROWS:
			case ROW_NUMBER:
			case SAMPLE:
			case SCHEMABINDING:
			case SCROLL:
			case SCROLL_LOCKS:
			case SELF:
			case SERIALIZABLE:
			case SIMPLE:
			case SIZE:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STATIC:
			case STATS_STREAM:
			case STDEV:
			case STDEVP:
			case SUM:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TRY:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case USING:
			case VAR:
			case VARP:
			case VIEWS:
			case VIEW_METADATA:
			case WORK:
			case XML:
			case XMLNAMESPACES:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4593);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4594);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4595);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(tsqlParser.ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(tsqlParser.ABSOLUTE, 0); }
		public TerminalNode APPLY() { return getToken(tsqlParser.APPLY, 0); }
		public TerminalNode AUTO() { return getToken(tsqlParser.AUTO, 0); }
		public TerminalNode AVG() { return getToken(tsqlParser.AVG, 0); }
		public TerminalNode CALLED() { return getToken(tsqlParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(tsqlParser.CALLER, 0); }
		public TerminalNode CAST() { return getToken(tsqlParser.CAST, 0); }
		public TerminalNode CATCH() { return getToken(tsqlParser.CATCH, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(tsqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode COMMITTED() { return getToken(tsqlParser.COMMITTED, 0); }
		public TerminalNode CONCAT() { return getToken(tsqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTROL() { return getToken(tsqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(tsqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(tsqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(tsqlParser.COUNT_BIG, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(tsqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DELAY() { return getToken(tsqlParser.DELAY, 0); }
		public TerminalNode DELETED() { return getToken(tsqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(tsqlParser.DENSE_RANK, 0); }
		public TerminalNode DISABLE() { return getToken(tsqlParser.DISABLE, 0); }
		public TerminalNode DYNAMIC() { return getToken(tsqlParser.DYNAMIC, 0); }
		public TerminalNode ENCRYPTION() { return getToken(tsqlParser.ENCRYPTION, 0); }
		public TerminalNode EVENTDATA() { return getToken(tsqlParser.EVENTDATA, 0); }
		public TerminalNode EXPAND() { return getToken(tsqlParser.EXPAND, 0); }
		public TerminalNode FAST() { return getToken(tsqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(tsqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILLFACTOR() { return getToken(tsqlParser.FILLFACTOR, 0); }
		public TerminalNode FIRST() { return getToken(tsqlParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(tsqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(tsqlParser.FORCE, 0); }
		public TerminalNode FORCESEEK() { return getToken(tsqlParser.FORCESEEK, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(tsqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(tsqlParser.FULLSCAN, 0); }
		public TerminalNode GLOBAL() { return getToken(tsqlParser.GLOBAL, 0); }
		public TerminalNode GROUPING() { return getToken(tsqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(tsqlParser.GROUPING_ID, 0); }
		public TerminalNode HASH() { return getToken(tsqlParser.HASH, 0); }
		public TerminalNode IMPERSONATE() { return getToken(tsqlParser.IMPERSONATE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(tsqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(tsqlParser.INSERTED, 0); }
		public TerminalNode ISOLATION() { return getToken(tsqlParser.ISOLATION, 0); }
		public TerminalNode KEEP() { return getToken(tsqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(tsqlParser.KEEPFIXED, 0); }
		public TerminalNode FORCED() { return getToken(tsqlParser.FORCED, 0); }
		public TerminalNode KEYSET() { return getToken(tsqlParser.KEYSET, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode INPUT() { return getToken(tsqlParser.INPUT, 0); }
		public TerminalNode LAST() { return getToken(tsqlParser.LAST, 0); }
		public TerminalNode LEVEL() { return getToken(tsqlParser.LEVEL, 0); }
		public TerminalNode LOCAL() { return getToken(tsqlParser.LOCAL, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(tsqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(tsqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(tsqlParser.LOOP, 0); }
		public TerminalNode MARK() { return getToken(tsqlParser.MARK, 0); }
		public TerminalNode MAX() { return getToken(tsqlParser.MAX, 0); }
		public TerminalNode MAXDOP() { return getToken(tsqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(tsqlParser.MAXRECURSION, 0); }
		public TerminalNode MIN() { return getToken(tsqlParser.MIN, 0); }
		public TerminalNode MODIFY() { return getToken(tsqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(tsqlParser.NAME, 0); }
		public TerminalNode NEXT() { return getToken(tsqlParser.NEXT, 0); }
		public TerminalNode NOCOUNT() { return getToken(tsqlParser.NOCOUNT, 0); }
		public TerminalNode NOEXPAND() { return getToken(tsqlParser.NOEXPAND, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(tsqlParser.NORECOMPUTE, 0); }
		public TerminalNode NTILE() { return getToken(tsqlParser.NTILE, 0); }
		public TerminalNode NUMBER() { return getToken(tsqlParser.NUMBER, 0); }
		public TerminalNode OFFSET() { return getToken(tsqlParser.OFFSET, 0); }
		public TerminalNode OFFSETS() { return getToken(tsqlParser.OFFSETS, 0); }
		public TerminalNode ONLINE() { return getToken(tsqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(tsqlParser.ONLY, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(tsqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(tsqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(tsqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(tsqlParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(tsqlParser.OWNER, 0); }
		public TerminalNode PAGE() { return getToken(tsqlParser.PAGE, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(tsqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(tsqlParser.PARTITION, 0); }
		public TerminalNode PATH() { return getToken(tsqlParser.PATH, 0); }
		public TerminalNode PRECEDING() { return getToken(tsqlParser.PRECEDING, 0); }
		public TerminalNode PRIOR() { return getToken(tsqlParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(tsqlParser.PRIVILEGES, 0); }
		public TerminalNode PUBLIC() { return getToken(tsqlParser.PUBLIC, 0); }
		public TerminalNode RANGE() { return getToken(tsqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(tsqlParser.RANK, 0); }
		public TerminalNode RAW() { return getToken(tsqlParser.RAW, 0); }
		public TerminalNode READONLY() { return getToken(tsqlParser.READONLY, 0); }
		public TerminalNode READ_ONLY() { return getToken(tsqlParser.READ_ONLY, 0); }
		public TerminalNode RECOMPILE() { return getToken(tsqlParser.RECOMPILE, 0); }
		public TerminalNode RELATIVE() { return getToken(tsqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(tsqlParser.REMOTE, 0); }
		public TerminalNode REPEATABLE() { return getToken(tsqlParser.REPEATABLE, 0); }
		public TerminalNode RETURN() { return getToken(tsqlParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(tsqlParser.RETURNS, 0); }
		public TerminalNode ROBUST() { return getToken(tsqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(tsqlParser.ROOT, 0); }
		public TerminalNode ROW() { return getToken(tsqlParser.ROW, 0); }
		public TerminalNode ROWCOUNT() { return getToken(tsqlParser.ROWCOUNT, 0); }
		public TerminalNode ROWGUID() { return getToken(tsqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(tsqlParser.ROWS, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(tsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SAMPLE() { return getToken(tsqlParser.SAMPLE, 0); }
		public TerminalNode SIZE() { return getToken(tsqlParser.SIZE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(tsqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCROLL() { return getToken(tsqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(tsqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SELF() { return getToken(tsqlParser.SELF, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(tsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(tsqlParser.SERVER, 0); }
		public TerminalNode SIMPLE() { return getToken(tsqlParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(tsqlParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(tsqlParser.SOURCE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode STATIC() { return getToken(tsqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(tsqlParser.STATS_STREAM, 0); }
		public TerminalNode STDEV() { return getToken(tsqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(tsqlParser.STDEVP, 0); }
		public TerminalNode SUM() { return getToken(tsqlParser.SUM, 0); }
		public TerminalNode TARGET() { return getToken(tsqlParser.TARGET, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(tsqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(tsqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(tsqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(tsqlParser.TIME, 0); }
		public TerminalNode TRY() { return getToken(tsqlParser.TRY, 0); }
		public TerminalNode TYPE() { return getToken(tsqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(tsqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(tsqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(tsqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(tsqlParser.UNKNOWN, 0); }
		public TerminalNode USING() { return getToken(tsqlParser.USING, 0); }
		public TerminalNode VAR() { return getToken(tsqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(tsqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(tsqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(tsqlParser.VIEWS, 0); }
		public TerminalNode WORK() { return getToken(tsqlParser.WORK, 0); }
		public TerminalNode XML() { return getToken(tsqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(tsqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitSimple_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4598);
			_la = _input.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CALLED - 34)) | (1L << (DATA_COMPRESSION - 34)) | (1L << (EVENTDATA - 34)) | (1L << (FILLFACTOR - 34)) | (1L << (FORCESEEK - 34)))) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (OFFSETS - 142)) | (1L << (PAGE - 142)) | (1L << (PUBLIC - 142)) | (1L << (RAW - 142)) | (1L << (RETURN - 142)) | (1L << (RETURNS - 142)) | (1L << (ROWCOUNT - 142)) | (1L << (SERVER - 142)) | (1L << (SOURCE - 142)) | (1L << (TARGET - 142)))) != 0) || ((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (ABSOLUTE - 232)) | (1L << (APPLY - 232)) | (1L << (AUTO - 232)) | (1L << (AVG - 232)) | (1L << (CALLER - 232)) | (1L << (CAST - 232)) | (1L << (CATCH - 232)) | (1L << (CHECKSUM_AGG - 232)) | (1L << (COMMITTED - 232)) | (1L << (CONCAT - 232)) | (1L << (CONCAT_NULL_YIELDS_NULL - 232)) | (1L << (CONTROL - 232)) | (1L << (COOKIE - 232)) | (1L << (COUNT - 232)) | (1L << (COUNT_BIG - 232)) | (1L << (DELAY - 232)) | (1L << (DELETED - 232)) | (1L << (DENSE_RANK - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DISABLE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (EXPAND - 296)) | (1L << (FAST - 296)) | (1L << (FAST_FORWARD - 296)) | (1L << (FIRST - 296)) | (1L << (FOLLOWING - 296)) | (1L << (FORCE - 296)) | (1L << (FORCED - 296)) | (1L << (FORWARD_ONLY - 296)) | (1L << (FULLSCAN - 296)) | (1L << (GLOBAL - 296)) | (1L << (GROUPING - 296)) | (1L << (GROUPING_ID - 296)) | (1L << (HASH - 296)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 296)) | (1L << (IMPERSONATE - 296)) | (1L << (INPUT - 296)) | (1L << (INSENSITIVE - 296)) | (1L << (INSERTED - 296)) | (1L << (ISOLATION - 296)) | (1L << (KEEP - 296)) | (1L << (KEEPFIXED - 296)) | (1L << (KEYSET - 296)) | (1L << (LAST - 296)) | (1L << (LEVEL - 296)) | (1L << (LOCAL - 296)) | (1L << (LOCK_ESCALATION - 296)) | (1L << (LOGIN - 296)) | (1L << (LOOP - 296)) | (1L << (MARK - 296)) | (1L << (MAX - 296)) | (1L << (MAXDOP - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (MAXRECURSION - 360)) | (1L << (MIN - 360)) | (1L << (MODIFY - 360)) | (1L << (NAME - 360)) | (1L << (NEXT - 360)) | (1L << (NOCOUNT - 360)) | (1L << (NOEXPAND - 360)) | (1L << (NORECOMPUTE - 360)) | (1L << (NTILE - 360)) | (1L << (NUMBER - 360)) | (1L << (OFFSET - 360)) | (1L << (ONLINE - 360)) | (1L << (ONLY - 360)) | (1L << (OPTIMISTIC - 360)) | (1L << (OPTIMIZE - 360)) | (1L << (OUT - 360)) | (1L << (OUTPUT - 360)) | (1L << (OWNER - 360)) | (1L << (PARAMETERIZATION - 360)) | (1L << (PARTITION - 360)) | (1L << (PATH - 360)) | (1L << (PRECEDING - 360)) | (1L << (PRIOR - 360)) | (1L << (PRIVILEGES - 360)) | (1L << (RANGE - 360)) | (1L << (RANK - 360)) | (1L << (READONLY - 360)) | (1L << (READ_ONLY - 360)) | (1L << (RECOMPILE - 360)) | (1L << (RELATIVE - 360)) | (1L << (REMOTE - 360)) | (1L << (REPEATABLE - 360)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (ROBUST - 426)) | (1L << (ROOT - 426)) | (1L << (ROW - 426)) | (1L << (ROWGUID - 426)) | (1L << (ROWS - 426)) | (1L << (ROW_NUMBER - 426)) | (1L << (SAMPLE - 426)) | (1L << (SCHEMABINDING - 426)) | (1L << (SCROLL - 426)) | (1L << (SCROLL_LOCKS - 426)) | (1L << (SELF - 426)) | (1L << (SERIALIZABLE - 426)) | (1L << (SIMPLE - 426)) | (1L << (SIZE - 426)) | (1L << (SNAPSHOT - 426)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 426)) | (1L << (STATIC - 426)) | (1L << (STATS_STREAM - 426)) | (1L << (STDEV - 426)) | (1L << (STDEVP - 426)) | (1L << (SUM - 426)) | (1L << (TEXTIMAGE_ON - 426)) | (1L << (THROW - 426)) | (1L << (TIES - 426)) | (1L << (TIME - 426)) | (1L << (TRY - 426)) | (1L << (TYPE - 426)) | (1L << (TYPE_WARNING - 426)) | (1L << (UNBOUNDED - 426)) | (1L << (UNCOMMITTED - 426)) | (1L << (UNKNOWN - 426)) | (1L << (USING - 426)) | (1L << (VAR - 426)) | (1L << (VARP - 426)) | (1L << (VIEWS - 426)) | (1L << (VIEW_METADATA - 426)) | (1L << (WORK - 426)) | (1L << (XML - 426)) | (1L << (XMLNAMESPACES - 426)))) != 0) || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_comparison_operator);
		try {
			setState(4615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4600);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4601);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4602);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4603);
				match(LESS);
				setState(4604);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4605);
				match(GREATER);
				setState(4606);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4607);
				match(LESS);
				setState(4608);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4609);
				match(EXCLAMATION);
				setState(4610);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4611);
				match(EXCLAMATION);
				setState(4612);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4613);
				match(EXCLAMATION);
				setState(4614);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitAssignment_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4617);
			_la = _input.LA(1);
			if ( !(((((_la - 506)) & ~0x3f) == 0 && ((1L << (_la - 506)) & ((1L << (PLUS_ASSIGN - 506)) | (1L << (MINUS_ASSIGN - 506)) | (1L << (MULT_ASSIGN - 506)) | (1L << (DIV_ASSIGN - 506)) | (1L << (MOD_ASSIGN - 506)) | (1L << (AND_ASSIGN - 506)) | (1L << (XOR_ASSIGN - 506)) | (1L << (OR_ASSIGN - 506)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(tsqlParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(tsqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(tsqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(tsqlParser.GB, 0); }
		public TerminalNode TB() { return getToken(tsqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).enterFile_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof tsqlListener ) ((tsqlListener)listener).exitFile_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof tsqlVisitor ) return ((tsqlVisitor<? extends T>)visitor).visitFile_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4619);
			match(DECIMAL);
			setState(4621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (GB - 321)) | (1L << (KB - 321)) | (1L << (MB - 321)))) != 0) || _la==TB || _la==MODULE) {
				{
				setState(4620);
				_la = _input.LA(1);
				if ( !(((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (GB - 321)) | (1L << (KB - 321)) | (1L << (MB - 321)))) != 0) || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 136:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 6);
		case 1:
			return precpred(_ctx, 4);
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		case 4:
			return precpred(_ctx, 13);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0216\u1212\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\3\2\7\2\u01ec\n\2\f\2\16\2\u01ef\13\2\3\2\3\2\3\3\3\3\7\3\u01f5\n\3\f"+
		"\3\16\3\u01f8\13\3\3\4\3\4\5\4\u01fc\n\4\6\4\u01fe\n\4\r\4\16\4\u01ff"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0208\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u020f\n"+
		"\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\5\7\u0224\n\7\3\b\3\b\5\b\u0228\n\b\3\b\5\b\u022b\n\b\3\b\3\b"+
		"\5\b\u022f\n\b\3\b\3\b\5\b\u0233\n\b\3\b\3\b\5\b\u0237\n\b\3\b\3\b\3\b"+
		"\5\b\u023c\n\b\3\b\3\b\3\b\5\b\u0241\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u0248"+
		"\n\b\3\b\5\b\u024b\n\b\3\b\3\b\5\b\u024f\n\b\3\b\5\b\u0252\n\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\5\b\u025a\n\b\3\b\5\b\u025d\n\b\3\b\3\b\3\b\5\b\u0262"+
		"\n\b\3\b\5\b\u0265\n\b\3\b\3\b\3\b\5\b\u026a\n\b\3\b\3\b\3\b\5\b\u026f"+
		"\n\b\3\b\5\b\u0272\n\b\3\b\3\b\3\b\5\b\u0277\n\b\3\b\3\b\5\b\u027b\n\b"+
		"\3\b\5\b\u027e\n\b\3\b\3\b\5\b\u0282\n\b\3\b\5\b\u0285\n\b\3\b\5\b\u0288"+
		"\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u028f\n\b\3\b\3\b\5\b\u0293\n\b\5\b\u0295"+
		"\n\b\3\b\3\b\3\b\5\b\u029a\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b"+
		"\u02a5\n\b\f\b\16\b\u02a8\13\b\3\b\3\b\3\b\5\b\u02ad\n\b\3\b\5\b\u02b0"+
		"\n\b\5\b\u02b2\n\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\n\5\n\u02c2\n\n\3\13\3\13\3\13\3\13\5\13\u02c8\n\13\3\13\5\13\u02cb"+
		"\n\13\3\13\3\13\3\13\5\13\u02d0\n\13\3\f\3\f\3\f\3\f\3\f\5\f\u02d7\n\f"+
		"\5\f\u02d9\n\f\3\f\3\f\3\f\3\f\5\f\u02df\n\f\5\f\u02e1\n\f\3\f\3\f\3\f"+
		"\5\f\u02e6\n\f\3\f\3\f\3\f\5\f\u02eb\n\f\3\f\5\f\u02ee\n\f\3\f\3\f\3\f"+
		"\5\f\u02f3\n\f\3\f\5\f\u02f6\n\f\3\f\3\f\3\f\5\f\u02fb\n\f\3\f\5\f\u02fe"+
		"\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u0305\n\f\5\f\u0307\n\f\3\f\5\f\u030a\n\f"+
		"\3\f\3\f\3\f\3\f\5\f\u0310\n\f\3\f\5\f\u0313\n\f\3\f\5\f\u0316\n\f\3\f"+
		"\5\f\u0319\n\f\3\r\3\r\3\r\3\r\5\r\u031f\n\r\3\r\3\r\5\r\u0323\n\r\3\16"+
		"\3\16\3\16\3\16\3\16\3\16\5\16\u032b\n\16\3\16\3\16\3\16\3\16\3\16\5\16"+
		"\u0332\n\16\3\16\3\16\3\16\3\16\5\16\u0338\n\16\5\16\u033a\n\16\3\17\3"+
		"\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\5\20\u0345\n\20\3\20\3\20\3\20"+
		"\5\20\u034a\n\20\3\20\3\20\3\20\3\20\5\20\u0350\n\20\6\20\u0352\n\20\r"+
		"\20\16\20\u0353\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u035e\n\21"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0366\n\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\5\22\u0372\n\22\3\23\5\23\u0375\n\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\5\23\u037d\n\23\5\23\u037f\n\23\3\23\5\23\u0382"+
		"\n\23\3\23\3\23\5\23\u0386\n\23\3\23\5\23\u0389\n\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\5\23\u0393\n\23\3\23\3\23\7\23\u0397\n\23\f\23"+
		"\16\23\u039a\13\23\3\23\3\23\3\23\3\23\3\23\5\23\u03a1\n\23\3\23\3\23"+
		"\5\23\u03a5\n\23\3\23\3\23\5\23\u03a9\n\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\5\23\u03b2\n\23\3\23\3\23\7\23\u03b6\n\23\f\23\16\23\u03b9\13"+
		"\23\3\23\5\23\u03bc\n\23\3\23\5\23\u03bf\n\23\3\23\3\23\3\24\3\24\3\24"+
		"\3\24\3\24\7\24\u03c8\n\24\f\24\16\24\u03cb\13\24\3\24\5\24\u03ce\n\24"+
		"\3\25\3\25\3\25\3\25\3\25\5\25\u03d5\n\25\3\25\3\25\3\25\5\25\u03da\n"+
		"\25\3\26\5\26\u03dd\n\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u03e5\n\26"+
		"\5\26\u03e7\n\26\3\26\5\26\u03ea\n\26\3\26\3\26\5\26\u03ee\n\26\3\26\5"+
		"\26\u03f1\n\26\3\26\3\26\5\26\u03f5\n\26\3\26\3\26\3\26\3\26\3\26\5\26"+
		"\u03fc\n\26\3\26\3\26\5\26\u0400\n\26\5\26\u0402\n\26\5\26\u0404\n\26"+
		"\3\26\5\26\u0407\n\26\3\26\5\26\u040a\n\26\3\26\5\26\u040d\n\26\3\27\3"+
		"\27\3\27\3\27\5\27\u0413\n\27\3\30\5\30\u0416\n\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\5\30\u041e\n\30\5\30\u0420\n\30\3\30\5\30\u0423\n\30\3\30\3"+
		"\30\5\30\u0427\n\30\3\30\5\30\u042a\n\30\3\30\3\30\3\30\3\30\5\30\u0430"+
		"\n\30\3\30\5\30\u0433\n\30\3\30\3\30\5\30\u0437\n\30\3\30\5\30\u043a\n"+
		"\30\3\30\5\30\u043d\n\30\3\31\3\31\3\31\3\31\3\31\5\31\u0444\n\31\3\32"+
		"\5\32\u0447\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u044e\n\32\3\32\3\32\3"+
		"\32\3\32\5\32\u0454\n\32\7\32\u0456\n\32\f\32\16\32\u0459\13\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\3\32\5\32\u0462\n\32\3\32\5\32\u0465\n\32\3\33"+
		"\5\33\u0468\n\33\3\33\3\33\5\33\u046c\n\33\3\33\5\33\u046f\n\33\3\33\5"+
		"\33\u0472\n\33\3\33\5\33\u0475\n\33\3\34\3\34\5\34\u0479\n\34\3\35\5\35"+
		"\u047c\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0484\n\35\5\35\u0486\n"+
		"\35\3\35\3\35\5\35\u048a\n\35\3\35\5\35\u048d\n\35\3\35\3\35\3\35\3\35"+
		"\7\35\u0493\n\35\f\35\16\35\u0496\13\35\3\35\5\35\u0499\n\35\3\35\3\35"+
		"\5\35\u049d\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u04a4\n\35\3\35\3\35\5"+
		"\35\u04a8\n\35\5\35\u04aa\n\35\5\35\u04ac\n\35\3\35\5\35\u04af\n\35\3"+
		"\35\5\35\u04b2\n\35\3\35\5\35\u04b5\n\35\3\36\3\36\3\36\3\36\7\36\u04bb"+
		"\n\36\f\36\16\36\u04be\13\36\3\36\3\36\3\36\5\36\u04c3\n\36\3\36\3\36"+
		"\3\36\3\36\5\36\u04c9\n\36\5\36\u04cb\n\36\3\37\3\37\5\37\u04cf\n\37\3"+
		"\37\5\37\u04d2\n\37\3\37\5\37\u04d5\n\37\3 \3 \3 \5 \u04da\n \3 \3 \3"+
		" \5 \u04df\n \3 \5 \u04e2\n \3!\3!\3!\3!\3!\3!\5!\u04ea\n!\3!\3!\5!\u04ee"+
		"\n!\3!\3!\3!\7!\u04f3\n!\f!\16!\u04f6\13!\5!\u04f8\n!\3!\3!\3!\3!\3!\7"+
		"!\u04ff\n!\f!\16!\u0502\13!\5!\u0504\n!\3!\3!\5!\u0508\n!\3!\3!\3!\3!"+
		"\7!\u050e\n!\f!\16!\u0511\13!\5!\u0513\n!\3\"\3\"\5\"\u0517\n\"\3\"\5"+
		"\"\u051a\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0528"+
		"\n\"\3\"\3\"\5\"\u052c\n\"\3\"\5\"\u052f\n\"\3\"\3\"\5\"\u0533\n\"\3\""+
		"\5\"\u0536\n\"\3#\3#\3#\3#\3#\5#\u053d\n#\3#\5#\u0540\n#\3#\3#\3#\7#\u0545"+
		"\n#\f#\16#\u0548\13#\3#\5#\u054b\n#\5#\u054d\n#\3#\3#\3#\3#\7#\u0553\n"+
		"#\f#\16#\u0556\13#\5#\u0558\n#\3#\3#\5#\u055c\n#\3#\3#\3#\3$\3$\5$\u0563"+
		"\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\7%\u056e\n%\f%\16%\u0571\13%\5%\u0573\n"+
		"%\3%\3%\3%\3%\5%\u0579\n%\3%\3%\3%\7%\u057e\n%\f%\16%\u0581\13%\3%\3%"+
		"\5%\u0585\n%\3%\3%\3%\5%\u058a\n%\3%\3%\3%\3&\3&\5&\u0591\n&\3\'\3\'\3"+
		"(\3(\3(\3(\3(\3(\3(\5(\u059c\n(\3(\3(\3(\3(\7(\u05a2\n(\f(\16(\u05a5\13"+
		"(\5(\u05a7\n(\3(\3(\3(\3(\7(\u05ad\n(\f(\16(\u05b0\13(\3(\3(\3(\3)\3)"+
		"\3*\3*\3*\3*\3*\3*\3*\7*\u05be\n*\f*\16*\u05c1\13*\3*\3*\3*\3*\5*\u05c7"+
		"\n*\3*\3*\3*\5*\u05cc\n*\3*\5*\u05cf\n*\3+\3+\3+\3+\3+\3+\7+\u05d7\n+"+
		"\f+\16+\u05da\13+\5+\u05dc\n+\3+\5+\u05df\n+\3+\3+\3+\3,\3,\3,\3,\3,\3"+
		",\3,\7,\u05eb\n,\f,\16,\u05ee\13,\5,\u05f0\n,\3,\5,\u05f3\n,\3,\3,\7,"+
		"\u05f7\n,\f,\16,\u05fa\13,\3,\3,\3,\3-\3-\3-\3-\3-\3-\7-\u0605\n-\f-\16"+
		"-\u0608\13-\5-\u060a\n-\3-\5-\u060d\n-\3-\3-\7-\u0611\n-\f-\16-\u0614"+
		"\13-\3-\3-\3-\5-\u0619\n-\3-\3-\3.\3.\3.\3.\5.\u0621\n.\3.\5.\u0624\n"+
		".\3.\3.\5.\u0628\n.\3.\3.\5.\u062c\n.\3.\5.\u062f\n.\3/\3/\3/\5/\u0634"+
		"\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0642"+
		"\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61"+
		"\3\61\5\61\u0652\n\61\3\61\3\61\5\61\u0656\n\61\3\61\3\61\3\61\3\61\5"+
		"\61\u065c\n\61\5\61\u065e\n\61\3\61\5\61\u0661\n\61\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\5\62\u0669\n\62\3\62\3\62\7\62\u066d\n\62\f\62\16\62\u0670"+
		"\13\62\3\62\3\62\3\62\5\62\u0675\n\62\3\62\3\62\3\62\5\62\u067a\n\62\3"+
		"\62\5\62\u067d\n\62\3\63\3\63\3\63\3\63\3\63\7\63\u0684\n\63\f\63\16\63"+
		"\u0687\13\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\5\64\u0690\n\64\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\5\65\u0699\n\65\3\65\3\65\3\65\3\65\7\65"+
		"\u069f\n\65\f\65\16\65\u06a2\13\65\5\65\u06a4\n\65\3\65\3\65\3\65\3\65"+
		"\3\65\5\65\u06ab\n\65\3\65\5\65\u06ae\n\65\3\66\3\66\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u06db\n\67\3\67"+
		"\5\67\u06de\n\67\38\38\38\38\58\u06e4\n8\38\38\38\38\38\38\38\38\38\3"+
		"8\58\u06f0\n8\58\u06f2\n8\38\58\u06f5\n8\39\39\39\39\39\39\39\39\39\3"+
		"9\39\39\39\39\39\39\39\39\39\39\39\39\59\u070d\n9\3:\3:\3:\3:\3:\3:\3"+
		":\3:\3:\5:\u0718\n:\3:\3:\3:\3:\3:\3:\5:\u0720\n:\3;\3;\3;\3;\3;\3;\3"+
		";\7;\u0729\n;\f;\16;\u072c\13;\7;\u072e\n;\f;\16;\u0731\13;\5;\u0733\n"+
		";\3<\3<\3<\3<\3<\3<\5<\u073b\n<\3=\3=\3=\3=\3>\3>\3>\3>\5>\u0745\n>\3"+
		"?\3?\3?\3@\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3"+
		"E\5E\u075f\nE\3E\3E\3E\3E\5E\u0765\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0770"+
		"\nE\3F\3F\3F\3F\3F\3G\3G\3G\3H\3H\3H\3I\3I\3I\3I\3I\3I\5I\u0783\nI\3J"+
		"\3J\3J\3J\3J\3J\5J\u078b\nJ\3K\3K\3K\3K\3K\5K\u0792\nK\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u07a9\nL\3M\3M\3M"+
		"\3M\3M\3N\3N\3N\3N\3N\3N\5N\u07b6\nN\3O\3O\3O\3O\5O\u07bc\nO\3O\3O\3O"+
		"\5O\u07c1\nO\3O\3O\3O\3O\3O\3O\3O\3O\5O\u07cb\nO\3O\5O\u07ce\nO\3P\3P"+
		"\3P\3P\5P\u07d4\nP\3P\3P\3P\7P\u07d9\nP\fP\16P\u07dc\13P\3P\5P\u07df\n"+
		"P\3Q\3Q\5Q\u07e3\nQ\3R\3R\3R\3R\5R\u07e9\nR\3R\3R\3R\7R\u07ee\nR\fR\16"+
		"R\u07f1\13R\3R\5R\u07f4\nR\3S\3S\3S\3S\5S\u07fa\nS\3S\3S\3S\7S\u07ff\n"+
		"S\fS\16S\u0802\13S\3S\3S\3S\3S\5S\u0808\nS\3S\5S\u080b\nS\3T\3T\3T\3T"+
		"\5T\u0811\nT\3T\3T\3T\7T\u0816\nT\fT\16T\u0819\13T\3T\5T\u081c\nT\3U\3"+
		"U\3U\3U\3U\5U\u0823\nU\3U\3U\3U\3V\3V\3V\3V\5V\u082c\nV\3V\3V\5V\u0830"+
		"\nV\3W\3W\3W\3W\5W\u0836\nW\3W\3W\3W\7W\u083b\nW\fW\16W\u083e\13W\3W\5"+
		"W\u0841\nW\3X\3X\3X\3X\3X\3X\3X\5X\u084a\nX\3X\3X\3X\3X\3X\3X\5X\u0852"+
		"\nX\3Y\3Y\3Y\3Y\5Y\u0858\nY\3Y\3Y\3Z\3Z\5Z\u085e\nZ\3[\3[\3[\3[\3[\3["+
		"\3[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u086f\n\\\3\\\3\\\5\\\u0873\n"+
		"\\\3\\\3\\\3\\\3]\3]\3]\5]\u087b\n]\3]\3]\5]\u087f\n]\3]\3]\3]\3]\7]\u0885"+
		"\n]\f]\16]\u0888\13]\3]\5]\u088b\n]\3]\3]\3]\5]\u0890\n]\3]\3]\5]\u0894"+
		"\n]\3]\3]\3]\3]\3]\5]\u089b\n]\3]\3]\3]\3]\5]\u08a1\n]\5]\u08a3\n]\3^"+
		"\3^\5^\u08a7\n^\3^\3^\5^\u08ab\n^\3^\3^\5^\u08af\n^\3^\3^\5^\u08b3\n^"+
		"\3^\3^\3^\3^\5^\u08b9\n^\3^\3^\5^\u08bd\n^\5^\u08bf\n^\3_\3_\3_\5_\u08c4"+
		"\n_\3_\3_\5_\u08c8\n_\3_\3_\3_\7_\u08cd\n_\f_\16_\u08d0\13_\5_\u08d2\n"+
		"_\3_\5_\u08d5\n_\3_\3_\3_\3_\3_\7_\u08dc\n_\f_\16_\u08df\13_\3_\3_\5_"+
		"\u08e3\n_\3_\3_\3_\5_\u08e8\n_\3_\5_\u08eb\n_\5_\u08ed\n_\3`\3`\5`\u08f1"+
		"\n`\3`\3`\5`\u08f5\n`\3`\5`\u08f8\n`\3`\3`\5`\u08fc\n`\3a\3a\3b\3b\5b"+
		"\u0902\nb\3b\3b\3b\5b\u0907\nb\3b\3b\3b\3b\3b\5b\u090e\nb\5b\u0910\nb"+
		"\3b\3b\5b\u0914\nb\3b\3b\3b\3b\7b\u091a\nb\fb\16b\u091d\13b\3b\3b\3b\5"+
		"b\u0922\nb\3b\3b\5b\u0926\nb\3b\5b\u0929\nb\3b\3b\3b\3b\3b\3b\3b\5b\u0932"+
		"\nb\3b\5b\u0935\nb\3b\3b\3b\3b\5b\u093b\nb\3c\3c\3c\3c\3c\5c\u0942\nc"+
		"\3c\3c\3c\5c\u0947\nc\3c\3c\3c\3c\3c\3c\5c\u094f\nc\3d\3d\3d\5d\u0954"+
		"\nd\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0960\nd\5d\u0962\nd\3e\3e\3e\3e"+
		"\3e\3e\3e\3e\3e\5e\u096d\ne\3f\3f\3f\3f\3f\5f\u0974\nf\3f\3f\3f\3f\3f"+
		"\3f\7f\u097c\nf\ff\16f\u097f\13f\3g\3g\3g\3g\3h\3h\3h\3h\3h\3h\3h\3h\3"+
		"h\3h\3h\3h\3h\3h\3h\5h\u0994\nh\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\5i\u09a0"+
		"\ni\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u09af\nj\3j\3j\3j\5j\u09b4"+
		"\nj\3j\3j\3j\3j\3j\5j\u09bb\nj\3j\5j\u09be\nj\6j\u09c0\nj\rj\16j\u09c1"+
		"\5j\u09c4\nj\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\3k\5k\u09d5\nk"+
		"\3l\3l\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u09e4\nm\3n\3n\3n\3n\3n\3n"+
		"\5n\u09ec\nn\3n\3n\3n\3n\3n\3n\3n\5n\u09f5\nn\3n\3n\3n\3n\3n\3n\5n\u09fd"+
		"\nn\3o\3o\3o\3o\3o\3o\3o\5o\u0a06\no\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0a11"+
		"\no\3o\3o\5o\u0a15\no\5o\u0a17\no\5o\u0a19\no\3p\3p\3p\3p\5p\u0a1f\np"+
		"\3p\3p\3p\5p\u0a24\np\3p\3p\3p\3p\3p\5p\u0a2b\np\3p\3p\3p\3p\3p\3p\3p"+
		"\3p\3p\3p\3p\5p\u0a38\np\5p\u0a3a\np\5p\u0a3c\np\3p\5p\u0a3f\np\3p\5p"+
		"\u0a42\np\3q\3q\3q\3q\3q\5q\u0a49\nq\3q\5q\u0a4c\nq\3q\3q\3q\3q\5q\u0a52"+
		"\nq\3q\3q\3q\5q\u0a57\nq\5q\u0a59\nq\3q\5q\u0a5c\nq\3q\3q\3q\3q\5q\u0a62"+
		"\nq\3q\3q\3q\3q\3q\3q\5q\u0a6a\nq\5q\u0a6c\nq\3q\5q\u0a6f\nq\3q\3q\5q"+
		"\u0a73\nq\3q\5q\u0a76\nq\3q\3q\3q\3q\5q\u0a7c\nq\3q\5q\u0a7f\nq\3q\3q"+
		"\5q\u0a83\nq\3q\5q\u0a86\nq\3q\3q\3q\3q\5q\u0a8c\nq\3q\5q\u0a8f\nq\5q"+
		"\u0a91\nq\3r\3r\5r\u0a95\nr\3s\3s\3s\5s\u0a9a\ns\3t\3t\3t\3t\3t\3t\5t"+
		"\u0aa2\nt\3t\3t\5t\u0aa6\nt\3t\5t\u0aa9\nt\3u\3u\3u\5u\u0aae\nu\3v\3v"+
		"\3v\3v\3w\3w\5w\u0ab6\nw\3w\3w\3w\5w\u0abb\nw\3w\5w\u0abe\nw\3x\3x\3x"+
		"\3x\3x\3y\3y\3y\5y\u0ac8\ny\3y\3y\3y\3z\3z\3z\3z\3{\3{\5{\u0ad3\n{\3{"+
		"\7{\u0ad6\n{\f{\16{\u0ad9\13{\3|\3|\5|\u0add\n|\3}\3}\3}\3}\5}\u0ae3\n"+
		"}\3}\3}\5}\u0ae7\n}\3}\5}\u0aea\n}\3}\3}\5}\u0aee\n}\3}\3}\5}\u0af2\n"+
		"}\3}\3}\3}\3}\3}\3}\5}\u0afa\n}\3}\3}\3}\5}\u0aff\n}\5}\u0b01\n}\3}\5"+
		"}\u0b04\n}\3}\7}\u0b07\n}\f}\16}\u0b0a\13}\3~\3~\5~\u0b0e\n~\3~\3~\3~"+
		"\5~\u0b13\n~\3~\5~\u0b16\n~\3~\5~\u0b19\n~\3~\3~\3~\3~\5~\u0b1f\n~\3~"+
		"\3~\3~\3~\3~\3~\5~\u0b27\n~\3~\3~\3~\3~\3~\3~\5~\u0b2f\n~\3~\5~\u0b32"+
		"\n~\3~\5~\u0b35\n~\3\177\3\177\5\177\u0b39\n\177\3\177\3\177\3\177\5\177"+
		"\u0b3e\n\177\3\177\5\177\u0b41\n\177\3\177\3\177\3\177\3\177\5\177\u0b47"+
		"\n\177\3\177\3\177\5\177\u0b4b\n\177\3\177\3\177\3\177\3\177\5\177\u0b51"+
		"\n\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u0b59\n\177\3\177\3\177"+
		"\3\177\3\177\6\177\u0b5f\n\177\r\177\16\177\u0b60\3\177\5\177\u0b64\n"+
		"\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\5\177\u0b73\n\177\3\177\5\177\u0b76\n\177\5\177\u0b78\n\177"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\5\u0080\u0b83\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\5\u0081\u0b8e\n\u0081\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\7\u0082\u0b95\n\u0082\f\u0082\16\u0082\u0b98\13\u0082"+
		"\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0ba1"+
		"\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\5\u0084\u0bab\n\u0084\5\u0084\u0bad\n\u0084\5\u0084\u0baf\n\u0084\3\u0084"+
		"\5\u0084\u0bb2\n\u0084\3\u0084\5\u0084\u0bb5\n\u0084\3\u0084\3\u0084\3"+
		"\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0bc0\n"+
		"\u0084\5\u0084\u0bc2\n\u0084\5\u0084\u0bc4\n\u0084\3\u0084\5\u0084\u0bc7"+
		"\n\u0084\3\u0085\7\u0085\u0bca\n\u0085\f\u0085\16\u0085\u0bcd\13\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086"+
		"\u0bd7\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\5\u0087\u0be0\n\u0087\3\u0087\5\u0087\u0be3\n\u0087\3\u0087\5\u0087\u0be6"+
		"\n\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087\u0bed\n\u0087"+
		"\f\u0087\16\u0087\u0bf0\13\u0087\5\u0087\u0bf2\n\u0087\3\u0087\5\u0087"+
		"\u0bf5\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0bfc\n"+
		"\u0088\3\u0088\5\u0088\u0bff\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0c0d\n\u0088\3\u0088\5\u0088\u0c10\n\u0088\3\u0088\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\5\u0088\u0c17\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0c27\n\u0088\3\u0089\3\u0089\5\u0089\u0c2b\n\u0089\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\6\u008a\u0c36\n\u008a\r\u008a\16\u008a\u0c37\3\u008a\3\u008a\5\u008a"+
		"\u0c3c\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\6\u008a\u0c42\n\u008a\r"+
		"\u008a\16\u008a\u0c43\3\u008a\3\u008a\5\u008a\u0c48\n\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0c5a\n\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a"+
		"\u0c6d\n\u008a\f\u008a\16\u008a\u0c70\13\u008a\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0c7a\n\u008b\3\u008c"+
		"\3\u008c\3\u008d\3\u008d\3\u008d\5\u008d\u0c81\n\u008d\3\u008d\3\u008d"+
		"\3\u008d\7\u008d\u0c86\n\u008d\f\u008d\16\u008d\u0c89\13\u008d\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0c90\n\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\5\u008f\u0c99\n\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0c9d\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0ca7\n\u008f\3\u0090\3\u0090\3\u0090"+
		"\7\u0090\u0cac\n\u0090\f\u0090\16\u0090\u0caf\13\u0090\3\u0091\3\u0091"+
		"\3\u0091\7\u0091\u0cb4\n\u0091\f\u0091\16\u0091\u0cb7\13\u0091\3\u0092"+
		"\3\u0092\3\u0092\7\u0092\u0cbc\n\u0092\f\u0092\16\u0092\u0cbf\13\u0092"+
		"\3\u0093\5\u0093\u0cc2\n\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cd8\n\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ce1"+
		"\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ce7\n\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0ced\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0cf3\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0cfd\n\u0094\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0d04\n\u0095\3\u0095\7\u0095\u0d07\n\u0095\f"+
		"\u0095\16\u0095\u0d0a\13\u0095\3\u0096\3\u0096\5\u0096\u0d0e\n\u0096\3"+
		"\u0096\3\u0096\5\u0096\u0d12\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3"+
		"\u0096\5\u0096\u0d19\n\u0096\3\u0097\3\u0097\5\u0097\u0d1d\n\u0097\3\u0097"+
		"\5\u0097\u0d20\n\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d25\n\u0097\3"+
		"\u0097\3\u0097\5\u0097\u0d29\n\u0097\3\u0097\3\u0097\5\u0097\u0d2d\n\u0097"+
		"\3\u0097\3\u0097\3\u0097\5\u0097\u0d32\n\u0097\3\u0097\3\u0097\3\u0097"+
		"\7\u0097\u0d37\n\u0097\f\u0097\16\u0097\u0d3a\13\u0097\5\u0097\u0d3c\n"+
		"\u0097\3\u0097\3\u0097\5\u0097\u0d40\n\u0097\3\u0098\3\u0098\3\u0098\5"+
		"\u0098\u0d45\n\u0098\3\u0098\3\u0098\5\u0098\u0d49\n\u0098\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d52\n\u0099\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0d59\n\u009a\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\7\u009b\u0d60\n\u009b\f\u009b\16\u009b\u0d63"+
		"\13\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\5\u009b\u0d6e\n\u009b\5\u009b\u0d70\n\u009b\3\u009c\3\u009c\3"+
		"\u009c\3\u009c\3\u009c\5\u009c\u0d77\n\u009c\3\u009c\3\u009c\3\u009c\3"+
		"\u009c\5\u009c\u0d7d\n\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0d82\n\u009c"+
		"\3\u009c\7\u009c\u0d85\n\u009c\f\u009c\16\u009c\u0d88\13\u009c\5\u009c"+
		"\u0d8a\n\u009c\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e\5\u009e\u0d91\n"+
		"\u009e\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0"+
		"\u0d9a\n\u00a0\f\u00a0\16\u00a0\u0d9d\13\u00a0\3\u00a0\3\u00a0\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\7\u00a1"+
		"\u0dbc\n\u00a1\f\u00a1\16\u00a1\u0dbf\13\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\5\u00a1\u0dce\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0dd5\n\u00a2\5\u00a2\u0dd7\n\u00a2\3\u00a3\3\u00a3\3\u00a3\7"+
		"\u00a3\u0ddc\n\u00a3\f\u00a3\16\u00a3\u0ddf\13\u00a3\3\u00a4\3\u00a4\3"+
		"\u00a4\5\u00a4\u0de4\n\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0de9\n\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0df1\n\u00a4"+
		"\3\u00a4\5\u00a4\u0df4\n\u00a4\5\u00a4\u0df6\n\u00a4\3\u00a5\3\u00a5\3"+
		"\u00a5\7\u00a5\u0dfb\n\u00a5\f\u00a5\16\u00a5\u0dfe\13\u00a5\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0e05\n\u00a6\3\u00a7\3\u00a7\7"+
		"\u00a7\u0e09\n\u00a7\f\u00a7\16\u00a7\u0e0c\13\u00a7\3\u00a8\3\u00a8\5"+
		"\u00a8\u0e10\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0e14\n\u00a8\3\u00a8\3\u00a8"+
		"\5\u00a8\u0e18\n\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0e1d\n\u00a8\5"+
		"\u00a8\u0e1f\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0e26"+
		"\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0e2a\n\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\5\u00a8\u0e31\n\u00a8\5\u00a8\u0e33\n\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0e3a\n\u00a8\5\u00a8\u0e3c\n\u00a8"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0e45"+
		"\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0e4d"+
		"\n\u00a9\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0e52\n\u00aa\f\u00aa\16\u00aa"+
		"\u0e55\13\u00aa\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0e5a\n\u00ab\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\5\u00ad"+
		"\u0e65\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0e69\n\u00ad\5\u00ad\u0e6b\n\u00ad"+
		"\3\u00ad\5\u00ad\u0e6e\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad"+
		"\u0e86\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0e9d\n\u00b0\f\u00b0"+
		"\16\u00b0\u0ea0\13\u00b0\3\u00b1\3\u00b1\5\u00b1\u0ea4\n\u00b1\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u0eb6\n\u00b2"+
		"\f\u00b2\16\u00b2\u0eb9\13\u00b2\3\u00b2\5\u00b2\u0ebc\n\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u0ec0\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\5\u00b4\u0ed0\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5"+
		"\u0ed7\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0eed\n\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\5\u00b5\u0f27\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u0f2b\n\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0f4c\n\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\5\u00b6\u0f53\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\5\u00b7\u0f59\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0f64\n\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be"+
		"\5\u00be\u0f84\n\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\5\u00bf\u0f8a\n"+
		"\u00bf\3\u00c0\5\u00c0\u0f8d\n\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0f92"+
		"\n\u00c0\3\u00c0\7\u00c0\u0f95\n\u00c0\f\u00c0\16\u00c0\u0f98\13\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0fa0\n\u00c1"+
		"\3\u00c1\7\u00c1\u0fa3\n\u00c1\f\u00c1\16\u00c1\u0fa6\13\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c2\5\u00c2\u0fab\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\7\u00c2\u0fb2\n\u00c2\f\u00c2\16\u00c2\u0fb5\13\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\7\u00c2\u0fc3\n\u00c2\f\u00c2\16\u00c2\u0fc6\13\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0fcb\n\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0fd3\n\u00c2\3\u00c3\3\u00c3\5\u00c3"+
		"\u0fd7\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u0fdd\n\u00c4\f"+
		"\u00c4\16\u00c4\u0fe0\13\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\5\u00c5"+
		"\u0fe6\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\7\u00c6\u0ff1\n\u00c6\f\u00c6\16\u00c6\u0ff4\13\u00c6"+
		"\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u0ff9\n\u00c7\f\u00c7\16\u00c7\u0ffc"+
		"\13\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\5\u00c8\u1008\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\5\u00c9\u100f\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u1015\n\u00c9\3\u00c9\3\u00c9\5\u00c9\u1019\n\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u102a\n\u00c9\3\u00ca\5\u00ca"+
		"\u102d\n\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u1036\n\u00cb\3\u00cb\5\u00cb\u1039\n\u00cb\3\u00cb\5\u00cb\u103c"+
		"\n\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1049\n\u00cd\3\u00ce\3\u00ce\5\u00ce"+
		"\u104d\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf"+
		"\u1055\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u105b\n\u00d0\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u1061\n\u00d1\f\u00d1\16\u00d1"+
		"\u1064\13\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u106a\n\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1070\n\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\5\u00d1\u107f\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1088\n\u00d2\3\u00d2\3\u00d2\3\u00d3"+
		"\3\u00d3\5\u00d3\u108e\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u1094\n\u00d4\3\u00d4\5\u00d4\u1097\n\u00d4\3\u00d4\3\u00d4\5\u00d4\u109b"+
		"\n\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u10a0\n\u00d4\f\u00d4\16\u00d4"+
		"\u10a3\13\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u10aa"+
		"\n\u00d5\3\u00d5\5\u00d5\u10ad\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u10b3\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u10b9\n"+
		"\u00d5\5\u00d5\u10bb\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u10c1"+
		"\n\u00d5\3\u00d5\5\u00d5\u10c4\n\u00d5\5\u00d5\u10c6\n\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\5\u00d5\u10cc\n\u00d5\5\u00d5\u10ce\n\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u10dc\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u10e3\n\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7"+
		"\5\u00d7\u10ea\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7"+
		"\u10f1\n\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u10f8\n"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u10ff\n\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1106\n\u00d9\3\u00d9\3"+
		"\u00d9\3\u00da\3\u00da\5\u00da\u110c\n\u00da\3\u00db\3\u00db\3\u00db\5"+
		"\u00db\u1111\n\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\5\u00dc\u1117\n\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u111c\n\u00dc\7\u00dc\u111e\n\u00dc\f"+
		"\u00dc\16\u00dc\u1121\13\u00dc\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u1126\n"+
		"\u00dd\f\u00dd\16\u00dd\u1129\13\u00dd\3\u00de\3\u00de\5\u00de\u112d\n"+
		"\u00de\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e1\5\u00e1\u1134\n\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u113d\n"+
		"\u00e2\5\u00e2\u113f\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5"+
		"\u00e3\u1146\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1152\n\u00e4\3\u00e5\3\u00e5\3"+
		"\u00e5\5\u00e5\u1157\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1162\n\u00e5\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u116c\n\u00e5\5"+
		"\u00e5\u116e\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1174\n\u00e5"+
		"\5\u00e5\u1176\n\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u117b\n\u00e5\5"+
		"\u00e5\u117d\n\u00e5\3\u00e5\5\u00e5\u1180\n\u00e5\3\u00e6\3\u00e6\5\u00e6"+
		"\u1184\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u1188\n\u00e7\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\5\u00e8\u118e\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u1197\n\u00e8\3\u00e8\5\u00e8\u119a\n\u00e8"+
		"\5\u00e8\u119c\n\u00e8\3\u00e9\5\u00e9\u119f\n\u00e9\3\u00e9\3\u00e9\3"+
		"\u00e9\3\u00e9\5\u00e9\u11a5\n\u00e9\3\u00e9\3\u00e9\5\u00e9\u11a9\n\u00e9"+
		"\3\u00e9\5\u00e9\u11ac\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\5\u00ea\u11b5\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u11be\n\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u11ca"+
		"\n\u00ec\3\u00ec\5\u00ec\u11cd\n\u00ec\3\u00ed\3\u00ed\5\u00ed\u11d1\n"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u11d7\n\u00ed\3\u00ed\5"+
		"\u00ed\u11da\n\u00ed\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u11df\n\u00ee\3\u00ef"+
		"\3\u00ef\3\u00ef\5\u00ef\u11e4\n\u00ef\3\u00ef\3\u00ef\5\u00ef\u11e8\n"+
		"\u00ef\3\u00ef\3\u00ef\5\u00ef\u11ec\n\u00ef\3\u00ef\3\u00ef\5\u00ef\u11f0"+
		"\n\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u11f7\n\u00f1"+
		"\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u120a\n\u00f3\3\u00f4\3\u00f4\3\u00f5\3\u00f5\5\u00f5\u1210\n\u00f5\3"+
		"\u00f5\2\3\u0112\u00f6\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,"+
		".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146"+
		"\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e"+
		"\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176"+
		"\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e"+
		"\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6"+
		"\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be"+
		"\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6"+
		"\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\2K\3\2\u01f1\u01f2"+
		"\4\2\u01f1\u01f1\u01f4\u01f4\5\2\u0124\u0124\u01d2\u01d2\u01d4\u01d4\4"+
		"\2\u01f1\u01f2\u01f4\u01f4\4\2\u0084\u0084\u01bb\u01bb\4\2\u008f\u008f"+
		"\u0091\u0091\5\2\27\27\u00cf\u00cf\u0153\u0153\4\2\u008a\u008a\u009d\u009d"+
		"\4\2\25\25;;\3\2\u00a5\u00a6\5\2IIvv\u00dc\u00dc\4\2aa\u00ee\u00ee\4\2"+
		"\u018a\u018b\u019d\u019d\4\2\u009f\u009f\u01b0\u01b0\5\2\u0132\u0132\u01b3"+
		"\u01b3\u01e6\u01e6\5\2\u00cd\u00cd\u00f9\u00f9\u012a\u012a\5\2\u011f\u011f"+
		"\u014d\u014d\u0170\u0170\4\2\u0146\u0146\u0161\u0161\5\2\u012f\u012f\u0183"+
		"\u0183\u0185\u0185\3\2\u019f\u01a0\5\2\u0175\u0175\u01aa\u01aa\u01be\u01be"+
		"\5\2\u00f0\u00f0\u012b\u012b\u0140\u0140\4\2\u0140\u0140\u01bd\u01bd\5"+
		"\2gg\u0103\u0103\u01bd\u01bd\5\2\u008a\u008a\u0109\u0109\u01d5\u01d5\4"+
		"\2\u0170\u0170\u01b6\u01b6\4\2\u00df\u00df\u0163\u0163\3\2\u018a\u018b"+
		"\4\2^^\u01f5\u01f5\4\2\u0121\u0121\u0132\u0132\4\2\u0136\u0136\u01c2\u01c2"+
		"\4\2\u0116\u0116\u0187\u0187\3\2\3\f\4\2\u00cd\u00cd\u00e2\u00e2\3\2\u00d4"+
		"\u00d5\6\2\u0104\u0104\u018c\u018c\u01b7\u01b7\u01f4\u01f4\4\2\u0111\u0111"+
		"\u012d\u012d\4\2\u0141\u0141\u01b4\u01b4\6\2\u012e\u012e\u0139\u0139\u015b"+
		"\u015b\u01c3\u01c3\5\2\u0188\u0188\u019f\u019f\u01b5\u01b5\4\2\u00ea\u00ea"+
		"\u01a6\u01a6\3\2\u0211\u0212\3\2\u020e\u0210\4\2\u0211\u0212\u0214\u0216"+
		"\5\2\24\24\27\27\u00c9\u00c9\4\2\24\24MM\3\2\u01f6\u01f7\4\2\u01ae\u01ae"+
		"\u01b0\u01b0\4\2\u013d\u013d\u0179\u0179\6\2\u00a9\u00a9\u00f9\u00f9\u0137"+
		"\u0137\u0190\u0190\5\2\u0101\u0101\u01ad\u01ad\u01da\u01da\4\2\32\32K"+
		"K\4\2\u0099\u0099\u014b\u014b\5\2\u0086\u0086\u010f\u010f\u014b\u014b"+
		"\5\2\u0086\u0086\u014b\u014b\u0164\u0164\4\2nn\u01af\u01af\4\2\u008c\u008c"+
		"\u01f1\u01f2\5\2gg\177\177\u00b7\u00b7\6\2\u0086\u0086\u014b\u014b\u0164"+
		"\u0164\u01a8\u01a8\4\2\u01f2\u01f2\u01f4\u01f4\4\2\u01f1\u01f1\u01f3\u01f3"+
		"\5\2\u0127\u0127\u019c\u019c\u01b1\u01b1\b\2\u0100\u0100\u0167\u0167\u016f"+
		"\u016f\u01c6\u01c7\u01ca\u01ca\u01e3\u01e4\3\2\u0114\u0115\4\2\u019b\u019b"+
		"\u01b0\u01b0\5\2gg\u008f\u008f\u019f\u019f\4\2--\u0089\u0089\3\2\u00ae"+
		"\u00af\4\2\u0167\u0167\u01f2\u01f2\4\2\u01f2\u01f2\u01f6\u01f6K\2$$CC"+
		"WW``bb\u0090\u0090\u009c\u009c\u00a7\u00a7\u00a9\u00a9\u00b3\u00b4\u00b9"+
		"\u00b9\u00c3\u00c3\u00ca\u00ca\u00cf\u00cf\u00ea\u00ea\u00f6\u00f6\u00f9"+
		"\u00f9\u0100\u0100\u0104\u0106\u010a\u010a\u010d\u010d\u010f\u0110\u0112"+
		"\u0115\u0124\u0124\u0126\u0127\u012a\u012a\u012e\u012e\u0132\u0132\u0135"+
		"\u0135\u0138\u0139\u013d\u0142\u0146\u0146\u0148\u0149\u014b\u014b\u014f"+
		"\u014f\u0151\u0151\u0154\u0157\u0159\u015b\u015e\u015f\u0161\u0165\u0167"+
		"\u0167\u0169\u016a\u016f\u016f\u0173\u0173\u0176\u0176\u0179\u017b\u017d"+
		"\u017d\u0180\u0181\u0184\u0186\u0188\u018c\u018e\u0190\u0192\u0193\u0195"+
		"\u0195\u019b\u019d\u019f\u019f\u01a2\u01a2\u01a6\u01a6\u01a8\u01a9\u01ac"+
		"\u01b5\u01b7\u01b7\u01ba\u01ba\u01bd\u01bd\u01bf\u01c1\u01c3\u01c4\u01c6"+
		"\u01c7\u01ca\u01ca\u01cf\u01d2\u01d8\u01d8\u01da\u01de\u01e0\u01e0\u01e3"+
		"\u01e6\u01e8\u01ea\u01f3\u01f3\3\2\u01fc\u0203\7\2\u0143\u0143\u0158\u0158"+
		"\u016d\u016d\u01ce\u01ce\u0210\u0210\2\u14df\2\u01ed\3\2\2\2\4\u01f2\3"+
		"\2\2\2\6\u01fd\3\2\2\2\b\u0207\3\2\2\2\n\u020e\3\2\2\2\f\u0223\3\2\2\2"+
		"\16\u02b1\3\2\2\2\20\u02b3\3\2\2\2\22\u02c1\3\2\2\2\24\u02c3\3\2\2\2\26"+
		"\u02d1\3\2\2\2\30\u031a\3\2\2\2\32\u0339\3\2\2\2\34\u033b\3\2\2\2\36\u033f"+
		"\3\2\2\2 \u035d\3\2\2\2\"\u035f\3\2\2\2$\u0374\3\2\2\2&\u03cd\3\2\2\2"+
		"(\u03cf\3\2\2\2*\u03dc\3\2\2\2,\u0412\3\2\2\2.\u0415\3\2\2\2\60\u0443"+
		"\3\2\2\2\62\u0446\3\2\2\2\64\u0467\3\2\2\2\66\u0478\3\2\2\28\u047b\3\2"+
		"\2\2:\u04b6\3\2\2\2<\u04ce\3\2\2\2>\u04e1\3\2\2\2@\u04e3\3\2\2\2B\u0514"+
		"\3\2\2\2D\u0537\3\2\2\2F\u0562\3\2\2\2H\u0564\3\2\2\2J\u0590\3\2\2\2L"+
		"\u0592\3\2\2\2N\u0594\3\2\2\2P\u05b4\3\2\2\2R\u05b6\3\2\2\2T\u05d0\3\2"+
		"\2\2V\u05e3\3\2\2\2X\u05fe\3\2\2\2Z\u061c\3\2\2\2\\\u0633\3\2\2\2^\u0641"+
		"\3\2\2\2`\u0643\3\2\2\2b\u0662\3\2\2\2d\u067e\3\2\2\2f\u068a\3\2\2\2h"+
		"\u0691\3\2\2\2j\u06af\3\2\2\2l\u06b1\3\2\2\2n\u06df\3\2\2\2p\u070c\3\2"+
		"\2\2r\u071f\3\2\2\2t\u0721\3\2\2\2v\u073a\3\2\2\2x\u073c\3\2\2\2z\u0744"+
		"\3\2\2\2|\u0746\3\2\2\2~\u0749\3\2\2\2\u0080\u074c\3\2\2\2\u0082\u074e"+
		"\3\2\2\2\u0084\u0750\3\2\2\2\u0086\u0752\3\2\2\2\u0088\u076f\3\2\2\2\u008a"+
		"\u0771\3\2\2\2\u008c\u0776\3\2\2\2\u008e\u0779\3\2\2\2\u0090\u0782\3\2"+
		"\2\2\u0092\u078a\3\2\2\2\u0094\u0791\3\2\2\2\u0096\u07a8\3\2\2\2\u0098"+
		"\u07aa\3\2\2\2\u009a\u07b5\3\2\2\2\u009c\u07b7\3\2\2\2\u009e\u07cf\3\2"+
		"\2\2\u00a0\u07e2\3\2\2\2\u00a2\u07e4\3\2\2\2\u00a4\u07f5\3\2\2\2\u00a6"+
		"\u080c\3\2\2\2\u00a8\u081d\3\2\2\2\u00aa\u0827\3\2\2\2\u00ac\u0831\3\2"+
		"\2\2\u00ae\u0842\3\2\2\2\u00b0\u0853\3\2\2\2\u00b2\u085d\3\2\2\2\u00b4"+
		"\u085f\3\2\2\2\u00b6\u0866\3\2\2\2\u00b8\u08a2\3\2\2\2\u00ba\u08be\3\2"+
		"\2\2\u00bc\u08ec\3\2\2\2\u00be\u08f0\3\2\2\2\u00c0\u08fd\3\2\2\2\u00c2"+
		"\u093a\3\2\2\2\u00c4\u093c\3\2\2\2\u00c6\u0961\3\2\2\2\u00c8\u0963\3\2"+
		"\2\2\u00ca\u0973\3\2\2\2\u00cc\u0980\3\2\2\2\u00ce\u0993\3\2\2\2\u00d0"+
		"\u099f\3\2\2\2\u00d2\u09c3\3\2\2\2\u00d4\u09d4\3\2\2\2\u00d6\u09d6\3\2"+
		"\2\2\u00d8\u09e3\3\2\2\2\u00da\u09fc\3\2\2\2\u00dc\u0a18\3\2\2\2\u00de"+
		"\u0a41\3\2\2\2\u00e0\u0a90\3\2\2\2\u00e2\u0a92\3\2\2\2\u00e4\u0a96\3\2"+
		"\2\2\u00e6\u0a9b\3\2\2\2\u00e8\u0aaa\3\2\2\2\u00ea\u0aaf\3\2\2\2\u00ec"+
		"\u0ab3\3\2\2\2\u00ee\u0abf\3\2\2\2\u00f0\u0ac4\3\2\2\2\u00f2\u0acc\3\2"+
		"\2\2\u00f4\u0ad0\3\2\2\2\u00f6\u0adc\3\2\2\2\u00f8\u0ade\3\2\2\2\u00fa"+
		"\u0b0d\3\2\2\2\u00fc\u0b38\3\2\2\2\u00fe\u0b79\3\2\2\2\u0100\u0b84\3\2"+
		"\2\2\u0102\u0b8f\3\2\2\2\u0104\u0b9b\3\2\2\2\u0106\u0ba2\3\2\2\2\u0108"+
		"\u0bcb\3\2\2\2\u010a\u0bd6\3\2\2\2\u010c\u0bd8\3\2\2\2\u010e\u0c26\3\2"+
		"\2\2\u0110\u0c2a\3\2\2\2\u0112\u0c59\3\2\2\2\u0114\u0c79\3\2\2\2\u0116"+
		"\u0c7b\3\2\2\2\u0118\u0c7d\3\2\2\2\u011a\u0c8a\3\2\2\2\u011c\u0ca6\3\2"+
		"\2\2\u011e\u0ca8\3\2\2\2\u0120\u0cb0\3\2\2\2\u0122\u0cb8\3\2\2\2\u0124"+
		"\u0cc1\3\2\2\2\u0126\u0cfc\3\2\2\2\u0128\u0d03\3\2\2\2\u012a\u0d11\3\2"+
		"\2\2\u012c\u0d1a\3\2\2\2\u012e\u0d41\3\2\2\2\u0130\u0d51\3\2\2\2\u0132"+
		"\u0d58\3\2\2\2\u0134\u0d5a\3\2\2\2\u0136\u0d89\3\2\2\2\u0138\u0d8b\3\2"+
		"\2\2\u013a\u0d8e\3\2\2\2\u013c\u0d92\3\2\2\2\u013e\u0d94\3\2\2\2\u0140"+
		"\u0dcd\3\2\2\2\u0142\u0dcf\3\2\2\2\u0144\u0dd8\3\2\2\2\u0146\u0df5\3\2"+
		"\2\2\u0148\u0df7\3\2\2\2\u014a\u0e04\3\2\2\2\u014c\u0e06\3\2\2\2\u014e"+
		"\u0e3b\3\2\2\2\u0150\u0e3d\3\2\2\2\u0152\u0e4e\3\2\2\2\u0154\u0e56\3\2"+
		"\2\2\u0156\u0e5b\3\2\2\2\u0158\u0e85\3\2\2\2\u015a\u0e87\3\2\2\2\u015c"+
		"\u0e8f\3\2\2\2\u015e\u0e99\3\2\2\2\u0160\u0ea1\3\2\2\2\u0162\u0ebf\3\2"+
		"\2\2\u0164\u0ec1\3\2\2\2\u0166\u0ecf\3\2\2\2\u0168\u0f4b\3\2\2\2\u016a"+
		"\u0f52\3\2\2\2\u016c\u0f58\3\2\2\2\u016e\u0f63\3\2\2\2\u0170\u0f69\3\2"+
		"\2\2\u0172\u0f6e\3\2\2\2\u0174\u0f73\3\2\2\2\u0176\u0f78\3\2\2\2\u0178"+
		"\u0f7d\3\2\2\2\u017a\u0f83\3\2\2\2\u017c\u0f87\3\2\2\2\u017e\u0f8c\3\2"+
		"\2\2\u0180\u0f9b\3\2\2\2\u0182\u0faa\3\2\2\2\u0184\u0fd6\3\2\2\2\u0186"+
		"\u0fd8\3\2\2\2\u0188\u0fe5\3\2\2\2\u018a\u0fe7\3\2\2\2\u018c\u0ff5\3\2"+
		"\2\2\u018e\u1007\3\2\2\2\u0190\u1029\3\2\2\2\u0192\u102c\3\2\2\2\u0194"+
		"\u1030\3\2\2\2\u0196\u103f\3\2\2\2\u0198\u1048\3\2\2\2\u019a\u104c\3\2"+
		"\2\2\u019c\u1054\3\2\2\2\u019e\u105a\3\2\2\2\u01a0\u107e\3\2\2\2\u01a2"+
		"\u1080\3\2\2\2\u01a4\u108d\3\2\2\2\u01a6\u108f\3\2\2\2\u01a8\u10a4\3\2"+
		"\2\2\u01aa\u10e2\3\2\2\2\u01ac\u10f0\3\2\2\2\u01ae\u10f7\3\2\2\2\u01b0"+
		"\u1105\3\2\2\2\u01b2\u110b\3\2\2\2\u01b4\u1110\3\2\2\2\u01b6\u1114\3\2"+
		"\2\2\u01b8\u1122\3\2\2\2\u01ba\u112c\3\2\2\2\u01bc\u112e\3\2\2\2\u01be"+
		"\u1130\3\2\2\2\u01c0\u1133\3\2\2\2\u01c2\u113e\3\2\2\2\u01c4\u1145\3\2"+
		"\2\2\u01c6\u1147\3\2\2\2\u01c8\u1153\3\2\2\2\u01ca\u1183\3\2\2\2\u01cc"+
		"\u1187\3\2\2\2\u01ce\u1189\3\2\2\2\u01d0\u119e\3\2\2\2\u01d2\u11ad\3\2"+
		"\2\2\u01d4\u11bd\3\2\2\2\u01d6\u11bf\3\2\2\2\u01d8\u11ce\3\2\2\2\u01da"+
		"\u11de\3\2\2\2\u01dc\u11ef\3\2\2\2\u01de\u11f1\3\2\2\2\u01e0\u11f6\3\2"+
		"\2\2\u01e2\u11f8\3\2\2\2\u01e4\u1209\3\2\2\2\u01e6\u120b\3\2\2\2\u01e8"+
		"\u120d\3\2\2\2\u01ea\u01ec\5\4\3\2\u01eb\u01ea\3\2\2\2\u01ec\u01ef\3\2"+
		"\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2\u01ef"+
		"\u01ed\3\2\2\2\u01f0\u01f1\7\2\2\3\u01f1\3\3\2\2\2\u01f2\u01f6\5\6\4\2"+
		"\u01f3\u01f5\5\u00e2r\2\u01f4\u01f3\3\2\2\2\u01f5\u01f8\3\2\2\2\u01f6"+
		"\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\5\3\2\2\2\u01f8\u01f6\3\2\2\2"+
		"\u01f9\u01fb\5\b\5\2\u01fa\u01fc\7\u020c\2\2\u01fb\u01fa\3\2\2\2\u01fb"+
		"\u01fc\3\2\2\2\u01fc\u01fe\3\2\2\2\u01fd\u01f9\3\2\2\2\u01fe\u01ff\3\2"+
		"\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\7\3\2\2\2\u0201\u0208"+
		"\5\n\6\2\u0202\u0208\5\f\7\2\u0203\u0208\5\16\b\2\u0204\u0208\5\u00e6"+
		"t\2\u0205\u0208\5\20\t\2\u0206\u0208\5\22\n\2\u0207\u0201\3\2\2\2\u0207"+
		"\u0202\3\2\2\2\u0207\u0203\3\2\2\2\u0207\u0204\3\2\2\2\u0207\u0205\3\2"+
		"\2\2\u0207\u0206\3\2\2\2\u0208\t\3\2\2\2\u0209\u020f\5$\23\2\u020a\u020f"+
		"\5*\26\2\u020b\u020f\5.\30\2\u020c\u020f\5\64\33\2\u020d\u020f\58\35\2"+
		"\u020e\u0209\3\2\2\2\u020e\u020a\3\2\2\2\u020e\u020b\3\2\2\2\u020e\u020c"+
		"\3\2\2\2\u020e\u020d\3\2\2\2\u020f\13\3\2\2\2\u0210\u0224\5@!\2\u0211"+
		"\u0224\5B\"\2\u0212\u0224\5D#\2\u0213\u0224\5F$\2\u0214\u0224\5R*\2\u0215"+
		"\u0224\5`\61\2\u0216\u0224\5b\62\2\u0217\u0224\5\u00aeX\2\u0218\u0224"+
		"\5h\65\2\u0219\u0224\5l\67\2\u021a\u0224\5n8\2\u021b\u0224\5\u009cO\2"+
		"\u021c\u0224\5\u009eP\2\u021d\u0224\5\u00a0Q\2\u021e\u0224\5\u00a6T\2"+
		"\u021f\u0224\5\u00a8U\2\u0220\u0224\5\u00aaV\2\u0221\u0224\5\u00b0Y\2"+
		"\u0222\u0224\5\u00acW\2\u0223\u0210\3\2\2\2\u0223\u0211\3\2\2\2\u0223"+
		"\u0212\3\2\2\2\u0223\u0213\3\2\2\2\u0223\u0214\3\2\2\2\u0223\u0215\3\2"+
		"\2\2\u0223\u0216\3\2\2\2\u0223\u0217\3\2\2\2\u0223\u0218\3\2\2\2\u0223"+
		"\u0219\3\2\2\2\u0223\u021a\3\2\2\2\u0223\u021b\3\2\2\2\u0223\u021c\3\2"+
		"\2\2\u0223\u021d\3\2\2\2\u0223\u021e\3\2\2\2\u0223\u021f\3\2\2\2\u0223"+
		"\u0220\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0222\3\2\2\2\u0224\r\3\2\2\2"+
		"\u0225\u0227\7\36\2\2\u0226\u0228\7\u020c\2\2\u0227\u0226\3\2\2\2\u0227"+
		"\u0228\3\2\2\2\u0228\u022a\3\2\2\2\u0229\u022b\5\6\4\2\u022a\u0229\3\2"+
		"\2\2\u022a\u022b\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022e\7S\2\2\u022d"+
		"\u022f\7\u020c\2\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u02b2"+
		"\3\2\2\2\u0230\u0232\7 \2\2\u0231\u0233\7\u020c\2\2\u0232\u0231\3\2\2"+
		"\2\u0232\u0233\3\2\2\2\u0233\u02b2\3\2\2\2\u0234\u0236\7\67\2\2\u0235"+
		"\u0237\7\u020c\2\2\u0236\u0235\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u02b2"+
		"\3\2\2\2\u0238\u0239\7j\2\2\u0239\u023b\5\u01e0\u00f1\2\u023a\u023c\7"+
		"\u020c\2\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u02b2\3\2\2\2"+
		"\u023d\u023e\5\u01e0\u00f1\2\u023e\u0240\7\u020d\2\2\u023f\u0241\7\u020c"+
		"\2\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u02b2\3\2\2\2\u0242"+
		"\u0243\7q\2\2\u0243\u0244\5\u0120\u0091\2\u0244\u0247\5\b\5\2\u0245\u0246"+
		"\7R\2\2\u0246\u0248\5\b\5\2\u0247\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248"+
		"\u024a\3\2\2\2\u0249\u024b\7\u020c\2\2\u024a\u0249\3\2\2\2\u024a\u024b"+
		"\3\2\2\2\u024b\u02b2\3\2\2\2\u024c\u024e\7\u00b3\2\2\u024d\u024f\5\u0112"+
		"\u008a\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0251\3\2\2\2\u0250"+
		"\u0252\7\u020c\2\2\u0251\u0250\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u02b2"+
		"\3\2\2\2\u0253\u0259\7\u01d0\2\2\u0254\u0255\t\2\2\2\u0255\u0256\7\u020b"+
		"\2\2\u0256\u0257\t\3\2\2\u0257\u0258\7\u020b\2\2\u0258\u025a\t\2\2\2\u0259"+
		"\u0254\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025c\3\2\2\2\u025b\u025d\7\u020c"+
		"\2\2\u025c\u025b\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u02b2\3\2\2\2\u025e"+
		"\u025f\7\36\2\2\u025f\u0261\7\u01d8\2\2\u0260\u0262\7\u020c\2\2\u0261"+
		"\u0260\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\3\2\2\2\u0263\u0265\5\6"+
		"\4\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0266\3\2\2\2\u0266"+
		"\u0267\7S\2\2\u0267\u0269\7\u01d8\2\2\u0268\u026a\7\u020c\2\2\u0269\u0268"+
		"\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\7\36\2\2"+
		"\u026c\u026e\7\u0106\2\2\u026d\u026f\7\u020c\2\2\u026e\u026d\3\2\2\2\u026e"+
		"\u026f\3\2\2\2\u026f\u0271\3\2\2\2\u0270\u0272\5\6\4\2\u0271\u0270\3\2"+
		"\2\2\u0271\u0272\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\7S\2\2\u0274"+
		"\u0276\7\u0106\2\2\u0275\u0277\7\u020c\2\2\u0276\u0275\3\2\2\2\u0276\u0277"+
		"\3\2\2\2\u0277\u02b2\3\2\2\2\u0278\u027a\7\u00e3\2\2\u0279\u027b\5\62"+
		"\32\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027d\3\2\2\2\u027c"+
		"\u027e\7\u020b\2\2\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0281"+
		"\3\2\2\2\u027f\u0280\t\4\2\2\u0280\u0282\5\66\34\2\u0281\u027f\3\2\2\2"+
		"\u0281\u0282\3\2\2\2\u0282\u0284\3\2\2\2\u0283\u0285\5\u0112\u008a\2\u0284"+
		"\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0287\3\2\2\2\u0286\u0288\7\u020c"+
		"\2\2\u0287\u0286\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u02b2\3\2\2\2\u0289"+
		"\u028a\7\u00e6\2\2\u028a\u0294\5\u0120\u0091\2\u028b\u0295\5\b\5\2\u028c"+
		"\u028e\7 \2\2\u028d\u028f\7\u020c\2\2\u028e\u028d\3\2\2\2\u028e\u028f"+
		"\3\2\2\2\u028f\u0295\3\2\2\2\u0290\u0292\7\67\2\2\u0291\u0293\7\u020c"+
		"\2\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0295\3\2\2\2\u0294"+
		"\u028b\3\2\2\2\u0294\u028c\3\2\2\2\u0294\u0290\3\2\2\2\u0295\u02b2\3\2"+
		"\2\2\u0296\u0297\7\u00a4\2\2\u0297\u0299\5\u0112\u008a\2\u0298\u029a\7"+
		"\u020c\2\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u02b2\3\2\2\2"+
		"\u029b\u029c\7\u00a8\2\2\u029c\u029d\7\u0209\2\2\u029d\u029e\t\5\2\2\u029e"+
		"\u029f\7\u020b\2\2\u029f\u02a0\5\u0110\u0089\2\u02a0\u02a1\7\u020b\2\2"+
		"\u02a1\u02a6\5\u0110\u0089\2\u02a2\u02a3\7\u020b\2\2\u02a3\u02a5\5\u0110"+
		"\u0089\2\u02a4\u02a2\3\2\2\2\u02a5\u02a8\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6"+
		"\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02ac\7\u020a"+
		"\2\2\u02aa\u02ab\7\u00e7\2\2\u02ab\u02ad\t\6\2\2\u02ac\u02aa\3\2\2\2\u02ac"+
		"\u02ad\3\2\2\2\u02ad\u02af\3\2\2\2\u02ae\u02b0\7\u020c\2\2\u02af\u02ae"+
		"\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2\u02b1\u0225\3\2\2\2\u02b1"+
		"\u0230\3\2\2\2\u02b1\u0234\3\2\2\2\u02b1\u0238\3\2\2\2\u02b1\u023d\3\2"+
		"\2\2\u02b1\u0242\3\2\2\2\u02b1\u024c\3\2\2\2\u02b1\u0253\3\2\2\2\u02b1"+
		"\u025e\3\2\2\2\u02b1\u0278\3\2\2\2\u02b1\u0289\3\2\2\2\u02b1\u0296\3\2"+
		"\2\2\u02b1\u029b\3\2\2\2\u02b2\17\3\2\2\2\u02b3\u02b4\7\u020c\2\2\u02b4"+
		"\21\3\2\2\2\u02b5\u02c2\5\u00b8]\2\u02b6\u02c2\5\u00ba^\2\u02b7\u02c2"+
		"\5 \21\2\u02b8\u02c2\5\36\20\2\u02b9\u02c2\5\24\13\2\u02ba\u02c2\5\30"+
		"\r\2\u02bb\u02c2\5\u00bc_\2\u02bc\u02c2\5\"\22\2\u02bd\u02c2\5\u00c2b"+
		"\2\u02be\u02c2\5\u00dep\2\u02bf\u02c2\5\u00e0q\2\u02c0\u02c2\5\u00e4s"+
		"\2\u02c1\u02b5\3\2\2\2\u02c1\u02b6\3\2\2\2\u02c1\u02b7\3\2\2\2\u02c1\u02b8"+
		"\3\2\2\2\u02c1\u02b9\3\2\2\2\u02c1\u02ba\3\2\2\2\u02c1\u02bb\3\2\2\2\u02c1"+
		"\u02bc\3\2\2\2\u02c1\u02bd\3\2\2\2\u02c1\u02be\3\2\2\2\u02c1\u02bf\3\2"+
		"\2\2\u02c1\u02c0\3\2\2\2\u02c2\23\3\2\2\2\u02c3\u02c4\7;\2\2\u02c4\u02c7"+
		"\7\u0199\2\2\u02c5\u02c8\5\u01aa\u00d6\2\u02c6\u02c8\5\u01e0\u00f1\2\u02c7"+
		"\u02c5\3\2\2\2\u02c7\u02c6\3\2\2\2\u02c8\u02ca\3\2\2\2\u02c9\u02cb\5\26"+
		"\f\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cf\3\2\2\2\u02cc"+
		"\u02cd\7\u0091\2\2\u02cd\u02d0\5\u01e0\u00f1\2\u02ce\u02d0\7H\2\2\u02cf"+
		"\u02cc\3\2\2\2\u02cf\u02ce\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\25\3\2\2"+
		"\2\u02d1\u02d8\7\u00e7\2\2\u02d2\u02d3\7\u01c5\2\2\u02d3\u02d4\7\u01f8"+
		"\2\2\u02d4\u02d6\t\7\2\2\u02d5\u02d7\7\u020b\2\2\u02d6\u02d5\3\2\2\2\u02d6"+
		"\u02d7\3\2\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02d2\3\2\2\2\u02d8\u02d9\3\2"+
		"\2\2\u02d9\u02e0\3\2\2\2\u02da\u02db\7\u01ab\2\2\u02db\u02dc\7\u01f8\2"+
		"\2\u02dc\u02de\t\7\2\2\u02dd\u02df\7\u020b\2\2\u02de\u02dd\3\2\2\2\u02de"+
		"\u02df\3\2\2\2\u02df\u02e1\3\2\2\2\u02e0\u02da\3\2\2\2\u02e0\u02e1\3\2"+
		"\2\2\u02e1\u0318\3\2\2\2\u02e2\u02e3\7\u00ed\2\2\u02e3\u02ea\7\u0209\2"+
		"\2\u02e4\u02e6\7\u020b\2\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6"+
		"\u02e7\3\2\2\2\u02e7\u02e8\7\u01c5\2\2\u02e8\u02e9\7\u01f8\2\2\u02e9\u02eb"+
		"\t\7\2\2\u02ea\u02e5\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02f2\3\2\2\2\u02ec"+
		"\u02ee\7\u020b\2\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02ef"+
		"\3\2\2\2\u02ef\u02f0\7\u0196\2\2\u02f0\u02f1\7\u01f8\2\2\u02f1\u02f3\5"+
		"\u01b0\u00d9\2\u02f2\u02ed\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02fa\3\2"+
		"\2\2\u02f4\u02f6\7\u020b\2\2\u02f5\u02f4\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6"+
		"\u02f7\3\2\2\2\u02f7\u02f8\7\u0168\2\2\u02f8\u02f9\7\u01f8\2\2\u02f9\u02fb"+
		"\7\u01f2\2\2\u02fa\u02f5\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u0306\3\2\2"+
		"\2\u02fc\u02fe\7\u020b\2\2\u02fd\u02fc\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe"+
		"\u02ff\3\2\2\2\u02ff\u0300\7Y\2\2\u0300\u0304\7\31\2\2\u0301\u0305\7\u01b7"+
		"\2\2\u0302\u0305\7\u01f4\2\2\u0303\u0305\7\u018c\2\2\u0304\u0301\3\2\2"+
		"\2\u0304\u0302\3\2\2\2\u0304\u0303\3\2\2\2\u0305\u0307\3\2\2\2\u0306\u02fd"+
		"\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u030f\3\2\2\2\u0308\u030a\7\u020b\2"+
		"\2\u0309\u0308\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c"+
		"\7\u0191\2\2\u030c\u030d\7\u01c5\2\2\u030d\u030e\7\u01f8\2\2\u030e\u0310"+
		"\t\7\2\2\u030f\u0309\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0315\3\2\2\2\u0311"+
		"\u0313\7\u020b\2\2\u0312\u0311\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314"+
		"\3\2\2\2\u0314\u0316\7P\2\2\u0315\u0312\3\2\2\2\u0315\u0316\3\2\2\2\u0316"+
		"\u0317\3\2\2\2\u0317\u0319\7\u020a\2\2\u0318\u02e2\3\2\2\2\u0318\u0319"+
		"\3\2\2\2\u0319\27\3\2\2\2\u031a\u031b\7\25\2\2\u031b\u031e\7\u0199\2\2"+
		"\u031c\u031f\5\u01aa\u00d6\2\u031d\u031f\5\u01e0\u00f1\2\u031e\u031c\3"+
		"\2\2\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2\2\u0320\u0323\5\26\f\2\u0321"+
		"\u0323\5\32\16\2\u0322\u0320\3\2\2\2\u0322\u0321\3\2\2\2\u0323\31\3\2"+
		"\2\2\u0324\u032a\7\u01a1\2\2\u0325\u0326\7\u00e7\2\2\u0326\u0327\7\u0209"+
		"\2\2\u0327\u0328\5\34\17\2\u0328\u0329\7\u020a\2\2\u0329\u032b\3\2\2\2"+
		"\u032a\u0325\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u033a\3\2\2\2\u032c\u0331"+
		"\7\u01a7\2\2\u032d\u032e\7\u00e7\2\2\u032e\u032f\7\u0160\2\2\u032f\u0330"+
		"\7\u01f8\2\2\u0330\u0332\t\7\2\2\u0331\u032d\3\2\2\2\u0331\u0332\3\2\2"+
		"\2\u0332\u033a\3\2\2\2\u0333\u0334\7\u0174\2\2\u0334\u0337\7\u00d2\2\2"+
		"\u0335\u0338\5\u01e0\u00f1\2\u0336\u0338\7H\2\2\u0337\u0335\3\2\2\2\u0337"+
		"\u0336\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u0324\3\2\2\2\u0339\u032c\3\2"+
		"\2\2\u0339\u0333\3\2\2\2\u033a\33\3\2\2\2\u033b\u033c\7\u0169\2\2\u033c"+
		"\u033d\7\u01f8\2\2\u033d\u033e\7\u01f2\2\2\u033e\35\3\2\2\2\u033f\u0340"+
		"\7;\2\2\u0340\u0341\78\2\2\u0341\u0344\5\u01ca\u00e6\2\u0342\u0343\7\34"+
		"\2\2\u0343\u0345\5\u01e0\u00f1\2\u0344\u0342\3\2\2\2\u0344\u0345\3\2\2"+
		"\2\u0345\u0346\3\2\2\2\u0346\u0351\7\u0209\2\2\u0347\u034a\5\u01e0\u00f1"+
		"\2\u0348\u034a\7H\2\2\u0349\u0347\3\2\2\2\u0349\u0348\3\2\2\2\u034a\u034b"+
		"\3\2\2\2\u034b\u034c\7\u01b9\2\2\u034c\u034d\7#\2\2\u034d\u034f\t\b\2"+
		"\2\u034e\u0350\7\u020b\2\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350"+
		"\u0352\3\2\2\2\u0351\u0349\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0351\3\2"+
		"\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356\7\u020a\2\2\u0356"+
		"\37\3\2\2\2\u0357\u035e\5\u01c6\u00e4\2\u0358\u035e\5\u01c8\u00e5\2\u0359"+
		"\u035e\5\u01ce\u00e8\2\u035a\u035e\5\u01d2\u00ea\2\u035b\u035e\5\u01d6"+
		"\u00ec\2\u035c\u035e\5\u01d0\u00e9\2\u035d\u0357\3\2\2\2\u035d\u0358\3"+
		"\2\2\2\u035d\u0359\3\2\2\2\u035d\u035a\3\2\2\2\u035d\u035b\3\2\2\2\u035d"+
		"\u035c\3\2\2\2\u035e!\3\2\2\2\u035f\u0360\7;\2\2\u0360\u0361\7\u016c\2"+
		"\2\u0361\u0362\7\u01da\2\2\u0362\u0365\5\u01e0\u00f1\2\u0363\u0364\7\34"+
		"\2\2\u0364\u0366\5\u01e0\u00f1\2\u0365\u0363\3\2\2\2\u0365\u0366\3\2\2"+
		"\2\u0366\u0367\3\2\2\2\u0367\u0368\7\u01e1\2\2\u0368\u0371\7\u01f8\2\2"+
		"\u0369\u0372\7\u008a\2\2\u036a\u0372\7\u0130\2\2\u036b\u0372\7\u01e7\2"+
		"\2\u036c\u036d\7\u01e2\2\2\u036d\u036e\7\u00e7\2\2\u036e\u036f\7\u00bd"+
		"\2\2\u036f\u0370\7\u010c\2\2\u0370\u0372\5\u01e0\u00f1\2\u0371\u0369\3"+
		"\2\2\2\u0371\u036a\3\2\2\2\u0371\u036b\3\2\2\2\u0371\u036c\3\2\2\2\u0372"+
		"#\3\2\2\2\u0373\u0375\5\u0118\u008d\2\u0374\u0373\3\2\2\2\u0374\u0375"+
		"\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u037e\7\u0086\2\2\u0377\u0378\7\u00d3"+
		"\2\2\u0378\u0379\7\u0209\2\2\u0379\u037a\5\u0112\u008a\2\u037a\u037c\7"+
		"\u020a\2\2\u037b\u037d\7\u009f\2\2\u037c\u037b\3\2\2\2\u037c\u037d\3\2"+
		"\2\2\u037d\u037f\3\2\2\2\u037e\u0377\3\2\2\2\u037e\u037f\3\2\2\2\u037f"+
		"\u0381\3\2\2\2\u0380\u0382\7y\2\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2"+
		"\2\2\u0382\u0383\3\2\2\2\u0383\u0385\5\u01b2\u00da\2\u0384\u0386\5\u0180"+
		"\u00c1\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2\u0387"+
		"\u0389\5\u017a\u00be\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a"+
		"\3\2\2\2\u038a\u038b\7\u01e0\2\2\u038b\u038c\5\u0148\u00a5\2\u038c\u038d"+
		"\7\u0091\2\2\u038d\u0398\5\u0120\u0091\2\u038e\u038f\7\u00e4\2\2\u038f"+
		"\u0392\7\u0085\2\2\u0390\u0391\7\26\2\2\u0391\u0393\5\u0120\u0091\2\u0392"+
		"\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\7\u00d1"+
		"\2\2\u0395\u0397\5&\24\2\u0396\u038e\3\2\2\2\u0397\u039a\3\2\2\2\u0398"+
		"\u0396\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u03a8\3\2\2\2\u039a\u0398\3\2"+
		"\2\2\u039b\u039c\7\u00e4\2\2\u039c\u039d\7\u008b\2\2\u039d\u03a0\7\u0085"+
		"\2\2\u039e\u039f\7#\2\2\u039f\u03a1\7\u00cf\2\2\u03a0\u039e\3\2\2\2\u03a0"+
		"\u03a1\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a3\7\26\2\2\u03a3\u03a5\5"+
		"\u0120\u0091\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2"+
		"\2\2\u03a6\u03a7\7\u00d1\2\2\u03a7\u03a9\5(\25\2\u03a8\u039b\3\2\2\2\u03a8"+
		"\u03a9\3\2\2\2\u03a9\u03b7\3\2\2\2\u03aa\u03ab\7\u00e4\2\2\u03ab\u03ac"+
		"\7\u008b\2\2\u03ac\u03ad\7\u0085\2\2\u03ad\u03ae\7#\2\2\u03ae\u03b1\7"+
		"\u00ca\2\2\u03af\u03b0\7\26\2\2\u03b0\u03b2\5\u0120\u0091\2\u03b1\u03af"+
		"\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\7\u00d1\2"+
		"\2\u03b4\u03b6\5&\24\2\u03b5\u03aa\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5"+
		"\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03ba"+
		"\u03bc\5:\36\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03be\3\2"+
		"\2\2\u03bd\u03bf\5\u013e\u00a0\2\u03be\u03bd\3\2\2\2\u03be\u03bf\3\2\2"+
		"\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1\7\u020c\2\2\u03c1%\3\2\2\2\u03c2\u03c3"+
		"\7\u00dc\2\2\u03c3\u03c4\7\u00c6\2\2\u03c4\u03c9\5\u011c\u008f\2\u03c5"+
		"\u03c6\7\u020b\2\2\u03c6\u03c8\5\u011c\u008f\2\u03c7\u03c5\3\2\2\2\u03c8"+
		"\u03cb\3\2\2\2\u03c9\u03c7\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03ce\3\2"+
		"\2\2\u03cb\u03c9\3\2\2\2\u03cc\u03ce\7I\2\2\u03cd\u03c2\3\2\2\2\u03cd"+
		"\u03cc\3\2\2\2\u03ce\'\3\2\2\2\u03cf\u03d4\7v\2\2\u03d0\u03d1\7\u0209"+
		"\2\2\u03d1\u03d2\5\u01b8\u00dd\2\u03d2\u03d3\7\u020a\2\2\u03d3\u03d5\3"+
		"\2\2\2\u03d4\u03d0\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d9\3\2\2\2\u03d6"+
		"\u03da\5\u018a\u00c6\2\u03d7\u03d8\7H\2\2\u03d8\u03da\7\u00e0\2\2\u03d9"+
		"\u03d6\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da)\3\2\2\2\u03db\u03dd\5\u0118"+
		"\u008d\2\u03dc\u03db\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2\u03de"+
		"\u03e6\7I\2\2\u03df\u03e0\7\u00d3\2\2\u03e0\u03e1\7\u0209\2\2\u03e1\u03e2"+
		"\5\u0112\u008a\2\u03e2\u03e4\7\u020a\2\2\u03e3\u03e5\7\u009f\2\2\u03e4"+
		"\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e7\3\2\2\2\u03e6\u03df\3\2"+
		"\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2\u03e8\u03ea\7f\2\2\u03e9"+
		"\u03e8\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed\5,"+
		"\27\2\u03ec\u03ee\5\u0180\u00c1\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2"+
		"\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03f1\5:\36\2\u03f0\u03ef\3\2\2\2\u03f0"+
		"\u03f1\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f3\7f\2\2\u03f3\u03f5\5\u0148"+
		"\u00a5\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u0403\3\2\2\2\u03f6"+
		"\u0401\7\u00e5\2\2\u03f7\u0402\5\u0120\u0091\2\u03f8\u03f9\7=\2\2\u03f9"+
		"\u03ff\7\u008e\2\2\u03fa\u03fc\7\u0146\2\2\u03fb\u03fa\3\2\2\2\u03fb\u03fc"+
		"\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u0400\5\u01ba\u00de\2\u03fe\u0400\7"+
		"\u01f1\2\2\u03ff\u03fb\3\2\2\2\u03ff\u03fe\3\2\2\2\u0400\u0402\3\2\2\2"+
		"\u0401\u03f7\3\2\2\2\u0401\u03f8\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u03f6"+
		"\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406\3\2\2\2\u0405\u0407\5\u0136\u009c"+
		"\2\u0406\u0405\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0409\3\2\2\2\u0408\u040a"+
		"\5\u013e\u00a0\2\u0409\u0408\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040c\3"+
		"\2\2\2\u040b\u040d\7\u020c\2\2\u040c\u040b\3\2\2\2\u040c\u040d\3\2\2\2"+
		"\u040d+\3\2\2\2\u040e\u0413\5\u017c\u00bf\2\u040f\u0413\5\u01b2\u00da"+
		"\2\u0410\u0413\5\u00b2Z\2\u0411\u0413\7\u01f1\2\2\u0412\u040e\3\2\2\2"+
		"\u0412\u040f\3\2\2\2\u0412\u0410\3\2\2\2\u0412\u0411\3\2\2\2\u0413-\3"+
		"\2\2\2\u0414\u0416\5\u0118\u008d\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2"+
		"\2\2\u0416\u0417\3\2\2\2\u0417\u041f\7v\2\2\u0418\u0419\7\u00d3\2\2\u0419"+
		"\u041a\7\u0209\2\2\u041a\u041b\5\u0112\u008a\2\u041b\u041d\7\u020a\2\2"+
		"\u041c\u041e\7\u009f\2\2\u041d\u041c\3\2\2\2\u041d\u041e\3\2\2\2\u041e"+
		"\u0420\3\2\2\2\u041f\u0418\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422\3\2"+
		"\2\2\u0421\u0423\7y\2\2\u0422\u0421\3\2\2\2\u0422\u0423\3\2\2\2\u0423"+
		"\u0426\3\2\2\2\u0424\u0427\5\u01b2\u00da\2\u0425\u0427\5\u00b2Z\2\u0426"+
		"\u0424\3\2\2\2\u0426\u0425\3\2\2\2\u0427\u0429\3\2\2\2\u0428\u042a\5\u0180"+
		"\u00c1\2\u0429\u0428\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042f\3\2\2\2\u042b"+
		"\u042c\7\u0209\2\2\u042c\u042d\5\u01b8\u00dd\2\u042d\u042e\7\u020a\2\2"+
		"\u042e\u0430\3\2\2\2\u042f\u042b\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0432"+
		"\3\2\2\2\u0431\u0433\5:\36\2\u0432\u0431\3\2\2\2\u0432\u0433\3\2\2\2\u0433"+
		"\u0434\3\2\2\2\u0434\u0436\5\60\31\2\u0435\u0437\5\u0136\u009c\2\u0436"+
		"\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u043a\5\u013e"+
		"\u00a0\2\u0439\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043c\3\2\2\2\u043b"+
		"\u043d\7\u020c\2\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d/\3\2"+
		"\2\2\u043e\u0444\5\u018a\u00c6\2\u043f\u0444\5\u0166\u00b4\2\u0440\u0444"+
		"\5\u00bc_\2\u0441\u0442\7H\2\2\u0442\u0444\7\u00e0\2\2\u0443\u043e\3\2"+
		"\2\2\u0443\u043f\3\2\2\2\u0443\u0440\3\2\2\2\u0443\u0441\3\2\2\2\u0444"+
		"\61\3\2\2\2\u0445\u0447\7\u0209\2\2\u0446\u0445\3\2\2\2\u0446\u0447\3"+
		"\2\2\2\u0447\u0448\3\2\2\2\u0448\u044d\7\u01a3\2\2\u0449\u044e\7\24\2"+
		"\2\u044a\u044e\7M\2\2\u044b\u044e\5\u012e\u0098\2\u044c\u044e\7\u020e"+
		"\2\2\u044d\u0449\3\2\2\2\u044d\u044a\3\2\2\2\u044d\u044b\3\2\2\2\u044d"+
		"\u044c\3\2\2\2\u044e\u0457\3\2\2\2\u044f\u0450\7\u01f1\2\2\u0450\u0451"+
		"\7\u01f8\2\2\u0451\u0453\5\u0112\u008a\2\u0452\u0454\7\u020b\2\2\u0453"+
		"\u0452\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\3\2\2\2\u0455\u044f\3\2"+
		"\2\2\u0456\u0459\3\2\2\2\u0457\u0455\3\2\2\2\u0457\u0458\3\2\2\2\u0458"+
		"\u045a\3\2\2\2\u0459\u0457\3\2\2\2\u045a\u045b\7f\2\2\u045b\u0461\5\u01aa"+
		"\u00d6\2\u045c\u045d\7y\2\2\u045d\u045e\5\u01e0\u00f1\2\u045e\u045f\7"+
		"\u00e5\2\2\u045f\u0460\5\u0120\u0091\2\u0460\u0462\3\2\2\2\u0461\u045c"+
		"\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0464\3\2\2\2\u0463\u0465\7\u020a\2"+
		"\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465\63\3\2\2\2\u0466\u0468"+
		"\5\u0118\u008d\2\u0467\u0466\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3"+
		"\2\2\2\u0469\u046b\5\u0128\u0095\2\u046a\u046c\5\u0134\u009b\2\u046b\u046a"+
		"\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2\2\2\u046d\u046f\5\u0136\u009c"+
		"\2\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471\3\2\2\2\u0470\u0472"+
		"\5\u013e\u00a0\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474\3"+
		"\2\2\2\u0473\u0475\7\u020c\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2"+
		"\u0475\65\3\2\2\2\u0476\u0479\7\u01f1\2\2\u0477\u0479\5\u01dc\u00ef\2"+
		"\u0478\u0476\3\2\2\2\u0478\u0477\3\2\2\2\u0479\67\3\2\2\2\u047a\u047c"+
		"\5\u0118\u008d\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3"+
		"\2\2\2\u047d\u0485\7\u00dc\2\2\u047e\u047f\7\u00d3\2\2\u047f\u0480\7\u0209"+
		"\2\2\u0480\u0481\5\u0112\u008a\2\u0481\u0483\7\u020a\2\2\u0482\u0484\7"+
		"\u009f\2\2\u0483\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2"+
		"\u0485\u047e\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u0489\3\2\2\2\u0487\u048a"+
		"\5\u01b2\u00da\2\u0488\u048a\5\u00b2Z\2\u0489\u0487\3\2\2\2\u0489\u0488"+
		"\3\2\2\2\u048a\u048c\3\2\2\2\u048b\u048d\5\u017e\u00c0\2\u048c\u048b\3"+
		"\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\7\u00c6\2\2"+
		"\u048f\u0494\5\u011c\u008f\2\u0490\u0491\7\u020b\2\2\u0491\u0493\5\u011c"+
		"\u008f\2\u0492\u0490\3\2\2\2\u0493\u0496\3\2\2\2\u0494\u0492\3\2\2\2\u0494"+
		"\u0495\3\2\2\2\u0495\u0498\3\2\2\2\u0496\u0494\3\2\2\2\u0497\u0499\5:"+
		"\36\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049c\3\2\2\2\u049a"+
		"\u049b\7f\2\2\u049b\u049d\5\u0148\u00a5\2\u049c\u049a\3\2\2\2\u049c\u049d"+
		"\3\2\2\2\u049d\u04ab\3\2\2\2\u049e\u04a9\7\u00e5\2\2\u049f\u04aa\5\u011e"+
		"\u0090\2\u04a0\u04a1\7=\2\2\u04a1\u04a7\7\u008e\2\2\u04a2\u04a4\7\u0146"+
		"\2\2\u04a3\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5"+
		"\u04a8\5\u01ba\u00de\2\u04a6\u04a8\7\u01f1\2\2\u04a7\u04a3\3\2\2\2\u04a7"+
		"\u04a6\3\2\2\2\u04a8\u04aa\3\2\2\2\u04a9\u049f\3\2\2\2\u04a9\u04a0\3\2"+
		"\2\2\u04aa\u04ac\3\2\2\2\u04ab\u049e\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac"+
		"\u04ae\3\2\2\2\u04ad\u04af\5\u0136\u009c\2\u04ae\u04ad\3\2\2\2\u04ae\u04af"+
		"\3\2\2\2\u04af\u04b1\3\2\2\2\u04b0\u04b2\5\u013e\u00a0\2\u04b1\u04b0\3"+
		"\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b5\7\u020c\2\2"+
		"\u04b4\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b59\3\2\2\2\u04b6\u04b7\7"+
		"\u018b\2\2\u04b7\u04bc\5<\37\2\u04b8\u04b9\7\u020b\2\2\u04b9\u04bb\5<"+
		"\37\2\u04ba\u04b8\3\2\2\2\u04bb\u04be\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc"+
		"\u04bd\3\2\2\2\u04bd\u04ca\3\2\2\2\u04be\u04bc\3\2\2\2\u04bf\u04c2\7y"+
		"\2\2\u04c0\u04c3\7\u01f1\2\2\u04c1\u04c3\5\u01ac\u00d7\2\u04c2\u04c0\3"+
		"\2\2\2\u04c2\u04c1\3\2\2\2\u04c3\u04c8\3\2\2\2\u04c4\u04c5\7\u0209\2\2"+
		"\u04c5\u04c6\5\u01b8\u00dd\2\u04c6\u04c7\7\u020a\2\2\u04c7\u04c9\3\2\2"+
		"\2\u04c8\u04c4\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04bf"+
		"\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb;\3\2\2\2\u04cc\u04cf\5> \2\u04cd\u04cf"+
		"\5\u0112\u008a\2\u04ce\u04cc\3\2\2\2\u04ce\u04cd\3\2\2\2\u04cf\u04d4\3"+
		"\2\2\2\u04d0\u04d2\7\31\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2"+
		"\u04d3\3\2\2\2\u04d3\u04d5\5\u0188\u00c5\2\u04d4\u04d1\3\2\2\2\u04d4\u04d5"+
		"\3\2\2\2\u04d5=\3\2\2\2\u04d6\u04da\7\u0126\2\2\u04d7\u04da\7\u0156\2"+
		"\2\u04d8\u04da\5\u01ac\u00d7\2\u04d9\u04d6\3\2\2\2\u04d9\u04d7\3\2\2\2"+
		"\u04d9\u04d8\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04de\7\u0204\2\2\u04dc"+
		"\u04df\7\u020e\2\2\u04dd\u04df\5\u01e0\u00f1\2\u04de\u04dc\3\2\2\2\u04de"+
		"\u04dd\3\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04e2\7\u01eb\2\2\u04e1\u04d9"+
		"\3\2\2\2\u04e1\u04e0\3\2\2\2\u04e2?\3\2\2\2\u04e3\u04e4\7;\2\2\u04e4\u04e5"+
		"\7D\2\2\u04e5\u04e9\5\u01e0\u00f1\2\u04e6\u04e7\7\64\2\2\u04e7\u04e8\7"+
		"\u01f8\2\2\u04e8\u04ea\t\t\2\2\u04e9\u04e6\3\2\2\2\u04e9\u04ea\3\2\2\2"+
		"\u04ea\u04f7\3\2\2\2\u04eb\u04ed\7\u0091\2\2\u04ec\u04ee\7\u00a3\2\2\u04ed"+
		"\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f4\5\u01a4"+
		"\u00d3\2\u04f0\u04f1\7\u020b\2\2\u04f1\u04f3\5\u01a4\u00d3\2\u04f2\u04f0"+
		"\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5"+
		"\u04f8\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f7\u04eb\3\2\2\2\u04f7\u04f8\3\2"+
		"\2\2\u04f8\u0503\3\2\2\2\u04f9\u04fa\7\u0084\2\2\u04fa\u04fb\7\u0091\2"+
		"\2\u04fb\u0500\5\u01a4\u00d3\2\u04fc\u04fd\7\u020b\2\2\u04fd\u04ff\5\u01a4"+
		"\u00d3\2\u04fe\u04fc\3\2\2\2\u04ff\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500"+
		"\u0501\3\2\2\2\u0501\u0504\3\2\2\2\u0502\u0500\3\2\2\2\u0503\u04f9\3\2"+
		"\2\2\u0503\u0504\3\2\2\2\u0504\u0507\3\2\2\2\u0505\u0506\7/\2\2\u0506"+
		"\u0508\5\u01e0\u00f1\2\u0507\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u0512"+
		"\3\2\2\2\u0509\u050a\7\u00e7\2\2\u050a\u050f\5\u01a0\u00d1\2\u050b\u050c"+
		"\7\u020b\2\2\u050c\u050e\5\u01a0\u00d1\2\u050d\u050b\3\2\2\2\u050e\u0511"+
		"\3\2\2\2\u050f\u050d\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0513\3\2\2\2\u0511"+
		"\u050f\3\2\2\2\u0512\u0509\3\2\2\2\u0512\u0513\3\2\2\2\u0513A\3\2\2\2"+
		"\u0514\u0516\7;\2\2\u0515\u0517\7\u00da\2\2\u0516\u0515\3\2\2\2\u0516"+
		"\u0517\3\2\2\2\u0517\u0519\3\2\2\2\u0518\u051a\5\u01be\u00e0\2\u0519\u0518"+
		"\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u051c\7t\2\2\u051c"+
		"\u051d\5\u01e0\u00f1\2\u051d\u051e\7\u0091\2\2\u051e\u051f\5\u0160\u00b1"+
		"\2\u051f\u0520\7\u0209\2\2\u0520\u0521\5\u01b6\u00dc\2\u0521\u0527\7\u020a"+
		"\2\2\u0522\u0523\7s\2\2\u0523\u0524\7\u0209\2\2\u0524\u0525\5\u01b8\u00dd"+
		"\2\u0525\u0526\7\u020a\2\2\u0526\u0528\3\2\2\2\u0527\u0522\3\2\2\2\u0527"+
		"\u0528\3\2\2\2\u0528\u052b\3\2\2\2\u0529\u052a\7\u00e5\2\2\u052a\u052c"+
		"\5\u0120\u0091\2\u052b\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u052e\3"+
		"\2\2\2\u052d\u052f\5\u0102\u0082\2\u052e\u052d\3\2\2\2\u052e\u052f\3\2"+
		"\2\2\u052f\u0532\3\2\2\2\u0530\u0531\7\u0091\2\2\u0531\u0533\5\u01e0\u00f1"+
		"\2\u0532\u0530\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u0535\3\2\2\2\u0534\u0536"+
		"\7\u020c\2\2\u0535\u0534\3\2\2\2\u0535\u0536\3\2\2\2\u0536C\3\2\2\2\u0537"+
		"\u0538\t\n\2\2\u0538\u0539\t\13\2\2\u0539\u053c\5\u01b0\u00d9\2\u053a"+
		"\u053b\7\u020c\2\2\u053b\u053d\7\u01f2\2\2\u053c\u053a\3\2\2\2\u053c\u053d"+
		"\3\2\2\2\u053d\u054c\3\2\2\2\u053e\u0540\7\u0209\2\2\u053f\u053e\3\2\2"+
		"\2\u053f\u0540\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0546\5Z.\2\u0542\u0543"+
		"\7\u020b\2\2\u0543\u0545\5Z.\2\u0544\u0542\3\2\2\2\u0545\u0548\3\2\2\2"+
		"\u0546\u0544\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u054a\3\2\2\2\u0548\u0546"+
		"\3\2\2\2\u0549\u054b\7\u020a\2\2\u054a\u0549\3\2\2\2\u054a\u054b\3\2\2"+
		"\2\u054b\u054d\3\2\2\2\u054c\u053f\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u0557"+
		"\3\2\2\2\u054e\u054f\7\u00e7\2\2\u054f\u0554\5\\/\2\u0550\u0551\7\u020b"+
		"\2\2\u0551\u0553\5\\/\2\u0552\u0550\3\2\2\2\u0553\u0556\3\2\2\2\u0554"+
		"\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0558\3\2\2\2\u0556\u0554\3\2"+
		"\2\2\u0557\u054e\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055b\3\2\2\2\u0559"+
		"\u055a\7a\2\2\u055a\u055c\7\u00b0\2\2\u055b\u0559\3\2\2\2\u055b\u055c"+
		"\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055e\7\31\2\2\u055e\u055f\5\6\4\2"+
		"\u055fE\3\2\2\2\u0560\u0563\5H%\2\u0561\u0563\5N(\2\u0562\u0560\3\2\2"+
		"\2\u0562\u0561\3\2\2\2\u0563G\3\2\2\2\u0564\u0565\t\n\2\2\u0565\u0566"+
		"\7\u00d6\2\2\u0566\u0567\5\u01ae\u00d8\2\u0567\u0568\7\u0091\2\2\u0568"+
		"\u0572\5\u01ac\u00d7\2\u0569\u056a\7\u00e7\2\2\u056a\u056f\5J&\2\u056b"+
		"\u056c\7\u020b\2\2\u056c\u056e\5J&\2\u056d\u056b\3\2\2\2\u056e\u0571\3"+
		"\2\2\2\u056f\u056d\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0573\3\2\2\2\u0571"+
		"\u056f\3\2\2\2\u0572\u0569\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0578\3\2"+
		"\2\2\u0574\u0579\7a\2\2\u0575\u0579\7\u00ee\2\2\u0576\u0577\7w\2\2\u0577"+
		"\u0579\7\u008e\2\2\u0578\u0574\3\2\2\2\u0578\u0575\3\2\2\2\u0578\u0576"+
		"\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057f\5L\'\2\u057b\u057c\7\u020b\2"+
		"\2\u057c\u057e\5L\'\2\u057d\u057b\3\2\2\2\u057e\u0581\3\2\2\2\u057f\u057d"+
		"\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0584\3\2\2\2\u0581\u057f\3\2\2\2\u0582"+
		"\u0583\7\u00e7\2\2\u0583\u0585\7\30\2\2\u0584\u0582\3\2\2\2\u0584\u0585"+
		"\3\2\2\2\u0585\u0589\3\2\2\2\u0586\u0587\7\u008b\2\2\u0587\u0588\7a\2"+
		"\2\u0588\u058a\7\u00b0\2\2\u0589\u0586\3\2\2\2\u0589\u058a\3\2\2\2\u058a"+
		"\u058b\3\2\2\2\u058b\u058c\7\31\2\2\u058c\u058d\5\6\4\2\u058dI\3\2\2\2"+
		"\u058e\u0591\7\u0132\2\2\u058f\u0591\5\u00eav\2\u0590\u058e\3\2\2\2\u0590"+
		"\u058f\3\2\2\2\u0591K\3\2\2\2\u0592\u0593\t\f\2\2\u0593M\3\2\2\2\u0594"+
		"\u0595\t\n\2\2\u0595\u0596\7\u00d6\2\2\u0596\u0597\5\u01ae\u00d8\2\u0597"+
		"\u059b\7\u0091\2\2\u0598\u0599\7\24\2\2\u0599\u059c\7\u00c3\2\2\u059a"+
		"\u059c\7D\2\2\u059b\u0598\3\2\2\2\u059b\u059a\3\2\2\2\u059c\u05a6\3\2"+
		"\2\2\u059d\u059e\7\u00e7\2\2\u059e\u05a3\5J&\2\u059f\u05a0\7\u020b\2\2"+
		"\u05a0\u05a2\5J&\2\u05a1\u059f\3\2\2\2\u05a2\u05a5\3\2\2\2\u05a3\u05a1"+
		"\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a7\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6"+
		"\u059d\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05a9\t\r"+
		"\2\2\u05a9\u05ae\5P)\2\u05aa\u05ab\7\u020b\2\2\u05ab\u05ad\5L\'\2\u05ac"+
		"\u05aa\3\2\2\2\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2"+
		"\2\2\u05af\u05b1\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b1\u05b2\7\31\2\2\u05b2"+
		"\u05b3\5\6\4\2\u05b3O\3\2\2\2\u05b4\u05b5\5\u01e2\u00f2\2\u05b5Q\3\2\2"+
		"\2\u05b6\u05b7\t\n\2\2\u05b7\u05b8\7h\2\2\u05b8\u05c6\5\u01b0\u00d9\2"+
		"\u05b9\u05ba\7\u0209\2\2\u05ba\u05bf\5Z.\2\u05bb\u05bc\7\u020b\2\2\u05bc"+
		"\u05be\5Z.\2\u05bd\u05bb\3\2\2\2\u05be\u05c1\3\2\2\2\u05bf\u05bd\3\2\2"+
		"\2\u05bf\u05c0\3\2\2\2\u05c0\u05c2\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c2\u05c3"+
		"\7\u020a\2\2\u05c3\u05c7\3\2\2\2\u05c4\u05c5\7\u0209\2\2\u05c5\u05c7\7"+
		"\u020a\2\2\u05c6\u05b9\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c7\u05cb\3\2\2\2"+
		"\u05c8\u05cc\5T+\2\u05c9\u05cc\5V,\2\u05ca\u05cc\5X-\2\u05cb\u05c8\3\2"+
		"\2\2\u05cb\u05c9\3\2\2\2\u05cb\u05ca\3\2\2\2\u05cc\u05ce\3\2\2\2\u05cd"+
		"\u05cf\7\u020c\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cfS\3\2"+
		"\2\2\u05d0\u05d1\7\u00b4\2\2\u05d1\u05db\7\u00cd\2\2\u05d2\u05d3\7\u00e7"+
		"\2\2\u05d3\u05d8\5^\60\2\u05d4\u05d5\7\u020b\2\2\u05d5\u05d7\5^\60\2\u05d6"+
		"\u05d4\3\2\2\2\u05d7\u05da\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d8\u05d9\3\2"+
		"\2\2\u05d9\u05dc\3\2\2\2\u05da\u05d8\3\2\2\2\u05db\u05d2\3\2\2\2\u05db"+
		"\u05dc\3\2\2\2\u05dc\u05de\3\2\2\2\u05dd\u05df\7\31\2\2\u05de\u05dd\3"+
		"\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\7\u00b3\2\2"+
		"\u05e1\u05e2\5\64\33\2\u05e2U\3\2\2\2\u05e3\u05e4\7\u00b4\2\2\u05e4\u05e5"+
		"\7\u01f1\2\2\u05e5\u05ef\5\u00eex\2\u05e6\u05e7\7\u00e7\2\2\u05e7\u05ec"+
		"\5^\60\2\u05e8\u05e9\7\u020b\2\2\u05e9\u05eb\5^\60\2\u05ea\u05e8\3\2\2"+
		"\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05f0"+
		"\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05e6\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0"+
		"\u05f2\3\2\2\2\u05f1\u05f3\7\31\2\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3"+
		"\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f8\7\36\2\2\u05f5\u05f7\5\b\5\2\u05f6"+
		"\u05f5\3\2\2\2\u05f7\u05fa\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2"+
		"\2\2\u05f9\u05fb\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fb\u05fc\7\u00b3\2\2\u05fc"+
		"\u05fd\7S\2\2\u05fdW\3\2\2\2\u05fe\u05ff\7\u00b4\2\2\u05ff\u0609\5\u01d8"+
		"\u00ed\2\u0600\u0601\7\u00e7\2\2\u0601\u0606\5^\60\2\u0602\u0603\7\u020b"+
		"\2\2\u0603\u0605\5^\60\2\u0604\u0602\3\2\2\2\u0605\u0608\3\2\2\2\u0606"+
		"\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u060a\3\2\2\2\u0608\u0606\3\2"+
		"\2\2\u0609\u0600\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c\3\2\2\2\u060b"+
		"\u060d\7\31\2\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e\3"+
		"\2\2\2\u060e\u0612\7\36\2\2\u060f\u0611\5\b\5\2\u0610\u060f\3\2\2\2\u0611"+
		"\u0614\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3\2"+
		"\2\2\u0614\u0612\3\2\2\2\u0615\u0616\7\u00b3\2\2\u0616\u0618\5\u0112\u008a"+
		"\2\u0617\u0619\7\u020c\2\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619"+
		"\u061a\3\2\2\2\u061a\u061b\7S\2\2\u061bY\3\2\2\2\u061c\u0620\7\u01f1\2"+
		"\2\u061d\u061e\5\u01e0\u00f1\2\u061e\u061f\7\u0204\2\2\u061f\u0621\3\2"+
		"\2\2\u0620\u061d\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0623\3\2\2\2\u0622"+
		"\u0624\7\31\2\2\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\3"+
		"\2\2\2\u0625\u0627\5\u01d8\u00ed\2\u0626\u0628\7\u00e1\2\2\u0627\u0626"+
		"\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u062b\3\2\2\2\u0629\u062a\7\u01f8\2"+
		"\2\u062a\u062c\5\u01da\u00ee\2\u062b\u0629\3\2\2\2\u062b\u062c\3\2\2\2"+
		"\u062c\u062e\3\2\2\2\u062d\u062f\t\16\2\2\u062e\u062d\3\2\2\2\u062e\u062f"+
		"\3\2\2\2\u062f[\3\2\2\2\u0630\u0634\7\u0132\2\2\u0631\u0634\7\u01a2\2"+
		"\2\u0632\u0634\5\u00eav\2\u0633\u0630\3\2\2\2\u0633\u0631\3\2\2\2\u0633"+
		"\u0632\3\2\2\2\u0634]\3\2\2\2\u0635\u0642\7\u0132\2\2\u0636\u0642\7\u01b3"+
		"\2\2\u0637\u0638\7\u00b4\2\2\u0638\u0639\7\u008c\2\2\u0639\u063a\7\u0091"+
		"\2\2\u063a\u063b\7\u008c\2\2\u063b\u0642\7\u0154\2\2\u063c\u063d\7$\2"+
		"\2\u063d\u063e\7\u0091\2\2\u063e\u063f\7\u008c\2\2\u063f\u0642\7\u0154"+
		"\2\2\u0640\u0642\5\u00eav\2\u0641\u0635\3\2\2\2\u0641\u0636\3\2\2\2\u0641"+
		"\u0637\3\2\2\2\u0641\u063c\3\2\2\2\u0641\u0640\3\2\2\2\u0642_\3\2\2\2"+
		"\u0643\u0644\7;\2\2\u0644\u0645\7\u00cb\2\2\u0645\u0646\5\u01e0\u00f1"+
		"\2\u0646\u0647\7\u0091\2\2\u0647\u0648\5\u0160\u00b1\2\u0648\u0649\7\u0209"+
		"\2\2\u0649\u064a\5\u01b8\u00dd\2\u064a\u065d\7\u020a\2\2\u064b\u0651\7"+
		"\u00e7\2\2\u064c\u0652\7\u0142\2\2\u064d\u064e\7\u01b2\2\2\u064e\u064f"+
		"\7\u01f2\2\2\u064f\u0652\t\17\2\2\u0650\u0652\7\u01c4\2\2\u0651\u064c"+
		"\3\2\2\2\u0651\u064d\3\2\2\2\u0651\u0650\3\2\2\2\u0652\u0655\3\2\2\2\u0653"+
		"\u0654\7\u020b\2\2\u0654\u0656\7\u017d\2\2\u0655\u0653\3\2\2\2\u0655\u0656"+
		"\3\2\2\2\u0656\u065b\3\2\2\2\u0657\u0658\7\u020b\2\2\u0658\u0659\7\u0152"+
		"\2\2\u0659\u065a\7\u01f8\2\2\u065a\u065c\5\u01bc\u00df\2\u065b\u0657\3"+
		"\2\2\2\u065b\u065c\3\2\2\2\u065c\u065e\3\2\2\2\u065d\u064b\3\2\2\2\u065d"+
		"\u065e\3\2\2\2\u065e\u0660\3\2\2\2\u065f\u0661\7\u020c\2\2\u0660\u065f"+
		"\3\2\2\2\u0660\u0661\3\2\2\2\u0661a\3\2\2\2\u0662\u0663\7;\2\2\u0663\u0664"+
		"\7\u00cd\2\2\u0664\u0665\5\u01ac\u00d7\2\u0665\u0666\7\u0209\2\2\u0666"+
		"\u0668\5\u00f4{\2\u0667\u0669\7\u020b\2\2\u0668\u0667\3\2\2\2\u0668\u0669"+
		"\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066e\7\u020a\2\2\u066b\u066d\5d\63"+
		"\2\u066c\u066b\3\2\2\2\u066d\u0670\3\2\2\2\u066e\u066c\3\2\2\2\u066e\u066f"+
		"\3\2\2\2\u066f\u0674\3\2\2\2\u0670\u066e\3\2\2\2\u0671\u0672\7\u0091\2"+
		"\2\u0672\u0675\5\u01e0\u00f1\2\u0673\u0675\7H\2\2\u0674\u0671\3\2\2\2"+
		"\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0679\3\2\2\2\u0676\u0677"+
		"\7\u01cf\2\2\u0677\u067a\5\u01e0\u00f1\2\u0678\u067a\7H\2\2\u0679\u0676"+
		"\3\2\2\2\u0679\u0678\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067c\3\2\2\2\u067b"+
		"\u067d\7\u020c\2\2\u067c\u067b\3\2\2\2\u067c\u067d\3\2\2\2\u067dc\3\2"+
		"\2\2\u067e\u067f\7\u00e7\2\2\u067f\u0680\7\u0209\2\2\u0680\u0685\5\u0104"+
		"\u0083\2\u0681\u0682\7\u020b\2\2\u0682\u0684\5\u0104\u0083\2\u0683\u0681"+
		"\3\2\2\2\u0684\u0687\3\2\2\2\u0685\u0683\3\2\2\2\u0685\u0686\3\2\2\2\u0686"+
		"\u0688\3\2\2\2\u0687\u0685\3\2\2\2\u0688\u0689\7\u020a\2\2\u0689e\3\2"+
		"\2\2\u068a\u068b\5\u01e2\u00f2\2\u068b\u068f\7\u01f8\2\2\u068c\u0690\5"+
		"\u01e2\u00f2\2\u068d\u0690\5\u01bc\u00df\2\u068e\u0690\7\u01f2\2\2\u068f"+
		"\u068c\3\2\2\2\u068f\u068d\3\2\2\2\u068f\u068e\3\2\2\2\u0690g\3\2\2\2"+
		"\u0691\u0692\7;\2\2\u0692\u0693\7\u00e2\2\2\u0693\u0698\5\u01ae\u00d8"+
		"\2\u0694\u0695\7\u0209\2\2\u0695\u0696\5\u01b8\u00dd\2\u0696\u0697\7\u020a"+
		"\2\2\u0697\u0699\3\2\2\2\u0698\u0694\3\2\2\2\u0698\u0699\3\2\2\2\u0699"+
		"\u06a3\3\2\2\2\u069a\u069b\7\u00e7\2\2\u069b\u06a0\5j\66\2\u069c\u069d"+
		"\7\u020b\2\2\u069d\u069f\5j\66\2\u069e\u069c\3\2\2\2\u069f\u06a2\3\2\2"+
		"\2\u06a0\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a4\3\2\2\2\u06a2\u06a0"+
		"\3\2\2\2\u06a3\u069a\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5"+
		"\u06a6\7\31\2\2\u06a6\u06aa\5\64\33\2\u06a7\u06a8\7\u00e7\2\2\u06a8\u06a9"+
		"\7*\2\2\u06a9\u06ab\7\u0097\2\2\u06aa\u06a7\3\2\2\2\u06aa\u06ab\3\2\2"+
		"\2\u06ab\u06ad\3\2\2\2\u06ac\u06ae\7\u020c\2\2\u06ad\u06ac\3\2\2\2\u06ad"+
		"\u06ae\3\2\2\2\u06aei\3\2\2\2\u06af\u06b0\t\20\2\2\u06b0k\3\2\2\2\u06b1"+
		"\u06b2\7\25\2\2\u06b2\u06b3\7\u00cd\2\2\u06b3\u06da\5\u01ac\u00d7\2\u06b4"+
		"\u06b5\7\u00c6\2\2\u06b5\u06b6\7\u0209\2\2\u06b6\u06b7\7\u0162\2\2\u06b7"+
		"\u06b8\7\u01f8\2\2\u06b8\u06b9\t\21\2\2\u06b9\u06db\7\u020a\2\2\u06ba"+
		"\u06bb\7\23\2\2\u06bb\u06db\5\u00f6|\2\u06bc\u06bd\7\25\2\2\u06bd\u06be"+
		"\7\60\2\2\u06be\u06db\5\u00f8}\2\u06bf\u06c0\7P\2\2\u06c0\u06c1\7\60\2"+
		"\2\u06c1\u06db\5\u01e0\u00f1\2\u06c2\u06c3\7P\2\2\u06c3\u06c4\7\63\2\2"+
		"\u06c4\u06db\5\u01e0\u00f1\2\u06c5\u06c6\7\u00e7\2\2\u06c6\u06c7\7*\2"+
		"\2\u06c7\u06c8\7\23\2\2\u06c8\u06c9\7\63\2\2\u06c9\u06ca\5\u01e0\u00f1"+
		"\2\u06ca\u06cb\7c\2\2\u06cb\u06cc\7}\2\2\u06cc\u06cd\7\u0209\2\2\u06cd"+
		"\u06ce\5\u01b8\u00dd\2\u06ce\u06cf\7\u020a\2\2\u06cf\u06d0\7\u00ad\2\2"+
		"\u06d0\u06d1\5\u01ac\u00d7\2\u06d1\u06d2\7\u0209\2\2\u06d2\u06d3\5\u01b8"+
		"\u00dd\2\u06d3\u06d4\7\u020a\2\2\u06d4\u06db\3\2\2\2\u06d5\u06d6\7*\2"+
		"\2\u06d6\u06d7\7\63\2\2\u06d7\u06db\5\u01e0\u00f1\2\u06d8\u06d9\7\u01a1"+
		"\2\2\u06d9\u06db\5d\63\2\u06da\u06b4\3\2\2\2\u06da\u06ba\3\2\2\2\u06da"+
		"\u06bc\3\2\2\2\u06da\u06bf\3\2\2\2\u06da\u06c2\3\2\2\2\u06da\u06c5\3\2"+
		"\2\2\u06da\u06d5\3\2\2\2\u06da\u06d8\3\2\2\2\u06db\u06dd\3\2\2\2\u06dc"+
		"\u06de\7\u020c\2\2\u06dd\u06dc\3\2\2\2\u06dd\u06de\3\2\2\2\u06dem\3\2"+
		"\2\2\u06df\u06e0\7\25\2\2\u06e0\u06e3\7D\2\2\u06e1\u06e4\5\u01e0\u00f1"+
		"\2\u06e2\u06e4\7";
	private static final String _serializedATNSegment1 =
		"=\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e2\3\2\2\2\u06e4\u06f1\3\2\2\2\u06e5"+
		"\u06e6\7\u0173\2\2\u06e6\u06e7\7\u0176\2\2\u06e7\u06e8\7\u01f8\2\2\u06e8"+
		"\u06f2\5\u01e0\u00f1\2\u06e9\u06ea\7/\2\2\u06ea\u06f2\5\u01e0\u00f1\2"+
		"\u06eb\u06ec\7\u00c6\2\2\u06ec\u06ef\5p9\2\u06ed\u06ee\7\u00e7\2\2\u06ee"+
		"\u06f0\5\u009aN\2\u06ef\u06ed\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f2"+
		"\3\2\2\2\u06f1\u06e5\3\2\2\2\u06f1\u06e9\3\2\2\2\u06f1\u06eb\3\2\2\2\u06f2"+
		"\u06f4\3\2\2\2\u06f3\u06f5\7\u020c\2\2\u06f4\u06f3\3\2\2\2\u06f4\u06f5"+
		"\3\2\2\2\u06f5o\3\2\2\2\u06f6\u070d\5r:\2\u06f7\u070d\5t;\2\u06f8\u070d"+
		"\5x=\2\u06f9\u070d\5z>\2\u06fa\u070d\5|?\2\u06fb\u070d\5~@\2\u06fc\u070d"+
		"\5\u0080A\2\u06fd\u070d\5\u0082B\2\u06fe\u070d\5\u0084C\2\u06ff\u070d"+
		"\5\u0086D\2\u0700\u070d\5\u0088E\2\u0701\u0702\7\u013c\2\2\u0702\u070d"+
		"\5\u01a2\u00d2\2\u0703\u070d\5\u008aF\2\u0704\u070d\5\u008cG\2\u0705\u070d"+
		"\5\u008eH\2\u0706\u070d\5\u0090I\2\u0707\u070d\5\u0092J\2\u0708\u070d"+
		"\5\u0094K\2\u0709\u070d\5\u0096L\2\u070a\u070d\5\u0098M\2\u070b\u070d"+
		"\5\u009aN\2\u070c\u06f6\3\2\2\2\u070c\u06f7\3\2\2\2\u070c\u06f8\3\2\2"+
		"\2\u070c\u06f9\3\2\2\2\u070c\u06fa\3\2\2\2\u070c\u06fb\3\2\2\2\u070c\u06fc"+
		"\3\2\2\2\u070c\u06fd\3\2\2\2\u070c\u06fe\3\2\2\2\u070c\u06ff\3\2\2\2\u070c"+
		"\u0700\3\2\2\2\u070c\u0701\3\2\2\2\u070c\u0703\3\2\2\2\u070c\u0704\3\2"+
		"\2\2\u070c\u0705\3\2\2\2\u070c\u0706\3\2\2\2\u070c\u0707\3\2\2\2\u070c"+
		"\u0708\3\2\2\2\u070c\u0709\3\2\2\2\u070c\u070a\3\2\2\2\u070c\u070b\3\2"+
		"\2\2\u070dq\3\2\2\2\u070e\u070f\7\u00fb\2\2\u070f\u0720\5\u01bc\u00df"+
		"\2\u0710\u0711\7\u00fc\2\2\u0711\u0720\7\u008f\2\2\u0712\u0717\7\u0091"+
		"\2\2\u0713\u0714\7\u0152\2\2\u0714\u0715\7\u01f8\2\2\u0715\u0718\7\u0091"+
		"\2\2\u0716\u0718\7\u008f\2\2\u0717\u0713\3\2\2\2\u0717\u0716\3\2\2\2\u0718"+
		"\u0720\3\2\2\2\u0719\u071a\7\u00fd\2\2\u071a\u0720\5\u01bc\u00df\2\u071b"+
		"\u071c\7\u00fe\2\2\u071c\u0720\5\u01bc\u00df\2\u071d\u071e\7\u00ff\2\2"+
		"\u071e\u0720\t\7\2\2\u071f\u070e\3\2\2\2\u071f\u0710\3\2\2\2\u071f\u0712"+
		"\3\2\2\2\u071f\u0719\3\2\2\2\u071f\u071b\3\2\2\2\u071f\u071d\3\2\2\2\u0720"+
		"s\3\2\2\2\u0721\u0722\7\u0108\2\2\u0722\u0732\7\u01f8\2\2\u0723\u0733"+
		"\7\u008f\2\2\u0724\u072f\7\u0091\2\2\u0725\u072a\5v<\2\u0726\u0727\7\u020b"+
		"\2\2\u0727\u0729\5v<\2\u0728\u0726\3\2\2\2\u0729\u072c\3\2\2\2\u072a\u0728"+
		"\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u072e\3\2\2\2\u072c\u072a\3\2\2\2\u072d"+
		"\u0725\3\2\2\2\u072e\u0731\3\2\2\2\u072f\u072d\3\2\2\2\u072f\u0730\3\2"+
		"\2\2\u0730\u0733\3\2\2\2\u0731\u072f\3\2\2\2\u0732\u0723\3\2\2\2\u0732"+
		"\u0724\3\2\2\2\u0733u\3\2\2\2\u0734\u0735\7\u00fa\2\2\u0735\u0736\7\u01f8"+
		"\2\2\u0736\u073b\5\u01bc\u00df\2\u0737\u0738\7\u0107\2\2\u0738\u0739\7"+
		"\u01f8\2\2\u0739\u073b\t\22\2\2\u073a\u0734\3\2\2\2\u073a\u0737\3\2\2"+
		"\2\u073bw\3\2\2\2\u073c\u073d\7\64\2\2\u073d\u073e\7\u01f8\2\2\u073e\u073f"+
		"\t\t\2\2\u073fy\3\2\2\2\u0740\u0741\7\u0118\2\2\u0741\u0745\5\u01bc\u00df"+
		"\2\u0742\u0743\7\u0119\2\2\u0743\u0745\t\23\2\2\u0744\u0740\3\2\2\2\u0744"+
		"\u0742\3\2\2\2\u0745{\3\2\2\2\u0746\u0747\7\u011e\2\2\u0747\u0748\5\u01bc"+
		"\u00df\2\u0748}\3\2\2\2\u0749\u074a\7\u0132\2\2\u074a\u074b\5\u01bc\u00df"+
		"\2\u074b\177\3\2\2\2\u074c\u074d\t\24\2\2\u074d\u0081\3\2\2\2\u074e\u074f"+
		"\t\25\2\2\u074f\u0083\3\2\2\2\u0750\u0751\t\26\2\2\u0751\u0085\3\2\2\2"+
		"\u0752\u0753\7\u0125\2\2\u0753\u0754\7\u01f8\2\2\u0754\u0755\t\27\2\2"+
		"\u0755\u0087\3\2\2\2\u0756\u0757\7\u0120\2\2\u0757\u0770\5\u01bc\u00df"+
		"\2\u0758\u0759\7\u01d7\2\2\u0759\u0770\5\u01bc\u00df\2\u075a\u075b\7\u0123"+
		"\2\2\u075b\u075e\7\u01f8\2\2\u075c\u075f\5\u01e0\u00f1\2\u075d\u075f\7"+
		"\u01f4\2\2\u075e\u075c\3\2\2\2\u075e\u075d\3\2\2\2\u075f\u0770\3\2\2\2"+
		"\u0760\u0761\7\u0122\2\2\u0761\u0764\7\u01f8\2\2\u0762\u0765\5\u01e0\u00f1"+
		"\2\u0763\u0765\7\u01f4\2\2\u0764\u0762\3\2\2\2\u0764\u0763\3\2\2\2\u0765"+
		"\u0770\3\2\2\2\u0766\u0767\7\u0177\2\2\u0767\u0768\7\u01f8\2\2\u0768\u0770"+
		"\t\7\2\2\u0769\u076a\7\u01d6\2\2\u076a\u076b\7\u01f8\2\2\u076b\u0770\t"+
		"\7\2\2\u076c\u076d\7\u01d9\2\2\u076d\u076e\7\u01f8\2\2\u076e\u0770\7\u01f2"+
		"\2\2\u076f\u0756\3\2\2\2\u076f\u0758\3\2\2\2\u076f\u075a\3\2\2\2\u076f"+
		"\u0760\3\2\2\2\u076f\u0766\3\2\2\2\u076f\u0769\3\2\2\2\u076f\u076c\3\2"+
		"\2\2\u0770\u0089\3\2\2\2\u0771\u0772\7\25\2\2\u0772\u0773\7D\2\2\u0773"+
		"\u0774\7\u00c6\2\2\u0774\u0775\7\u014a\2\2\u0775\u008b\3\2\2\2\u0776\u0777"+
		"\7\u0172\2\2\u0777\u0778\t\7\2\2\u0778\u008d\3\2\2\2\u0779\u077a\7\u018e"+
		"\2\2\u077a\u077b\t\30\2\2\u077b\u008f\3\2\2\2\u077c\u077d\7\u01a4\2\2"+
		"\u077d\u0783\t\31\2\2\u077e\u077f\7\u01d5\2\2\u077f\u0783\5\u01bc\u00df"+
		"\2\u0780\u0781\7\u018d\2\2\u0781\u0783\t\32\2\2\u0782\u077c\3\2\2\2\u0782"+
		"\u077e\3\2\2\2\u0782\u0780\3\2\2\2\u0783\u0091\3\2\2\2\u0784\u078b\7\u0131"+
		"\2\2\u0785\u078b\7\u012c\2\2\u0786\u078b\7\u0178\2\2\u0787\u078b\7\u0133"+
		"\2\2\u0788\u0789\7\u014c\2\2\u0789\u078b\5\u01bc\u00df\2\u078a\u0784\3"+
		"\2\2\2\u078a\u0785\3\2\2\2\u078a\u0786\3\2\2\2\u078a\u0787\3\2\2\2\u078a"+
		"\u0788\3\2\2\2\u078b\u0093\3\2\2\2\u078c\u078d\7\u00f1\2\2\u078d\u0792"+
		"\5\u01bc\u00df\2\u078e\u078f\7\u019e\2\2\u078f\u0792\t\7\2\2\u0790\u0792"+
		"\t\7\2\2\u0791\u078c\3\2\2\2\u0791\u078e\3\2\2\2\u0791\u0790\3\2\2\2\u0792"+
		"\u0095\3\2\2\2\u0793\u0794\7\u00f3\2\2\u0794\u07a9\5\u01bc\u00df\2\u0795"+
		"\u0796\7\u00f2\2\2\u0796\u07a9\5\u01bc\u00df\2\u0797\u0798\7\u00f4\2\2"+
		"\u0798\u07a9\5\u01bc\u00df\2\u0799\u079a\7\u00f5\2\2\u079a\u07a9\5\u01bc"+
		"\u00df\2\u079b\u079c\7\u00f7\2\2\u079c\u07a9\5\u01bc\u00df\2\u079d\u079e"+
		"\7\u010e\2\2\u079e\u079f\7\u01f8\2\2\u079f\u07a9\7\u01f2\2\2\u07a0\u07a1"+
		"\7\u0110\2\2\u07a1\u07a9\5\u01bc\u00df\2\u07a2\u07a3\7\u0182\2\2\u07a3"+
		"\u07a9\5\u01bc\u00df\2\u07a4\u07a5\7\u019a\2\2\u07a5\u07a9\5\u01bc\u00df"+
		"\2\u07a6\u07a7\7\u01a5\2\2\u07a7\u07a9\5\u01bc\u00df\2\u07a8\u0793\3\2"+
		"\2\2\u07a8\u0795\3\2\2\2\u07a8\u0797\3\2\2\2\u07a8\u0799\3\2\2\2\u07a8"+
		"\u079b\3\2\2\2\u07a8\u079d\3\2\2\2\u07a8\u07a0\3\2\2\2\u07a8\u07a2\3\2"+
		"\2\2\u07a8\u07a4\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a9\u0097\3\2\2\2\u07aa"+
		"\u07ab\7\u01cd\2\2\u07ab\u07ac\7\u01f8\2\2\u07ac\u07ad\7\u01f2\2\2\u07ad"+
		"\u07ae\t\33\2\2\u07ae\u0099\3\2\2\2\u07af\u07b0\7\u00b8\2\2\u07b0\u07b1"+
		"\7\u00ee\2\2\u07b1\u07b6\7\u01f2\2\2\u07b2\u07b3\7\u00b8\2\2\u07b3\u07b6"+
		"\7\u0150\2\2\u07b4\u07b6\7\u017f\2\2\u07b5\u07af\3\2\2\2\u07b5\u07b2\3"+
		"\2\2\2\u07b5\u07b4\3\2\2\2\u07b6\u009b\3\2\2\2\u07b7\u07b8\7P\2\2\u07b8"+
		"\u07bb\7t\2\2\u07b9\u07ba\7q\2\2\u07ba\u07bc\7Z\2\2\u07bb\u07b9\3\2\2"+
		"\2\u07bb\u07bc\3\2\2\2\u07bc\u07ca\3\2\2\2\u07bd\u07be\5\u01e0\u00f1\2"+
		"\u07be\u07bf\7\u0204\2\2\u07bf\u07c1\3\2\2\2\u07c0\u07bd\3\2\2\2\u07c0"+
		"\u07c1\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\5\u01e0\u00f1\2\u07c3\u07c4"+
		"\7\u0204\2\2\u07c4\u07c5\5\u01e0\u00f1\2\u07c5\u07cb\3\2\2\2\u07c6\u07c7"+
		"\5\u01e0\u00f1\2\u07c7\u07c8\7\u0091\2\2\u07c8\u07c9\5\u01ac\u00d7\2\u07c9"+
		"\u07cb\3\2\2\2\u07ca\u07c0\3\2\2\2\u07ca\u07c6\3\2\2\2\u07cb\u07cd\3\2"+
		"\2\2\u07cc\u07ce\7\u020c\2\2\u07cd\u07cc\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce"+
		"\u009d\3\2\2\2\u07cf\u07d0\7P\2\2\u07d0\u07d3\t\13\2\2\u07d1\u07d2\7q"+
		"\2\2\u07d2\u07d4\7Z\2\2\u07d3\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4"+
		"\u07d5\3\2\2\2\u07d5\u07da\5\u01b0\u00d9\2\u07d6\u07d7\7\u020b\2\2\u07d7"+
		"\u07d9\5\u01b0\u00d9\2\u07d8\u07d6\3\2\2\2\u07d9\u07dc\3\2\2\2\u07da\u07d8"+
		"\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07de\3\2\2\2\u07dc\u07da\3\2\2\2\u07dd"+
		"\u07df\7\u020c\2\2\u07de\u07dd\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u009f"+
		"\3\2\2\2\u07e0\u07e3\5\u00a2R\2\u07e1\u07e3\5\u00a4S\2\u07e2\u07e0\3\2"+
		"\2\2\u07e2\u07e1\3\2\2\2\u07e3\u00a1\3\2\2\2\u07e4\u07e5\7P\2\2\u07e5"+
		"\u07e8\7\u00d6\2\2\u07e6\u07e7\7q\2\2\u07e7\u07e9\7Z\2\2\u07e8\u07e6\3"+
		"\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ef\5\u01ae\u00d8"+
		"\2\u07eb\u07ec\7\u020b\2\2\u07ec\u07ee\5\u01ae\u00d8\2\u07ed\u07eb\3\2"+
		"\2\2\u07ee\u07f1\3\2\2\2\u07ef\u07ed\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0"+
		"\u07f3\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f2\u07f4\7\u020c\2\2\u07f3\u07f2"+
		"\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u00a3\3\2\2\2\u07f5\u07f6\7P\2\2\u07f6"+
		"\u07f9\7\u00d6\2\2\u07f7\u07f8\7q\2\2\u07f8\u07fa\7Z\2\2\u07f9\u07f7\3"+
		"\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u0800\5\u01ae\u00d8"+
		"\2\u07fc\u07fd\7\u020b\2\2\u07fd\u07ff\5\u01ae\u00d8\2\u07fe\u07fc\3\2"+
		"\2\2\u07ff\u0802\3\2\2\2\u0800\u07fe\3\2\2\2\u0800\u0801\3\2\2\2\u0801"+
		"\u0803\3\2\2\2\u0802\u0800\3\2\2\2\u0803\u0807\7\u0091\2\2\u0804\u0808"+
		"\7D\2\2\u0805\u0806\7\24\2\2\u0806\u0808\7\u00c3\2\2\u0807\u0804\3\2\2"+
		"\2\u0807\u0805\3\2\2\2\u0808\u080a\3\2\2\2\u0809\u080b\7\u020c\2\2\u080a"+
		"\u0809\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u00a5\3\2\2\2\u080c\u080d\7P"+
		"\2\2\u080d\u0810\7h\2\2\u080e\u080f\7q\2\2\u080f\u0811\7Z\2\2\u0810\u080e"+
		"\3\2\2\2\u0810\u0811\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0817\5\u01b0\u00d9"+
		"\2\u0813\u0814\7\u020b\2\2\u0814\u0816\5\u01b0\u00d9\2\u0815\u0813\3\2"+
		"\2\2\u0816\u0819\3\2\2\2\u0817\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818"+
		"\u081b\3\2\2\2\u0819\u0817\3\2\2\2\u081a\u081c\7\u020c\2\2\u081b\u081a"+
		"\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u00a7\3\2\2\2\u081d\u081e\7P\2\2\u081e"+
		"\u0822\7\u00cb\2\2\u081f\u0820\5\u01ac\u00d7\2\u0820\u0821\7\u0204\2\2"+
		"\u0821\u0823\3\2\2\2\u0822\u081f\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0824"+
		"\3\2\2\2\u0824\u0825\5\u01e0\u00f1\2\u0825\u0826\7\u020c\2\2\u0826\u00a9"+
		"\3\2\2\2\u0827\u0828\7P\2\2\u0828\u082b\7\u00cd\2\2\u0829\u082a\7q\2\2"+
		"\u082a\u082c\7Z\2\2\u082b\u0829\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u082d"+
		"\3\2\2\2\u082d\u082f\5\u01ac\u00d7\2\u082e\u0830\7\u020c\2\2\u082f\u082e"+
		"\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u00ab\3\2\2\2\u0831\u0832\7P\2\2\u0832"+
		"\u0835\7\u00e2\2\2\u0833\u0834\7q\2\2\u0834\u0836\7Z\2\2\u0835\u0833\3"+
		"\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\3\2\2\2\u0837\u083c\5\u01ae\u00d8"+
		"\2\u0838\u0839\7\u020b\2\2\u0839\u083b\5\u01ae\u00d8\2\u083a\u0838\3\2"+
		"\2\2\u083b\u083e\3\2\2\2\u083c\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d"+
		"\u0840\3\2\2\2\u083e\u083c\3\2\2\2\u083f\u0841\7\u020c\2\2\u0840\u083f"+
		"\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u00ad\3\2\2\2\u0842\u0843\7;\2\2\u0843"+
		"\u0844\7\u01da\2\2\u0844\u0849\5\u01ae\u00d8\2\u0845\u0846\7f\2\2\u0846"+
		"\u0847\5\u01d8\u00ed\2\u0847\u0848\5\u01da\u00ee\2\u0848\u084a\3\2\2\2"+
		"\u0849\u0845\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u0851\3\2\2\2\u084b\u084c"+
		"\7\31\2\2\u084c\u084d\7\u00cd\2\2\u084d\u084e\7\u0209\2\2\u084e\u084f"+
		"\5\u00f4{\2\u084f\u0850\7\u020a\2\2\u0850\u0852\3\2\2\2\u0851\u084b\3"+
		"\2\2\2\u0851\u0852\3\2\2\2\u0852\u00af\3\2\2\2\u0853\u0854\7P\2\2\u0854"+
		"\u0857\7\u01da\2\2\u0855\u0856\7q\2\2\u0856\u0858\7Z\2\2\u0857\u0855\3"+
		"\2\2\2\u0857\u0858\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085a\5\u01ae\u00d8"+
		"\2\u085a\u00b1\3\2\2\2\u085b\u085e\5\u00b4[\2\u085c\u085e\5\u00b6\\\2"+
		"\u085d\u085b\3\2\2\2\u085d\u085c\3\2\2\2\u085e\u00b3\3\2\2\2\u085f\u0860"+
		"\7\u0094\2\2\u0860\u0861\7\u0209\2\2\u0861\u0862\5\u01e0\u00f1\2\u0862"+
		"\u0863\7\u020b\2\2\u0863\u0864\7\u01f4\2\2\u0864\u0865\7\u020a\2\2\u0865"+
		"\u00b5\3\2\2\2\u0866\u0867\7\u0093\2\2\u0867\u0868\7\u0209\2\2\u0868\u0869"+
		"\7\u01f4\2\2\u0869\u086a\7\u020b\2\2\u086a\u086b\7\u01f4\2\2\u086b\u086c"+
		"\7\u020a\2\2\u086c\u086e\7\u0204\2\2\u086d\u086f\5\u01e0\u00f1\2\u086e"+
		"\u086d\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u0872\7\u0204"+
		"\2\2\u0871\u0873\5\u01e0\u00f1\2\u0872\u0871\3\2\2\2\u0872\u0873\3\2\2"+
		"\2\u0873\u0874\3\2\2\2\u0874\u0875\7\u0204\2\2\u0875\u0876\5\u01e0\u00f1"+
		"\2\u0876\u00b7\3\2\2\2\u0877\u0878\7G\2\2\u0878\u087a\7\u01f1\2\2\u0879"+
		"\u087b\7\31\2\2\u087a\u0879\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087c\3"+
		"\2\2\2\u087c\u087e\5\u00eex\2\u087d\u087f\7\u020c\2\2\u087e\u087d\3\2"+
		"\2\2\u087e\u087f\3\2\2\2\u087f\u08a3\3\2\2\2\u0880\u0881\7G\2\2\u0881"+
		"\u0886\5\u00ecw\2\u0882\u0883\7\u020b\2\2\u0883\u0885\5\u00ecw\2\u0884"+
		"\u0882\3\2\2\2\u0885\u0888\3\2\2\2\u0886\u0884\3\2\2\2\u0886\u0887\3\2"+
		"\2\2\u0887\u088a\3\2\2\2\u0888\u0886\3\2\2\2\u0889\u088b\7\u020c\2\2\u088a"+
		"\u0889\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u08a3\3\2\2\2\u088c\u088d\7G"+
		"\2\2\u088d\u088f\7\u01f1\2\2\u088e\u0890\7\31\2\2\u088f\u088e\3\2\2\2"+
		"\u088f\u0890\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0893\5\u00f0y\2\u0892"+
		"\u0894\7\u020c\2\2\u0893\u0892\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u08a3"+
		"\3\2\2\2\u0895\u0896\7\u00e7\2\2\u0896\u0897\7\u01ea\2\2\u0897\u0898\7"+
		"\u0209\2\2\u0898\u089a\7\u01f4\2\2\u0899\u089b\7\u020b\2\2\u089a\u0899"+
		"\3\2\2\2\u089a\u089b\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089d\7\31\2\2"+
		"\u089d\u089e\5\u01e0\u00f1\2\u089e\u08a0\7\u020a\2\2\u089f\u08a1\7\u020c"+
		"\2\2\u08a0\u089f\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08a3\3\2\2\2\u08a2"+
		"\u0877\3\2\2\2\u08a2\u0880\3\2\2\2\u08a2\u088c\3\2\2\2\u08a2\u0895\3\2"+
		"\2\2\u08a3\u00b9\3\2\2\2\u08a4\u08a6\7,\2\2\u08a5\u08a7\7\u0146\2\2\u08a6"+
		"\u08a5\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08aa\5\u01ba"+
		"\u00de\2\u08a9\u08ab\7\u020c\2\2\u08aa\u08a9\3\2\2\2\u08aa\u08ab\3\2\2"+
		"\2\u08ab\u08bf\3\2\2\2\u08ac\u08ae\7F\2\2\u08ad\u08af\7\u0146\2\2\u08ae"+
		"\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08b2\5\u01ba"+
		"\u00de\2\u08b1\u08b3\7\u020c\2\2\u08b2\u08b1\3\2\2\2\u08b2\u08b3\3\2\2"+
		"\2\u08b3\u08bf\3\2\2\2\u08b4\u08bf\5\u0106\u0084\2\u08b5\u08bf\5\u010c"+
		"\u0087\2\u08b6\u08b8\7\u0092\2\2\u08b7\u08b9\7\u0146\2\2\u08b8\u08b7\3"+
		"\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08bc\5\u01ba\u00de"+
		"\2\u08bb\u08bd\7\u020c\2\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd"+
		"\u08bf\3\2\2\2\u08be\u08a4\3\2\2\2\u08be\u08ac\3\2\2\2\u08be\u08b4\3\2"+
		"\2\2\u08be\u08b5\3\2\2\2\u08be\u08b6\3\2\2\2\u08bf\u00bb\3\2\2\2\u08c0"+
		"\u08c3\7Y\2\2\u08c1\u08c2\7\u01f1\2\2\u08c2\u08c4\7\u01f8\2\2\u08c3\u08c1"+
		"\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c7\3\2\2\2\u08c5\u08c8\5\u01b0\u00d9"+
		"\2\u08c6\u08c8\5\u0112\u008a\2\u08c7\u08c5\3\2\2\2\u08c7\u08c6\3\2\2\2"+
		"\u08c8\u08d1\3\2\2\2\u08c9\u08ce\5\u00be`\2\u08ca\u08cb\7\u020b\2\2\u08cb"+
		"\u08cd\5\u00be`\2\u08cc\u08ca\3\2\2\2\u08cd\u08d0\3\2\2\2\u08ce\u08cc"+
		"\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d2\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d1"+
		"\u08c9\3\2\2\2\u08d1\u08d2\3\2\2\2\u08d2\u08d4\3\2\2\2\u08d3\u08d5\7\u020c"+
		"\2\2\u08d4\u08d3\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08ed\3\2\2\2\u08d6"+
		"\u08d7\7Y\2\2\u08d7\u08d8\7\u0209\2\2\u08d8\u08dd\5\u00c0a\2\u08d9\u08da"+
		"\7\u0211\2\2\u08da\u08dc\5\u00c0a\2\u08db\u08d9\3\2\2\2\u08dc\u08df\3"+
		"\2\2\2\u08dd\u08db\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e0\3\2\2\2\u08df"+
		"\u08dd\3\2\2\2\u08e0\u08e7\7\u020a\2\2\u08e1\u08e3\7\31\2\2\u08e2\u08e1"+
		"\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e5\t\34\2\2"+
		"\u08e5\u08e6\7\u01f8\2\2\u08e6\u08e8\7\u01f4\2\2\u08e7\u08e2\3\2\2\2\u08e7"+
		"\u08e8\3\2\2\2\u08e8\u08ea\3\2\2\2\u08e9\u08eb\7\u020c\2\2\u08ea\u08e9"+
		"\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ed\3\2\2\2\u08ec\u08c0\3\2\2\2\u08ec"+
		"\u08d6\3\2\2\2\u08ed\u00bd\3\2\2\2\u08ee\u08ef\7\u01f1\2\2\u08ef\u08f1"+
		"\7\u01f8\2\2\u08f0\u08ee\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08fb\3\2\2"+
		"\2\u08f2\u08f5\5\u0110\u0089\2\u08f3\u08f5\5\u01e0\u00f1\2\u08f4\u08f2"+
		"\3\2\2\2\u08f4\u08f3\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6\u08f8\t\35\2\2"+
		"\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fc\3\2\2\2\u08f9\u08fc"+
		"\7H\2\2\u08fa\u08fc\7\u008c\2\2\u08fb\u08f4\3\2\2\2\u08fb\u08f9\3\2\2"+
		"\2\u08fb\u08fa\3\2\2\2\u08fc\u00bf\3\2\2\2\u08fd\u08fe\t\3\2\2\u08fe\u00c1"+
		"\3\2\2\2\u08ff\u0901\5\u00eav\2\u0900\u0902\7\u020c\2\2\u0901\u0900\3"+
		"\2\2\2\u0901\u0902\3\2\2\2\u0902\u093b\3\2\2\2\u0903\u090f\7k\2\2\u0904"+
		"\u0906\7\24\2\2\u0905\u0907\7\u0195\2\2\u0906\u0905\3\2\2\2\u0906\u0907"+
		"\3\2\2\2\u0907\u0910\3\2\2\2\u0908\u090d\5\u00dco\2\u0909\u090a\7\u0209"+
		"\2\2\u090a\u090b\5\u01b8\u00dd\2\u090b\u090c\7\u020a\2\2\u090c\u090e\3"+
		"\2\2\2\u090d\u0909\3\2\2\2\u090d\u090e\3\2\2\2\u090e\u0910\3\2\2\2\u090f"+
		"\u0904\3\2\2\2\u090f\u0908\3\2\2\2\u0910\u0913\3\2\2\2\u0911\u0912\7\u0091"+
		"\2\2\u0912\u0914\5\u01ac\u00d7\2\u0913\u0911\3\2\2\2\u0913\u0914\3\2\2"+
		"\2\u0914\u0915\3\2\2\2\u0915\u0916\7\u00d2\2\2\u0916\u091b\5\u01e0\u00f1"+
		"\2\u0917\u0918\7\u020b\2\2\u0918\u091a\5\u01e0\u00f1\2\u0919\u0917\3\2"+
		"\2\2\u091a\u091d\3\2\2\2\u091b\u0919\3\2\2\2\u091b\u091c\3\2\2\2\u091c"+
		"\u0921\3\2\2\2\u091d\u091b\3\2\2\2\u091e\u091f\7\u00e7\2\2\u091f\u0920"+
		"\7k\2\2\u0920\u0922\7\u0097\2\2\u0921\u091e\3\2\2\2\u0921\u0922\3\2\2"+
		"\2\u0922\u0925\3\2\2\2\u0923\u0924\7\31\2\2\u0924\u0926\5\u01e0\u00f1"+
		"\2\u0925\u0923\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0928\3\2\2\2\u0927\u0929"+
		"\7\u020c\2\2\u0928\u0927\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u093b\3\2\2"+
		"\2\u092a\u0931\7\u00b5\2\2\u092b\u092c\7\u0209\2\2\u092c\u092d\7\u00e7"+
		"\2\2\u092d\u092e\7\u0113\2\2\u092e\u092f\7\u01f8\2\2\u092f\u0930\7\u01f1"+
		"\2\2\u0930\u0932\7\u020a\2\2\u0931\u092b\3\2\2\2\u0931\u0932\3\2\2\2\u0932"+
		"\u0934\3\2\2\2\u0933\u0935\7\u020c\2\2\u0934\u0933\3\2\2\2\u0934\u0935"+
		"\3\2\2\2\u0935\u093b\3\2\2\2\u0936\u093b\5\u00ceh\2\u0937\u093b\5\u00d0"+
		"i\2\u0938\u093b\5\u00d2j\2\u0939\u093b\5\u00c4c\2\u093a\u08ff\3\2\2\2"+
		"\u093a\u0903\3\2\2\2\u093a\u092a\3\2\2\2\u093a\u0936\3\2\2\2\u093a\u0937"+
		"\3\2\2\2\u093a\u0938\3\2\2\2\u093a\u0939\3\2\2\2\u093b\u00c3\3\2\2\2\u093c"+
		"\u093d\7;\2\2\u093d\u093e\7\'\2\2\u093e\u0941\5\u01e0\u00f1\2\u093f\u0940"+
		"\7\34\2\2\u0940\u0942\5\u01e0\u00f1\2\u0941\u093f\3\2\2\2\u0941\u0942"+
		"\3\2\2\2\u0942\u0946\3\2\2\2\u0943\u0944\7f\2\2\u0944\u0947\5\u00c6d\2"+
		"\u0945\u0947\5\u00caf\2\u0946\u0943\3\2\2\2\u0946\u0945\3\2\2\2\u0947"+
		"\u094e\3\2\2\2\u0948\u0949\7\u00ec\2\2\u0949\u094a\7a\2\2\u094a\u094b"+
		"\7\36\2\2\u094b\u094c\7\u0128\2\2\u094c\u094d\7\u01f8\2\2\u094d\u094f"+
		"\t\7\2\2\u094e\u0948\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u00c5\3\2\2\2\u0950"+
		"\u0951\7\u00f8\2\2\u0951\u0962\5\u01e0\u00f1\2\u0952\u0954\7\u0134\2\2"+
		"\u0953\u0952\3\2\2\2\u0953\u0954\3\2\2\2\u0954\u0955\3\2\2\2\u0955\u0956"+
		"\7^\2\2\u0956\u0957\7\u01f8\2\2\u0957\u095f\7\u01f4\2\2\u0958\u0959\7"+
		"\u00e7\2\2\u0959\u095a\7\u0194\2\2\u095a\u095b\7}\2\2\u095b\u095c\7\u0209"+
		"\2\2\u095c\u095d\5\u00c8e\2\u095d\u095e\7\u020a\2\2\u095e\u0960\3\2\2"+
		"\2\u095f\u0958\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0962\3\2\2\2\u0961\u0950"+
		"\3\2\2\2\u0961\u0953\3\2\2\2\u0962\u00c7\3\2\2\2\u0963\u0964\t\36\2\2"+
		"\u0964\u0965\7\u01f8\2\2\u0965\u096c\7\u01f4\2\2\u0966\u0967\7\u020b\2"+
		"\2\u0967\u0968\t\37\2\2\u0968\u0969\7#\2\2\u0969\u096a\7\u009e\2\2\u096a"+
		"\u096b\7\u01f8\2\2\u096b\u096d\7\u01f4\2\2\u096c\u0966\3\2\2\2\u096c\u096d"+
		"\3\2\2\2\u096d\u00c9\3\2\2\2\u096e\u096f\7\u0132\2\2\u096f\u0970\7#\2"+
		"\2\u0970\u0971\7\u009e\2\2\u0971\u0972\7\u01f8\2\2\u0972\u0974\7\u01f4"+
		"\2\2\u0973\u096e\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975\3\2\2\2\u0975"+
		"\u0976\7\u00e7\2\2\u0976\u0977\7\u01c8\2\2\u0977\u0978\7\u01f8\2\2\u0978"+
		"\u097d\7\u01f4\2\2\u0979\u097a\7\u020b\2\2\u097a\u097c\5\u00ccg\2\u097b"+
		"\u0979\3\2\2\2\u097c\u097f\3\2\2\2\u097d\u097b\3\2\2\2\u097d\u097e\3\2"+
		"\2\2\u097e\u00cb\3\2\2\2\u097f\u097d\3\2\2\2\u0980\u0981\t \2\2\u0981"+
		"\u0982\7\u01f8\2\2\u0982\u0983\7\u01f4\2\2\u0983\u00cd\3\2\2\2\u0984\u0985"+
		"\7\u0092\2\2\u0985\u0986\7\u01cb\2\2\u0986\u0987\7}\2\2\u0987\u0988\5"+
		"\u01e0\u00f1\2\u0988\u0989\7\u0121\2\2\u0989\u098a\7#\2\2\u098a\u098b"+
		"\5\u00dan\2\u098b\u0994\3\2\2\2\u098c\u098d\7\u0092\2\2\u098d\u098e\7"+
		"\u0166\2\2\u098e\u098f\7\u0121\2\2\u098f\u0990\7#\2\2\u0990\u0991\7\u009e"+
		"\2\2\u0991\u0992\7\u01f8\2\2\u0992\u0994\7\u01f4\2\2\u0993\u0984\3\2\2"+
		"\2\u0993\u098c\3\2\2\2\u0994\u00cf\3\2\2\2\u0995\u0996\7,\2\2\u0996\u0997"+
		"\7\u01cb\2\2\u0997\u0998\7}\2\2\u0998\u09a0\5\u01e0\u00f1\2\u0999\u099a"+
		"\7,\2\2\u099a\u099b\7\24\2\2\u099b\u099c\7\u01cb\2\2\u099c\u09a0\7\u015c"+
		"\2\2\u099d\u099e\7,\2\2\u099e\u09a0\7\u0166\2\2\u099f\u0995\3\2\2\2\u099f"+
		"\u0999\3\2\2\2\u099f\u099d\3\2\2\2\u09a0\u00d1\3\2\2\2\u09a1\u09a2\7;"+
		"\2\2\u09a2\u09a3\7\u0166\2\2\u09a3\u09a4\7\u0132\2\2\u09a4\u09a5\7#\2"+
		"\2\u09a5\u09a6\7\u009e\2\2\u09a6\u09a7\7\u01f8\2\2\u09a7\u09c4\7\u01f4"+
		"\2\2\u09a8\u09a9\7;\2\2\u09a9\u09aa\7\u01cb\2\2\u09aa\u09ab\7}\2\2\u09ab"+
		"\u09ae\5\u01e0\u00f1\2\u09ac\u09ad\7\34\2\2\u09ad\u09af\5\u01e0\u00f1"+
		"\2\u09ae\u09ac\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u09b3\3\2\2\2\u09b0\u09b1"+
		"\7f\2\2\u09b1\u09b2\7\u0197\2\2\u09b2\u09b4\5\u01e0\u00f1\2\u09b3\u09b0"+
		"\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09bf\7\u00e7\2"+
		"\2\u09b6\u09bb\5\u00d4k\2\u09b7\u09b8\7\u0132\2\2\u09b8\u09b9\7#\2\2\u09b9"+
		"\u09bb\5\u00d8m\2\u09ba\u09b6\3\2\2\2\u09ba\u09b7\3\2\2\2\u09bb\u09bd"+
		"\3\2\2\2\u09bc\u09be\7\u020b\2\2\u09bd\u09bc\3\2\2\2\u09bd\u09be\3\2\2"+
		"\2\u09be\u09c0\3\2\2\2\u09bf\u09ba\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09bf"+
		"\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c4\3\2\2\2\u09c3\u09a1\3\2\2\2\u09c3"+
		"\u09a8\3\2\2\2\u09c4\u00d3\3\2\2\2\u09c5\u09c6\7\u015d\2\2\u09c6\u09c7"+
		"\7\u01f8\2\2\u09c7\u09d5\7\u01f4\2\2\u09c8\u09c9\7\u00ef\2\2\u09c9\u09ca"+
		"\7\u01f8\2\2\u09ca\u09d5\5\u00d6l\2\u09cb\u09cc\7\u014e\2\2\u09cc\u09cd"+
		"\7\u01f8\2\2\u09cd\u09d5\7\u01f4\2\2\u09ce\u09cf\7\u0198\2\2\u09cf\u09d0"+
		"\7\u01f8\2\2\u09d0\u09d5\7\u01f4\2\2\u09d1\u09d2\7\u0117\2\2\u09d2\u09d3"+
		"\7\u01f8\2\2\u09d3\u09d5\t!\2\2\u09d4\u09c5\3\2\2\2\u09d4\u09c8\3\2\2"+
		"\2\u09d4\u09cb\3\2\2\2\u09d4\u09ce\3\2\2\2\u09d4\u09d1\3\2\2\2\u09d5\u00d5"+
		"\3\2\2\2\u09d6\u09d7\t\"\2\2\u09d7\u00d7\3\2\2\2\u09d8\u09d9\7\'\2\2\u09d9"+
		"\u09e4\5\u01e0\u00f1\2\u09da\u09db\7\33\2\2\u09db\u09dc\7}\2\2\u09dc\u09e4"+
		"\5\u01e0\u00f1\2\u09dd\u09de\7\u01cb\2\2\u09de\u09df\7}\2\2\u09df\u09e4"+
		"\5\u01e0\u00f1\2\u09e0\u09e1\7\u009e\2\2\u09e1\u09e2\7\u01f8\2\2\u09e2"+
		"\u09e4\7\u01f4\2\2\u09e3\u09d8\3\2\2\2\u09e3\u09da\3\2\2\2\u09e3\u09dd"+
		"\3\2\2\2\u09e3\u09e0\3\2\2\2\u09e4\u00d9\3\2\2\2\u09e5\u09e6\7\'\2\2\u09e6"+
		"\u09eb\5\u01e0\u00f1\2\u09e7\u09e8\7\u00e7\2\2\u09e8\u09e9\7\u009e\2\2"+
		"\u09e9\u09ea\7\u01f8\2\2\u09ea\u09ec\7\u01f4\2\2\u09eb\u09e7\3\2\2\2\u09eb"+
		"\u09ec\3\2\2\2\u09ec\u09fd\3\2\2\2\u09ed\u09ee\7\33\2\2\u09ee\u09ef\7"+
		"}\2\2\u09ef\u09f4\5\u01e0\u00f1\2\u09f0\u09f1\7\u00e7\2\2\u09f1\u09f2"+
		"\7\u009e\2\2\u09f2\u09f3\7\u01f8\2\2\u09f3\u09f5\7\u01f4\2\2\u09f4\u09f0"+
		"\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09fd\3\2\2\2\u09f6\u09f7\7\u01cb\2"+
		"\2\u09f7\u09f8\7}\2\2\u09f8\u09fd\5\u01e0\u00f1\2\u09f9\u09fa\7\u009e"+
		"\2\2\u09fa\u09fb\7\u01f8\2\2\u09fb\u09fd\7\u01f4\2\2\u09fc\u09e5\3\2\2"+
		"\2\u09fc\u09ed\3\2\2\2\u09fc\u09f6\3\2\2\2\u09fc\u09f9\3\2\2\2\u09fd\u00db"+
		"\3\2\2\2\u09fe\u0a19\7Y\2\2\u09ff\u0a00\7\u00e2\2\2\u0a00\u0a19\5\u01e0"+
		"\u00f1\2\u0a01\u0a02\7\u01cc\2\2\u0a02\u0a19\5\u01e0\u00f1\2\u0a03\u0a05"+
		"\7\u0112\2\2\u0a04\u0a06\5\u01e0\u00f1\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06"+
		"\3\2\2\2\u0a06\u0a19\3\2\2\2\u0a07\u0a08\7;\2\2\u0a08\u0a19\t#\2\2\u0a09"+
		"\u0a19\7\u01bc\2\2\u0a0a\u0a19\7\u0151\2\2\u0a0b\u0a19\7\u00bf\2\2\u0a0c"+
		"\u0a19\7\u00ad\2\2\u0a0d\u0a19\7v\2\2\u0a0e\u0a16\7\25\2\2\u0a0f\u0a11"+
		"\7\27\2\2\u0a10\u0a0f\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a14\3\2\2\2"+
		"\u0a12\u0a15\5\u01e0\u00f1\2\u0a13\u0a15\7D\2\2\u0a14\u0a12\3\2\2\2\u0a14"+
		"\u0a13\3\2\2\2\u0a15\u0a17\3\2\2\2\u0a16\u0a10\3\2\2\2\u0a16\u0a17\3\2"+
		"\2\2\u0a17\u0a19\3\2\2\2\u0a18\u09fe\3\2\2\2\u0a18\u09ff\3\2\2\2\u0a18"+
		"\u0a01\3\2\2\2\u0a18\u0a03\3\2\2\2\u0a18\u0a07\3\2\2\2\u0a18\u0a09\3\2"+
		"\2\2\u0a18\u0a0a\3\2\2\2\u0a18\u0a0b\3\2\2\2\u0a18\u0a0c\3\2\2\2\u0a18"+
		"\u0a0d\3\2\2\2\u0a18\u0a0e\3\2\2\2\u0a19\u00dd\3\2\2\2\u0a1a\u0a1b\7\u00c6"+
		"\2\2\u0a1b\u0a1e\7\u01f1\2\2\u0a1c\u0a1d\7\u0204\2\2\u0a1d\u0a1f\5\u01e0"+
		"\u00f1\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20"+
		"\u0a21\7\u01f8\2\2\u0a21\u0a23\5\u0112\u008a\2\u0a22\u0a24\7\u020c\2\2"+
		"\u0a23\u0a22\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a42\3\2\2\2\u0a25\u0a26"+
		"\7\u00c6\2\2\u0a26\u0a27\7\u01f1\2\2\u0a27\u0a28\5\u01e6\u00f4\2\u0a28"+
		"\u0a2a\5\u0112\u008a\2\u0a29\u0a2b\7\u020c\2\2\u0a2a\u0a29\3\2\2\2\u0a2a"+
		"\u0a2b\3\2\2\2\u0a2b\u0a42\3\2\2\2\u0a2c\u0a2d\7\u00c6\2\2\u0a2d\u0a2e"+
		"\7\u01f1\2\2\u0a2e\u0a2f\7\u01f8\2\2\u0a2f\u0a30\7B\2\2\u0a30\u0a3b\5"+
		"\u0108\u0085\2\u0a31\u0a39\7a\2\2\u0a32\u0a33\7\u00aa\2\2\u0a33\u0a3a"+
		"\7\u0186\2\2\u0a34\u0a37\7\u00dc\2\2\u0a35\u0a36\7\u008e\2\2\u0a36\u0a38"+
		"\5\u01b8\u00dd\2\u0a37\u0a35\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a3a\3"+
		"\2\2\2\u0a39\u0a32\3\2\2\2\u0a39\u0a34\3\2\2\2\u0a3a\u0a3c\3\2\2\2\u0a3b"+
		"\u0a31\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3e\3\2\2\2\u0a3d\u0a3f\7\u020c"+
		"\2\2\u0a3e\u0a3d\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0a42\3\2\2\2\u0a40"+
		"\u0a42\5\u010e\u0088\2\u0a41\u0a1a\3\2\2\2\u0a41\u0a25\3\2\2\2\u0a41\u0a2c"+
		"\3\2\2\2\u0a41\u0a40\3\2\2\2\u0a42\u00df\3\2\2\2\u0a43\u0a44\7\36\2\2"+
		"\u0a44\u0a45\7N\2\2\u0a45\u0a48\t$\2\2\u0a46\u0a49\5\u01e0\u00f1\2\u0a47"+
		"\u0a49\7\u01f1\2\2\u0a48\u0a46\3\2\2\2\u0a48\u0a47\3\2\2\2\u0a48\u0a49"+
		"\3\2\2\2\u0a49\u0a4b\3\2\2\2\u0a4a\u0a4c\7\u020c\2\2\u0a4b\u0a4a\3\2\2"+
		"\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a91\3\2\2\2\u0a4d\u0a4e\7\36\2\2\u0a4e"+
		"\u0a58\t$\2\2\u0a4f\u0a52\5\u01e0\u00f1\2\u0a50\u0a52\7\u01f1\2\2\u0a51"+
		"\u0a4f\3\2\2\2\u0a51\u0a50\3\2\2\2\u0a52\u0a56\3\2\2\2\u0a53\u0a54\7\u00e7"+
		"\2\2\u0a54\u0a55\7\u0165\2\2\u0a55\u0a57\7\u01f4\2\2\u0a56\u0a53\3\2\2"+
		"\2\u0a56\u0a57\3\2\2\2\u0a57\u0a59\3\2\2\2\u0a58\u0a51\3\2\2\2\u0a58\u0a59"+
		"\3\2\2\2\u0a59\u0a5b\3\2\2\2\u0a5a\u0a5c\7\u020c\2\2\u0a5b\u0a5a\3\2\2"+
		"\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a91\3\2\2\2\u0a5d\u0a5e\7\61\2\2\u0a5e"+
		"\u0a6b\t$\2\2\u0a5f\u0a62\5\u01e0\u00f1\2\u0a60\u0a62\7\u01f1\2\2\u0a61"+
		"\u0a5f\3\2\2\2\u0a61\u0a60\3\2\2\2\u0a62\u0a69\3\2\2\2\u0a63\u0a64\7\u00e7"+
		"\2\2\u0a64\u0a65\7\u0209\2\2\u0a65\u0a66\7\u0125\2\2\u0a66\u0a67\7\u01f8"+
		"\2\2\u0a67\u0a68\t\7\2\2\u0a68\u0a6a\7\u020a\2\2\u0a69\u0a63\3\2\2\2\u0a69"+
		"\u0a6a\3\2\2\2\u0a6a\u0a6c\3\2\2\2\u0a6b\u0a61\3\2\2\2\u0a6b\u0a6c\3\2"+
		"\2\2\u0a6c\u0a6e\3\2\2\2\u0a6d\u0a6f\7\u020c\2\2\u0a6e\u0a6d\3\2\2\2\u0a6e"+
		"\u0a6f\3\2\2\2\u0a6f\u0a91\3\2\2\2\u0a70\u0a72\7\61\2\2\u0a71\u0a73\7"+
		"\u01e8\2\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a75\3\2\2\2"+
		"\u0a74\u0a76\7\u020c\2\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76"+
		"\u0a91\3\2\2\2\u0a77\u0a78\7\u00b8\2\2\u0a78\u0a7b\t$\2\2\u0a79\u0a7c"+
		"\5\u01e0\u00f1\2\u0a7a\u0a7c\7\u01f1\2\2\u0a7b\u0a79\3\2\2\2\u0a7b\u0a7a"+
		"\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7e\3\2\2\2\u0a7d\u0a7f\7\u020c\2"+
		"\2\u0a7e\u0a7d\3\2\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a91\3\2\2\2\u0a80\u0a82"+
		"\7\u00b8\2\2\u0a81\u0a83\7\u01e8\2\2\u0a82\u0a81\3\2\2\2\u0a82\u0a83\3"+
		"\2\2\2\u0a83\u0a85\3\2\2\2\u0a84\u0a86\7\u020c\2\2\u0a85\u0a84\3\2\2\2"+
		"\u0a85\u0a86\3\2\2\2\u0a86\u0a91\3\2\2\2\u0a87\u0a88\7\u00bc\2\2\u0a88"+
		"\u0a8b\t$\2\2\u0a89\u0a8c\5\u01e0\u00f1\2\u0a8a\u0a8c\7\u01f1\2\2\u0a8b"+
		"\u0a89\3\2\2\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8e\3\2"+
		"\2\2\u0a8d\u0a8f\7\u020c\2\2\u0a8e\u0a8d\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f"+
		"\u0a91\3\2\2\2\u0a90\u0a43\3\2\2\2\u0a90\u0a4d\3\2\2\2\u0a90\u0a5d\3\2"+
		"\2\2\u0a90\u0a70\3\2\2\2\u0a90\u0a77\3\2\2\2\u0a90\u0a80\3\2\2\2\u0a90"+
		"\u0a87\3\2\2\2\u0a91\u00e1\3\2\2\2\u0a92\u0a94\7\u0147\2\2\u0a93\u0a95"+
		"\7\u01f2\2\2\u0a94\u0a93\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u00e3\3\2\2"+
		"\2\u0a96\u0a97\7\u00de\2\2\u0a97\u0a99\5\u01e0\u00f1\2\u0a98\u0a9a\7\u020c"+
		"\2\2\u0a99\u0a98\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u00e5\3\2\2\2\u0a9b"+
		"\u0a9c\7E\2\2\u0a9c\u0aa1\5\u01e2\u00f2\2\u0a9d\u0a9e\7\u0209\2\2\u0a9e"+
		"\u0a9f\5\u018c\u00c7\2\u0a9f\u0aa0\7\u020a\2\2\u0aa0\u0aa2\3\2\2\2\u0aa1"+
		"\u0a9d\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa5\3\2\2\2\u0aa3\u0aa4\7\u00e7"+
		"\2\2\u0aa4\u0aa6\5\u00e8u\2\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6"+
		"\u0aa8\3\2\2\2\u0aa7\u0aa9\7\u020c\2\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9"+
		"\3\2\2\2\u0aa9\u00e7\3\2\2\2\u0aaa\u0aad\5\u01e2\u00f2\2\u0aab\u0aac\7"+
		"\u020b\2\2\u0aac\u0aae\5\u01e2\u00f2\2\u0aad\u0aab\3\2\2\2\u0aad\u0aae"+
		"\3\2\2\2\u0aae\u00e9\3\2\2\2\u0aaf\u0ab0\7Y\2\2\u0ab0\u0ab1\7\31\2\2\u0ab1"+
		"\u0ab2\t%\2\2\u0ab2\u00eb\3\2\2\2\u0ab3\u0ab5\7\u01f1\2\2\u0ab4\u0ab6"+
		"\7\31\2\2\u0ab5\u0ab4\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ab7\3\2\2\2"+
		"\u0ab7\u0aba\5\u01d8\u00ed\2\u0ab8\u0ab9\7\u01f8\2\2\u0ab9\u0abb\5\u0112"+
		"\u008a\2\u0aba\u0ab8\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0abd\3\2\2\2\u0abc"+
		"\u0abe\5\u0112\u008a\2\u0abd\u0abc\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u00ed"+
		"\3\2\2\2\u0abf\u0ac0\7\u00cd\2\2\u0ac0\u0ac1\7\u0209\2\2\u0ac1\u0ac2\5"+
		"\u00f4{\2\u0ac2\u0ac3\7\u020a\2\2\u0ac3\u00ef\3\2\2\2\u0ac4\u0ac5\7\u01e9"+
		"\2\2\u0ac5\u0ac7\7\u0209\2\2\u0ac6\u0ac8\t&\2\2\u0ac7\u0ac6\3\2\2\2\u0ac7"+
		"\u0ac8\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0aca\5\u00f2z\2\u0aca\u0acb"+
		"\7\u020a\2\2\u0acb\u00f1\3\2\2\2\u0acc\u0acd\7\u01f3\2\2\u0acd\u0ace\7"+
		"\u0204\2\2\u0ace\u0acf\7\u01f3\2\2\u0acf\u00f3\3\2\2\2\u0ad0\u0ad7\5\u00f6"+
		"|\2\u0ad1\u0ad3\7\u020b\2\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3"+
		"\u0ad4\3\2\2\2\u0ad4\u0ad6\5\u00f6|\2\u0ad5\u0ad2\3\2\2\2\u0ad6\u0ad9"+
		"\3\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u00f5\3\2\2\2\u0ad9"+
		"\u0ad7\3\2\2\2\u0ada\u0add\5\u00f8}\2\u0adb\u0add\5\u00fc\177\2\u0adc"+
		"\u0ada\3\2\2\2\u0adc\u0adb\3\2\2\2\u0add\u00f7\3\2\2\2\u0ade\u0ae2\5\u01e0"+
		"\u00f1\2\u0adf\u0ae3\5\u01d8\u00ed\2\u0ae0\u0ae1\7\31\2\2\u0ae1\u0ae3"+
		"\5\u0112\u008a\2\u0ae2\u0adf\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae3\u0ae6\3"+
		"\2\2\2\u0ae4\u0ae5\7/\2\2\u0ae5\u0ae7\5\u01e0\u00f1\2\u0ae6\u0ae4\3\2"+
		"\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae9\3\2\2\2\u0ae8\u0aea\5\u01c0\u00e1"+
		"\2\u0ae9\u0ae8\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0b00\3\2\2\2\u0aeb\u0aec"+
		"\7\63\2\2\u0aec\u0aee\5\u01e0\u00f1\2\u0aed\u0aeb\3\2\2\2\u0aed\u0aee"+
		"\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af1\5\u01c2\u00e2\2\u0af0\u0af2\5"+
		"\u01c2\u00e2\2\u0af1\u0af0\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u0b01\3\2"+
		"\2\2\u0af3\u0af9\7n\2\2\u0af4\u0af5\7\u0209\2\2\u0af5\u0af6\7\u01f2\2"+
		"\2\u0af6\u0af7\7\u020b\2\2\u0af7\u0af8\7\u01f2\2\2\u0af8\u0afa\7\u020a"+
		"\2\2\u0af9\u0af4\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afe\3\2\2\2\u0afb"+
		"\u0afc\7\u008b\2\2\u0afc\u0afd\7a\2\2\u0afd\u0aff\7\u00b0\2\2\u0afe\u0afb"+
		"\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0aed\3\2\2\2\u0b00"+
		"\u0af3\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b03\3\2\2\2\u0b02\u0b04\7\u00ba"+
		"\2\2\u0b03\u0b02\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b08\3\2\2\2\u0b05"+
		"\u0b07\5\u00fa~\2\u0b06\u0b05\3\2\2\2\u0b07\u0b0a\3\2\2\2\u0b08\u0b06"+
		"\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u00f9\3\2\2\2\u0b0a\u0b08\3\2\2\2\u0b0b"+
		"\u0b0c\7\63\2\2\u0b0c\u0b0e\5\u01e0\u00f1\2\u0b0d\u0b0b\3\2\2\2\u0b0d"+
		"\u0b0e\3\2\2\2\u0b0e\u0b34\3\2\2\2\u0b0f\u0b10\7\u00a3\2\2\u0b10\u0b13"+
		"\7}\2\2\u0b11\u0b13\7\u00da\2\2\u0b12\u0b0f\3\2\2\2\u0b12\u0b11\3\2\2"+
		"\2\u0b13\u0b15\3\2\2\2\u0b14\u0b16\5\u01be\u00e0\2\u0b15\u0b14\3\2\2\2"+
		"\u0b15\u0b16\3\2\2\2\u0b16\u0b18\3\2\2\2\u0b17\u0b19\5\u0102\u0082\2\u0b18"+
		"\u0b17\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b35\3\2\2\2\u0b1a\u0b1e\7*"+
		"\2\2\u0b1b\u0b1c\7\u008b\2\2\u0b1c\u0b1d\7a\2\2\u0b1d\u0b1f\7\u00b0\2"+
		"\2\u0b1e\u0b1b\3\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b20\3\2\2\2\u0b20\u0b21"+
		"\7\u0209\2\2\u0b21\u0b22\5\u0120\u0091\2\u0b22\u0b23\7\u020a\2\2\u0b23"+
		"\u0b35\3\2\2\2\u0b24\u0b25\7c\2\2\u0b25\u0b27\7}\2\2\u0b26\u0b24\3\2\2"+
		"\2\u0b26\u0b27\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b29\7\u00ad\2\2\u0b29"+
		"\u0b2a\5\u01ac\u00d7\2\u0b2a\u0b2b\7\u0209\2\2\u0b2b\u0b2c\5\u01b8\u00dd"+
		"\2\u0b2c\u0b2e\7\u020a\2\2\u0b2d\u0b2f\5\u00fe\u0080\2\u0b2e\u0b2d\3\2"+
		"\2\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b31\3\2\2\2\u0b30\u0b32\5\u0100\u0081"+
		"\2\u0b31\u0b30\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b35\3\2\2\2\u0b33\u0b35"+
		"\5\u01c0\u00e1\2\u0b34\u0b12\3\2\2\2\u0b34\u0b1a\3\2\2\2\u0b34\u0b26\3"+
		"\2\2\2\u0b34\u0b33\3\2\2\2\u0b35\u00fb\3\2\2\2\u0b36\u0b37\7\63\2\2\u0b37"+
		"\u0b39\5\u01e0\u00f1\2\u0b38\u0b36\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b77"+
		"\3\2\2\2\u0b3a\u0b3b\7\u00a3\2\2\u0b3b\u0b3e\7}\2\2\u0b3c\u0b3e\7\u00da"+
		"\2\2\u0b3d\u0b3a\3\2\2\2\u0b3d\u0b3c\3\2\2\2\u0b3e\u0b40\3\2\2\2\u0b3f"+
		"\u0b41\5\u01be\u00e0\2\u0b40\u0b3f\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b42"+
		"\3\2\2\2\u0b42\u0b43\7\u0209\2\2\u0b43\u0b44\5\u01b6\u00dc\2\u0b44\u0b46"+
		"\7\u020a\2\2\u0b45\u0b47\5\u0102\u0082\2\u0b46\u0b45\3\2\2\2\u0b46\u0b47"+
		"\3\2\2\2\u0b47\u0b4a\3\2\2\2\u0b48\u0b49\7\u0091\2\2\u0b49\u0b4b\5\u01e0"+
		"\u00f1\2\u0b4a\u0b48\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b78\3\2\2\2\u0b4c"+
		"\u0b50\7*\2\2\u0b4d\u0b4e\7\u008b\2\2\u0b4e\u0b4f\7a\2\2\u0b4f\u0b51\7"+
		"\u00b0\2\2\u0b50\u0b4d\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b52\3\2\2\2"+
		"\u0b52\u0b53\7\u0209\2\2\u0b53\u0b54\5\u0120\u0091\2\u0b54\u0b55\7\u020a"+
		"\2\2\u0b55\u0b78\3\2\2\2\u0b56\u0b58\7H\2\2\u0b57\u0b59\7\u0209\2\2\u0b58"+
		"\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5e\3\2\2\2\u0b5a\u0b5f\7\u01f4"+
		"\2\2\u0b5b\u0b5f\7\u0211\2\2\u0b5c\u0b5f\5\u0168\u00b5\2\u0b5d\u0b5f\7"+
		"\u01f2\2\2\u0b5e\u0b5a\3\2\2\2\u0b5e\u0b5b\3\2\2\2\u0b5e\u0b5c\3\2\2\2"+
		"\u0b5e\u0b5d\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b5e\3\2\2\2\u0b60\u0b61"+
		"\3\2\2\2\u0b61\u0b63\3\2\2\2\u0b62\u0b64\7\u020a\2\2\u0b63\u0b62\3\2\2"+
		"\2\u0b63\u0b64\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b66\7a\2\2\u0b66\u0b78"+
		"\5\u01e0\u00f1\2\u0b67\u0b68\7c\2\2\u0b68\u0b69\7}\2\2\u0b69\u0b6a\7\u0209"+
		"\2\2\u0b6a\u0b6b\5\u01b8\u00dd\2\u0b6b\u0b6c\7\u020a\2\2\u0b6c\u0b6d\7"+
		"\u00ad\2\2\u0b6d\u0b6e\5\u01ac\u00d7\2\u0b6e\u0b6f\7\u0209\2\2\u0b6f\u0b70"+
		"\5\u01b8\u00dd\2\u0b70\u0b72\7\u020a\2\2\u0b71\u0b73\5\u00fe\u0080\2\u0b72"+
		"\u0b71\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b75\3\2\2\2\u0b74\u0b76\5\u0100"+
		"\u0081\2\u0b75\u0b74\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b78\3\2\2\2\u0b77"+
		"\u0b3d\3\2\2\2\u0b77\u0b4c\3\2\2\2\u0b77\u0b56\3\2\2\2\u0b77\u0b67\3\2"+
		"\2\2\u0b78\u00fd\3\2\2\2\u0b79\u0b7a\7\u0091\2\2\u0b7a\u0b82\7I\2\2\u0b7b"+
		"\u0b7c\7\u017e\2\2\u0b7c\u0b83\7\u00eb\2\2\u0b7d\u0b83\7%\2\2\u0b7e\u0b7f"+
		"\7\u00c6\2\2\u0b7f\u0b83\7\u008c\2\2\u0b80\u0b81\7\u00c6\2\2\u0b81\u0b83"+
		"\7H\2\2\u0b82\u0b7b\3\2\2\2\u0b82\u0b7d\3\2\2\2\u0b82\u0b7e\3\2\2\2\u0b82"+
		"\u0b80\3\2\2\2\u0b83\u00ff\3\2\2\2\u0b84\u0b85\7\u0091\2\2\u0b85\u0b8d"+
		"\7\u00dc\2\2\u0b86\u0b87\7\u017e\2\2\u0b87\u0b8e\7\u00eb\2\2\u0b88\u0b8e"+
		"\7%\2\2\u0b89\u0b8a\7\u00c6\2\2\u0b8a\u0b8e\7\u008c\2\2\u0b8b\u0b8c\7"+
		"\u00c6\2\2\u0b8c\u0b8e\7H\2\2\u0b8d\u0b86\3\2\2\2\u0b8d\u0b88\3\2\2\2"+
		"\u0b8d\u0b89\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e\u0101\3\2\2\2\u0b8f\u0b90"+
		"\7\u00e7\2\2\u0b90\u0b91\7\u0209\2\2\u0b91\u0b96\5\u0104\u0083\2\u0b92"+
		"\u0b93\7\u020b\2\2\u0b93\u0b95\5\u0104\u0083\2\u0b94\u0b92\3\2\2\2\u0b95"+
		"\u0b98\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b99\3\2"+
		"\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b9a\7\u020a\2\2\u0b9a\u0103\3\2\2\2\u0b9b"+
		"\u0b9c\5\u01e2\u00f2\2\u0b9c\u0ba0\7\u01f8\2\2\u0b9d\u0ba1\5\u01e2\u00f2"+
		"\2\u0b9e\u0ba1\5\u01bc\u00df\2\u0b9f\u0ba1\7\u01f2\2\2\u0ba0\u0b9d\3\2"+
		"\2\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0b9f\3\2\2\2\u0ba1\u0105\3\2\2\2\u0ba2"+
		"\u0ba3\7G\2\2\u0ba3\u0bc3\5\u01ba\u00de\2\u0ba4\u0bae\7B\2\2\u0ba5\u0bac"+
		"\5\u0108\u0085\2\u0ba6\u0ba7\7a\2\2\u0ba7\u0baa\7\u00dc\2\2\u0ba8\u0ba9"+
		"\7\u008e\2\2\u0ba9\u0bab\5\u01b8\u00dd\2\u0baa\u0ba8\3\2\2\2\u0baa\u0bab"+
		"\3\2\2\2\u0bab\u0bad\3\2\2\2\u0bac\u0ba6\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad"+
		"\u0baf\3\2\2\2\u0bae\u0ba5\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf\u0bc4\3\2"+
		"\2\2\u0bb0\u0bb2\7\u0155\2\2\u0bb1\u0bb0\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2"+
		"\u0bb4\3\2\2\2\u0bb3\u0bb5\7\u01b4\2\2\u0bb4\u0bb3\3\2\2\2\u0bb4\u0bb5"+
		"\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bb7\7B\2\2\u0bb7\u0bb8\7a\2\2\u0bb8"+
		"\u0bc1\5\64\33\2\u0bb9\u0bbf\7a\2\2\u0bba\u0bbb\7\u00aa\2\2\u0bbb\u0bc0"+
		"\7\u0186\2\2\u0bbc\u0bc0\7\u00dc\2\2\u0bbd\u0bbe\7\u008e\2\2\u0bbe\u0bc0"+
		"\5\u01b8\u00dd\2\u0bbf\u0bba\3\2\2\2\u0bbf\u0bbc\3\2\2\2\u0bbf\u0bbd\3"+
		"\2\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bb9\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2"+
		"\u0bc4\3\2\2\2\u0bc3\u0ba4\3\2\2\2\u0bc3\u0bb1\3\2\2\2\u0bc4\u0bc6\3\2"+
		"\2\2\u0bc5\u0bc7\7\u020c\2\2\u0bc6\u0bc5\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7"+
		"\u0107\3\2\2\2\u0bc8\u0bca\5\u010a\u0086\2\u0bc9\u0bc8\3\2\2\2\u0bca\u0bcd"+
		"\3\2\2\2\u0bcb\u0bc9\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bce\3\2\2\2\u0bcd"+
		"\u0bcb\3\2\2\2\u0bce\u0bcf\7a\2\2\u0bcf\u0bd0\5\64\33\2\u0bd0\u0109\3"+
		"\2\2\2\u0bd1\u0bd7\t\23\2\2\u0bd2\u0bd7\t\'\2\2\u0bd3\u0bd7\t(\2\2\u0bd4"+
		"\u0bd7\t)\2\2\u0bd5\u0bd7\7\u01db\2\2\u0bd6\u0bd1\3\2\2\2\u0bd6\u0bd2"+
		"\3\2\2\2\u0bd6\u0bd3\3\2\2\2\u0bd6\u0bd4\3\2\2\2\u0bd6\u0bd5\3\2\2\2\u0bd7"+
		"\u010b\3\2\2\2\u0bd8\u0be2\7]\2\2\u0bd9\u0be0\7\u0179\2\2\u0bda\u0be0"+
		"\7\u0193\2\2\u0bdb\u0be0\7\u013d\2\2\u0bdc\u0be0\7\u015e\2\2\u0bdd\u0bde"+
		"\t*\2\2\u0bde\u0be0\5\u0112\u008a\2\u0bdf\u0bd9\3\2\2\2\u0bdf\u0bda\3"+
		"\2\2\2\u0bdf\u0bdb\3\2\2\2\u0bdf\u0bdc\3\2\2\2\u0bdf\u0bdd\3\2\2\2\u0bdf"+
		"\u0be0\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0be3\7f\2\2\u0be2\u0bdf\3\2"+
		"\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be5\3\2\2\2\u0be4\u0be6\7\u0146\2\2\u0be5"+
		"\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0bf1\5\u01ba"+
		"\u00de\2\u0be8\u0be9\7y\2\2\u0be9\u0bee\7\u01f1\2\2\u0bea\u0beb\7\u020b"+
		"\2\2\u0beb\u0bed\7\u01f1\2\2\u0bec\u0bea\3\2\2\2\u0bed\u0bf0\3\2\2\2\u0bee"+
		"\u0bec\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u0bf2\3\2\2\2\u0bf0\u0bee\3\2"+
		"\2\2\u0bf1\u0be8\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf4\3\2\2\2\u0bf3"+
		"\u0bf5\7\u020c\2\2\u0bf4\u0bf3\3\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u010d"+
		"\3\2\2\2\u0bf6\u0bf7\7\u00c6\2\2\u0bf7\u0bfb\5\u01e0\u00f1\2\u0bf8\u0bfc"+
		"\5\u01e0\u00f1\2\u0bf9\u0bfc\5\u0110\u0089\2\u0bfa\u0bfc\5\u01bc\u00df"+
		"\2\u0bfb\u0bf8\3\2\2\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfa\3\2\2\2\u0bfc\u0bfe"+
		"\3\2\2\2\u0bfd\u0bff\7\u020c\2\2\u0bfe\u0bfd\3\2\2\2\u0bfe\u0bff\3\2\2"+
		"\2\u0bff\u0c27\3\2\2\2\u0c00\u0c01\7\u00c6\2\2\u0c01\u0c02\7\u00d5\2\2"+
		"\u0c02\u0c03\7\u0157\2\2\u0c03\u0c0c\7\u015f\2\2\u0c04\u0c05\7\u00aa\2"+
		"\2\u0c05\u0c0d\7\u01dd\2\2\u0c06\u0c07\7\u00aa\2\2\u0c07\u0c0d\7\u010d"+
		"\2\2\u0c08\u0c09\7\u01a9\2\2\u0c09\u0c0d\7\u00aa\2\2\u0c0a\u0c0d\7\u01c0"+
		"\2\2\u0c0b\u0c0d\7\u01ba\2\2\u0c0c\u0c04\3\2\2\2\u0c0c\u0c06\3\2\2\2\u0c0c"+
		"\u0c08\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0b\3\2\2\2\u0c0d\u0c0f\3\2"+
		"\2\2\u0c0e\u0c10\7\u020c\2\2\u0c0f\u0c0e\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10"+
		"\u0c27\3\2\2\2\u0c11\u0c12\7\u00c6\2\2\u0c12\u0c13\7p\2\2\u0c13\u0c14"+
		"\5\u01ac\u00d7\2\u0c14\u0c16\5\u01bc\u00df\2\u0c15\u0c17\7\u020c\2\2\u0c16"+
		"\u0c15\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c27\3\2\2\2\u0c18\u0c19\7\u00c6"+
		"\2\2\u0c19\u0c1a\7\u00f2\2\2\u0c1a\u0c27\5\u01bc\u00df\2\u0c1b\u0c1c\7"+
		"\u00c6\2\2\u0c1c\u0c1d\7\u019a\2\2\u0c1d\u0c27\5\u01bc\u00df\2\u0c1e\u0c1f"+
		"\7\u00c6\2\2\u0c1f\u0c20\7\u00f4\2\2\u0c20\u0c27\5\u01bc\u00df\2\u0c21"+
		"\u0c22\7\u00c6\2\2\u0c22\u0c23\7\u00f5\2\2\u0c23\u0c27\5\u01bc\u00df\2"+
		"\u0c24\u0c25\7\u00c6\2\2\u0c25\u0c27\5\u0172\u00ba\2\u0c26\u0bf6\3\2\2"+
		"\2\u0c26\u0c00\3\2\2\2\u0c26\u0c11\3\2\2\2\u0c26\u0c18\3\2\2\2\u0c26\u0c1b"+
		"\3\2\2\2\u0c26\u0c1e\3\2\2\2\u0c26\u0c21\3\2\2\2\u0c26\u0c24\3\2\2\2\u0c27"+
		"\u010f\3\2\2\2\u0c28\u0c2b\5\u01dc\u00ef\2\u0c29\u0c2b\7\u01f1\2\2\u0c2a"+
		"\u0c28\3\2\2\2\u0c2a\u0c29\3\2\2\2\u0c2b\u0111\3\2\2\2\u0c2c\u0c2d\b\u008a"+
		"\1\2\u0c2d\u0c5a\7H\2\2\u0c2e\u0c5a\7\u008c\2\2\u0c2f\u0c5a\7\u01f1\2"+
		"\2\u0c30\u0c5a\5\u01dc\u00ef\2\u0c31\u0c5a\5\u0168\u00b5\2\u0c32\u0c33"+
		"\7&\2\2\u0c33\u0c35\5\u0112\u008a\2\u0c34\u0c36\5\u0176\u00bc\2\u0c35"+
		"\u0c34\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c35\3\2\2\2\u0c37\u0c38\3\2"+
		"\2\2\u0c38\u0c3b\3\2\2\2\u0c39\u0c3a\7R\2\2\u0c3a\u0c3c\5\u0112\u008a"+
		"\2\u0c3b\u0c39\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d\u0c3e"+
		"\7S\2\2\u0c3e\u0c5a\3\2\2\2\u0c3f\u0c41\7&\2\2\u0c40\u0c42\5\u0178\u00bd"+
		"\2\u0c41\u0c40\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u0c41\3\2\2\2\u0c43\u0c44"+
		"\3\2\2\2\u0c44\u0c47\3\2\2\2\u0c45\u0c46\7R\2\2\u0c46\u0c48\5\u0112\u008a"+
		"\2\u0c47\u0c45\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c4a"+
		"\7S\2\2\u0c4a\u0c5a\3\2\2\2\u0c4b\u0c5a\5\u01b4\u00db\2\u0c4c\u0c4d\7"+
		"\u0209\2\2\u0c4d\u0c4e\5\u0112\u008a\2\u0c4e\u0c4f\7\u020a\2\2\u0c4f\u0c5a"+
		"\3\2\2\2\u0c50\u0c51\7\u0209\2\2\u0c51\u0c52\5\u0116\u008c\2\u0c52\u0c53"+
		"\7\u020a\2\2\u0c53\u0c5a\3\2\2\2\u0c54\u0c55\7\u0213\2\2\u0c55\u0c5a\5"+
		"\u0112\u008a\t\u0c56\u0c57\t+\2\2\u0c57\u0c5a\5\u0112\u008a\7\u0c58\u0c5a"+
		"\5\u0194\u00cb\2\u0c59\u0c2c\3\2\2\2\u0c59\u0c2e\3\2\2\2\u0c59\u0c2f\3"+
		"\2\2\2\u0c59\u0c30\3\2\2\2\u0c59\u0c31\3\2\2\2\u0c59\u0c32\3\2\2\2\u0c59"+
		"\u0c3f\3\2\2\2\u0c59\u0c4b\3\2\2\2\u0c59\u0c4c\3\2\2\2\u0c59\u0c50\3\2"+
		"\2\2\u0c59\u0c54\3\2\2\2\u0c59\u0c56\3\2\2\2\u0c59\u0c58\3\2\2\2\u0c5a"+
		"\u0c6e\3\2\2\2\u0c5b\u0c5c\f\b\2\2\u0c5c\u0c5d\t,\2\2\u0c5d\u0c6d\5\u0112"+
		"\u008a\t\u0c5e\u0c5f\f\6\2\2\u0c5f\u0c60\t-\2\2\u0c60\u0c6d\5\u0112\u008a"+
		"\7\u0c61\u0c62\f\5\2\2\u0c62\u0c63\5\u01e4\u00f3\2\u0c63\u0c64\5\u0112"+
		"\u008a\6\u0c64\u0c6d\3\2\2\2\u0c65\u0c66\f\4\2\2\u0c66\u0c67\5\u01e6\u00f4"+
		"\2\u0c67\u0c68\5\u0112\u008a\5\u0c68\u0c6d\3\2\2\2\u0c69\u0c6a\f\17\2"+
		"\2\u0c6a\u0c6b\7/\2\2\u0c6b\u0c6d\5\u01e0\u00f1\2\u0c6c\u0c5b\3\2\2\2"+
		"\u0c6c\u0c5e\3\2\2\2\u0c6c\u0c61\3\2\2\2\u0c6c\u0c65\3\2\2\2\u0c6c\u0c69"+
		"\3\2\2\2\u0c6d\u0c70\3\2\2\2\u0c6e\u0c6c\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f"+
		"\u0113\3\2\2\2\u0c70\u0c6e\3\2\2\2\u0c71\u0c7a\7\u008c\2\2\u0c72\u0c7a"+
		"\5\u01dc\u00ef\2\u0c73\u0c7a\5\u0168\u00b5\2\u0c74\u0c7a\7\u01f1\2\2\u0c75"+
		"\u0c76\7\u0209\2\2\u0c76\u0c77\5\u0114\u008b\2\u0c77\u0c78\7\u020a\2\2"+
		"\u0c78\u0c7a\3\2\2\2\u0c79\u0c71\3\2\2\2\u0c79\u0c72\3\2\2\2\u0c79\u0c73"+
		"\3\2\2\2\u0c79\u0c74\3\2\2\2\u0c79\u0c75\3\2\2\2\u0c7a\u0115\3\2\2\2\u0c7b"+
		"\u0c7c\5\64\33\2\u0c7c\u0117\3\2\2\2\u0c7d\u0c80\7\u00e7\2\2\u0c7e\u0c7f"+
		"\7\u01ea\2\2\u0c7f\u0c81\7\u020b\2\2\u0c80\u0c7e\3\2\2\2\u0c80\u0c81\3"+
		"\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c87\5\u011a\u008e\2\u0c83\u0c84\7\u020b"+
		"\2\2\u0c84\u0c86\5\u011a\u008e\2\u0c85\u0c83\3\2\2\2\u0c86\u0c89\3\2\2"+
		"\2\u0c87\u0c85\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0119\3\2\2\2\u0c89\u0c87"+
		"\3\2\2\2\u0c8a\u0c8f\5\u01e0\u00f1\2\u0c8b\u0c8c\7\u0209\2\2\u0c8c\u0c8d"+
		"\5\u01b8\u00dd\2\u0c8d\u0c8e\7\u020a\2\2\u0c8e\u0c90\3\2\2\2\u0c8f\u0c8b"+
		"\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c91\3\2\2\2\u0c91\u0c92\7\31\2\2"+
		"\u0c92\u0c93\7\u0209\2\2\u0c93\u0c94\5\64\33\2\u0c94\u0c95\7\u020a\2\2"+
		"\u0c95\u011b\3\2\2\2\u0c96\u0c99\5\u01b4\u00db\2\u0c97\u0c99\7\u01f1\2"+
		"\2\u0c98\u0c96\3\2\2\2\u0c98\u0c97\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c9d"+
		"\7\u01f8\2\2\u0c9b\u0c9d\5\u01e6\u00f4\2\u0c9c\u0c9a\3\2\2\2\u0c9c\u0c9b"+
		"\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0ca7\5\u0112\u008a\2\u0c9f\u0ca0\5"+
		"\u01e0\u00f1\2\u0ca0\u0ca1\7\u0204\2\2\u0ca1\u0ca2\5\u01e0\u00f1\2\u0ca2"+
		"\u0ca3\7\u0209\2\2\u0ca3\u0ca4\5\u018c\u00c7\2\u0ca4\u0ca5\7\u020a\2\2"+
		"\u0ca5\u0ca7\3\2\2\2\u0ca6\u0c98\3\2\2\2\u0ca6\u0c9f\3\2\2\2\u0ca7\u011d"+
		"\3\2\2\2\u0ca8\u0cad\5\u0120\u0091\2\u0ca9\u0caa\7\u020b\2\2\u0caa\u0cac"+
		"\5\u0120\u0091\2\u0cab\u0ca9\3\2\2\2\u0cac\u0caf\3\2\2\2\u0cad\u0cab\3"+
		"\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u011f\3\2\2\2\u0caf\u0cad\3\2\2\2\u0cb0"+
		"\u0cb5\5\u0122\u0092\2\u0cb1\u0cb2\7\u0098\2\2\u0cb2\u0cb4\5\u0122\u0092"+
		"\2\u0cb3\u0cb1\3\2\2\2\u0cb4\u0cb7\3\2\2\2\u0cb5\u0cb3\3\2\2\2\u0cb5\u0cb6"+
		"\3\2\2\2\u0cb6\u0121\3\2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb8\u0cbd\5\u0124\u0093"+
		"\2\u0cb9\u0cba\7\26\2\2\u0cba\u0cbc\5\u0124\u0093\2\u0cbb\u0cb9\3\2\2"+
		"\2\u0cbc\u0cbf\3\2\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0123"+
		"\3\2\2\2\u0cbf\u0cbd\3\2\2\2\u0cc0\u0cc2\7\u008b\2\2\u0cc1\u0cc0\3\2\2"+
		"\2\u0cc1\u0cc2\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc4\5\u0126\u0094\2"+
		"\u0cc4\u0125\3\2\2\2\u0cc5\u0cc6\7Z\2\2\u0cc6\u0cc7\7\u0209\2\2\u0cc7"+
		"\u0cc8\5\u0116\u008c\2\u0cc8\u0cc9\7\u020a\2\2\u0cc9\u0cfd\3\2\2\2\u0cca"+
		"\u0ccb\5\u0112\u008a\2\u0ccb\u0ccc\5\u01e4\u00f3\2\u0ccc\u0ccd\5\u0112"+
		"\u008a\2\u0ccd\u0cfd\3\2\2\2\u0cce\u0ccf\5\u0112\u008a\2\u0ccf\u0cd0\5"+
		"\u01e4\u00f3\2\u0cd0\u0cd1\t.\2\2\u0cd1\u0cd2\7\u0209\2\2\u0cd2\u0cd3"+
		"\5\u0116\u008c\2\u0cd3\u0cd4\7\u020a\2\2\u0cd4\u0cfd\3\2\2\2\u0cd5\u0cd7"+
		"\5\u0112\u008a\2\u0cd6\u0cd8\7\u008b\2\2\u0cd7\u0cd6\3\2\2\2\u0cd7\u0cd8"+
		"\3\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9\u0cda\7\37\2\2\u0cda\u0cdb\5\u0112"+
		"\u008a\2\u0cdb\u0cdc\7\26\2\2\u0cdc\u0cdd\5\u0112\u008a\2\u0cdd\u0cfd"+
		"\3\2\2\2\u0cde\u0ce0\5\u0112\u008a\2\u0cdf\u0ce1\7\u008b\2\2\u0ce0\u0cdf"+
		"\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u0ce3\7r\2\2\u0ce3"+
		"\u0ce6\7\u0209\2\2\u0ce4\u0ce7\5\u0116\u008c\2\u0ce5\u0ce7\5\u018c\u00c7"+
		"\2\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce5\3\2\2\2\u0ce7\u0ce8\3\2\2\2\u0ce8\u0ce9"+
		"\7\u020a\2\2\u0ce9\u0cfd\3\2\2\2\u0cea\u0cec\5\u0112\u008a\2\u0ceb\u0ced"+
		"\7\u008b\2\2\u0cec\u0ceb\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cee\3\2\2"+
		"\2\u0cee\u0cef\7\u0081\2\2\u0cef\u0cf2\5\u0112\u008a\2\u0cf0\u0cf1\7U"+
		"\2\2\u0cf1\u0cf3\5\u0112\u008a\2\u0cf2\u0cf0\3\2\2\2\u0cf2\u0cf3\3\2\2"+
		"\2\u0cf3\u0cfd\3\2\2\2\u0cf4\u0cf5\5\u0112\u008a\2\u0cf5\u0cf6\7z\2\2"+
		"\u0cf6\u0cf7\5\u01c0\u00e1\2\u0cf7\u0cfd\3\2\2\2\u0cf8\u0cf9\7\u0209\2"+
		"\2\u0cf9\u0cfa\5\u0120\u0091\2\u0cfa\u0cfb\7\u020a\2\2\u0cfb\u0cfd\3\2"+
		"\2\2\u0cfc\u0cc5\3\2\2\2\u0cfc\u0cca\3\2\2\2\u0cfc\u0cce\3\2\2\2\u0cfc"+
		"\u0cd5\3\2\2\2\u0cfc\u0cde\3\2\2\2\u0cfc\u0cea\3\2\2\2\u0cfc\u0cf4\3\2"+
		"\2\2\u0cfc\u0cf8\3\2\2\2\u0cfd\u0127\3\2\2\2\u0cfe\u0d04\5\u012c\u0097"+
		"\2\u0cff\u0d00\7\u0209\2\2\u0d00\u0d01\5\u0128\u0095\2\u0d01\u0d02\7\u020a"+
		"\2\2\u0d02\u0d04\3\2\2\2\u0d03\u0cfe\3\2\2\2\u0d03\u0cff\3\2\2\2\u0d04"+
		"\u0d08\3\2\2\2\u0d05\u0d07\5\u012a\u0096\2\u0d06\u0d05\3\2\2\2\u0d07\u0d0a"+
		"\3\2\2\2\u0d08\u0d06\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0129\3\2\2\2\u0d0a"+
		"\u0d08\3\2\2\2\u0d0b\u0d0d\7\u00d9\2\2\u0d0c\u0d0e\7\24\2\2\u0d0d\u0d0c"+
		"\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d12\3\2\2\2\u0d0f\u0d12\7X\2\2\u0d10"+
		"\u0d12\7x\2\2\u0d11\u0d0b\3\2\2\2\u0d11\u0d0f\3\2\2\2\u0d11\u0d10\3\2"+
		"\2\2\u0d12\u0d18\3\2\2\2\u0d13\u0d19\5\u012c\u0097\2\u0d14\u0d15\7\u0209"+
		"\2\2\u0d15\u0d16\5\u0128\u0095\2\u0d16\u0d17\7\u020a\2\2\u0d17\u0d19\3"+
		"\2\2\2\u0d18\u0d13\3\2\2\2\u0d18\u0d14\3\2\2\2\u0d19\u012b\3\2\2\2\u0d1a"+
		"\u0d1c\7\u00bf\2\2\u0d1b\u0d1d\t/\2\2\u0d1c\u0d1b\3\2\2\2\u0d1c\u0d1d"+
		"\3\2\2\2\u0d1d\u0d1f\3\2\2\2\u0d1e\u0d20\5\u012e\u0098\2\u0d1f\u0d1e\3"+
		"\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u0d24\5\u0144\u00a3"+
		"\2\u0d22\u0d23\7y\2\2\u0d23\u0d25\5\u01ac\u00d7\2\u0d24\u0d22\3\2\2\2"+
		"\u0d24\u0d25\3\2\2\2\u0d25\u0d28\3\2\2\2\u0d26\u0d27\7f\2\2\u0d27\u0d29"+
		"\5\u0148\u00a5\2\u0d28\u0d26\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u0d2c\3"+
		"\2\2\2\u0d2a\u0d2b\7\u00e5\2\2\u0d2b\u0d2d\5\u0120\u0091\2\u0d2c\u0d2a"+
		"\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d3b\3\2\2\2\u0d2e\u0d2f\7l\2\2\u0d2f"+
		"\u0d31\7#\2\2\u0d30\u0d32\7\24\2\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2"+
		"\2\2\u0d32\u0d33\3\2\2\2\u0d33\u0d38\5\u013c\u009f\2\u0d34\u0d35\7\u020b"+
		"\2\2\u0d35\u0d37\5\u013c\u009f\2\u0d36\u0d34\3\2\2\2\u0d37\u0d3a\3\2\2"+
		"\2\u0d38\u0d36\3\2\2\2\u0d38\u0d39\3\2\2\2\u0d39\u0d3c\3\2\2\2\u0d3a\u0d38"+
		"\3\2\2\2\u0d3b\u0d2e\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d3f\3\2\2\2\u0d3d"+
		"\u0d3e\7m\2\2\u0d3e\u0d40\5\u0120\u0091\2\u0d3f\u0d3d\3\2\2\2\u0d3f\u0d40"+
		"\3\2\2\2\u0d40\u012d\3\2\2\2\u0d41\u0d44\7\u00d3\2\2\u0d42\u0d45\5\u0130"+
		"\u0099\2\u0d43\u0d45\5\u0132\u009a\2\u0d44\u0d42\3\2\2\2\u0d44\u0d43\3"+
		"\2\2\2\u0d45\u0d48\3\2\2\2\u0d46\u0d47\7\u00e7\2\2\u0d47\u0d49\7\u01d1"+
		"\2\2\u0d48\u0d46\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u012f\3\2\2\2\u0d4a"+
		"\u0d4b\t\60\2\2\u0d4b\u0d52\7\u009f\2\2\u0d4c\u0d4d\7\u0209\2\2\u0d4d"+
		"\u0d4e\5\u0112\u008a\2\u0d4e\u0d4f\7\u020a\2\2\u0d4f\u0d50\7\u009f\2\2"+
		"\u0d50\u0d52\3\2\2\2\u0d51\u0d4a\3\2\2\2\u0d51\u0d4c\3\2\2\2\u0d52\u0131"+
		"\3\2\2\2\u0d53\u0d59\7\u01f2\2\2\u0d54\u0d55\7\u0209\2\2\u0d55\u0d56\5"+
		"\u0112\u008a\2\u0d56\u0d57\7\u020a\2\2\u0d57\u0d59\3\2\2\2\u0d58\u0d53"+
		"\3\2\2\2\u0d58\u0d54\3\2\2\2\u0d59\u0133\3\2\2\2\u0d5a\u0d5b\7\u0099\2"+
		"\2\u0d5b\u0d5c\7#\2\2\u0d5c\u0d61\5\u013a\u009e\2\u0d5d\u0d5e\7\u020b"+
		"\2\2\u0d5e\u0d60\5\u013a\u009e\2\u0d5f\u0d5d\3\2\2\2\u0d60\u0d63\3\2\2"+
		"\2\u0d61\u0d5f\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62\u0d6f\3\2\2\2\u0d63\u0d61"+
		"\3\2\2\2\u0d64\u0d65\7\u0184\2\2\u0d65\u0d66\5\u0112\u008a\2\u0d66\u0d6d"+
		"\t\61\2\2\u0d67\u0d68\7]\2\2\u0d68\u0d69\t\62\2\2\u0d69\u0d6a\5\u0112"+
		"\u008a\2\u0d6a\u0d6b\t\61\2\2\u0d6b\u0d6c\7\u0186\2\2\u0d6c\u0d6e\3\2"+
		"\2\2\u0d6d\u0d67\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d70\3\2\2\2\u0d6f"+
		"\u0d64\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u0135\3\2\2\2\u0d71\u0d72\7a"+
		"\2\2\u0d72\u0d8a\7!\2\2\u0d73\u0d74\7a\2\2\u0d74\u0d76\7\u01e9\2\2\u0d75"+
		"\u0d77\5\u0138\u009d\2\u0d76\u0d75\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d8a"+
		"\3\2\2\2\u0d78\u0d79\7a\2\2\u0d79\u0d7a\7\u01e9\2\2\u0d7a\u0d7c\t\63\2"+
		"\2\u0d7b\u0d7d\7\u020b\2\2\u0d7c\u0d7b\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d"+
		"\u0d81\3\2\2\2\u0d7e\u0d7f\7\u0209\2\2\u0d7f\u0d80\7\u01f4\2\2\u0d80\u0d82"+
		"\7\u020a\2\2\u0d81\u0d7e\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d86\3\2\2"+
		"\2\u0d83\u0d85\5\u0138\u009d\2\u0d84\u0d83\3\2\2\2\u0d85\u0d88\3\2\2\2"+
		"\u0d86\u0d84\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0d8a\3\2\2\2\u0d88\u0d86"+
		"\3\2\2\2\u0d89\u0d71\3\2\2\2\u0d89\u0d73\3\2\2\2\u0d89\u0d78\3\2\2\2\u0d8a"+
		"\u0137\3\2\2\2\u0d8b\u0d8c\7\u020b\2\2\u0d8c\u0d8d\t\64\2\2\u0d8d\u0139"+
		"\3\2\2\2\u0d8e\u0d90\5\u0112\u008a\2\u0d8f\u0d91\t\65\2\2\u0d90\u0d8f"+
		"\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u013b\3\2\2\2\u0d92\u0d93\5\u0112\u008a"+
		"\2\u0d93\u013d\3\2\2\2\u0d94\u0d95\7\u0097\2\2\u0d95\u0d96\7\u0209\2\2"+
		"\u0d96\u0d9b\5\u0140\u00a1\2\u0d97\u0d98\7\u020b\2\2\u0d98\u0d9a\5\u0140"+
		"\u00a1\2\u0d99\u0d97\3\2\2\2\u0d9a\u0d9d\3\2\2\2\u0d9b\u0d99\3\2\2\2\u0d9b"+
		"\u0d9c\3\2\2\2\u0d9c\u0d9e\3\2\2\2\u0d9d\u0d9b\3\2\2\2\u0d9e\u0d9f\7\u020a"+
		"\2\2\u0d9f\u013f\3\2\2\2\u0da0\u0da1\7\u0138\2\2\u0da1\u0dce\7\u01f2\2"+
		"\2\u0da2\u0da3\t\66\2\2\u0da3\u0dce\7l\2\2\u0da4\u0da5\t\67\2\2\u0da5"+
		"\u0dce\7\u00d9\2\2\u0da6\u0da7\t8\2\2\u0da7\u0dce\7|\2\2\u0da8\u0da9\7"+
		"\u0135\2\2\u0da9\u0dce\7\u01e5\2\2\u0daa\u0dab\7\u013f\2\2\u0dab\u0dce"+
		"\7\u0099\2\2\u0dac\u0dce\7\u014f\2\2\u0dad\u0dae\7\u0159\2\2\u0dae\u0dce"+
		"\7\u00a1\2\2\u0daf\u0db0\7\u015a\2\2\u0db0\u0dce\7\u00a1\2\2\u0db1\u0db2"+
		"\7\u0169\2\2\u0db2\u0dce\7\u01f2\2\2\u0db3\u0db4\7\u016a\2\2\u0db4\u0dce"+
		"\7\u01f2\2\2\u0db5\u0db6\7\u0189\2\2\u0db6\u0db7\7a\2\2\u0db7\u0db8\7"+
		"\u0209\2\2\u0db8\u0dbd\5\u0142\u00a2\2\u0db9\u0dba\7\u020b\2\2\u0dba\u0dbc"+
		"\5\u0142\u00a2\2\u0dbb\u0db9\3\2\2\2\u0dbc\u0dbf\3\2\2\2\u0dbd\u0dbb\3"+
		"\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dbd\3\2\2\2\u0dc0"+
		"\u0dc1\7\u020a\2\2\u0dc1\u0dce\3\2\2\2\u0dc2\u0dc3\7\u0189\2\2\u0dc3\u0dc4"+
		"\7a\2\2\u0dc4\u0dce\7\u01de\2\2\u0dc5\u0dc6\7\u018e\2\2\u0dc6\u0dce\t"+
		"\30\2\2\u0dc7\u0dce\7\u01a2\2\2\u0dc8\u0dc9\7\u01ac\2\2\u0dc9\u0dce\7"+
		"\u00a1\2\2\u0dca\u0dcb\7\u00de\2\2\u0dcb\u0dcc\7\u00a1\2\2\u0dcc\u0dce"+
		"\7\u01f4\2\2\u0dcd\u0da0\3\2\2\2\u0dcd\u0da2\3\2\2\2\u0dcd\u0da4\3\2\2"+
		"\2\u0dcd\u0da6\3\2\2\2\u0dcd\u0da8\3\2\2\2\u0dcd\u0daa\3\2\2\2\u0dcd\u0dac"+
		"\3\2\2\2\u0dcd\u0dad\3\2\2\2\u0dcd\u0daf\3\2\2\2\u0dcd\u0db1\3\2\2\2\u0dcd"+
		"\u0db3\3\2\2\2\u0dcd\u0db5\3\2\2\2\u0dcd\u0dc2\3\2\2\2\u0dcd\u0dc5\3\2"+
		"\2\2\u0dcd\u0dc7\3\2\2\2\u0dcd\u0dc8\3\2\2\2\u0dcd\u0dca\3\2\2\2\u0dce"+
		"\u0141\3\2\2\2\u0dcf\u0dd6\7\u01f1\2\2\u0dd0\u0dd7\7\u01de\2\2\u0dd1\u0dd4"+
		"\7\u01f8\2\2\u0dd2\u0dd5\5\u01dc\u00ef\2\u0dd3\u0dd5\7\u008c\2\2\u0dd4"+
		"\u0dd2\3\2\2\2\u0dd4\u0dd3\3\2\2\2\u0dd5\u0dd7\3\2\2\2\u0dd6\u0dd0\3\2"+
		"\2\2\u0dd6\u0dd1\3\2\2\2\u0dd7\u0143\3\2\2\2\u0dd8\u0ddd\5\u0146\u00a4"+
		"\2\u0dd9\u0dda\7\u020b\2\2\u0dda\u0ddc\5\u0146\u00a4\2\u0ddb\u0dd9\3\2"+
		"\2\2\u0ddc\u0ddf\3\2\2\2\u0ddd\u0ddb\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde"+
		"\u0145\3\2\2\2\u0ddf\u0ddd\3\2\2\2\u0de0\u0de1\5\u01ac\u00d7\2\u0de1\u0de2"+
		"\7\u0204\2\2\u0de2\u0de4\3\2\2\2\u0de3\u0de0\3\2\2\2\u0de3\u0de4\3\2\2"+
		"\2\u0de4\u0de8\3\2\2\2\u0de5\u0de9\7\u020e\2\2\u0de6\u0de7\7\u0208\2\2"+
		"\u0de7\u0de9\t9\2\2\u0de8\u0de5\3\2\2\2\u0de8\u0de6\3\2\2\2\u0de9\u0df6"+
		"\3\2\2\2\u0dea\u0deb\5\u0188\u00c5\2\u0deb\u0dec\7\u01f8\2\2\u0dec\u0ded"+
		"\5\u0112\u008a\2\u0ded\u0df6\3\2\2\2\u0dee\u0df3\5\u0112\u008a\2\u0def"+
		"\u0df1\7\31\2\2\u0df0\u0def\3\2\2\2\u0df0\u0df1\3\2\2\2\u0df1\u0df2\3"+
		"\2\2\2\u0df2\u0df4\5\u0188\u00c5\2\u0df3\u0df0\3\2\2\2\u0df3\u0df4\3\2"+
		"\2\2\u0df4\u0df6\3\2\2\2\u0df5\u0de3\3\2\2\2\u0df5\u0dea\3\2\2\2\u0df5"+
		"\u0dee\3\2\2\2\u0df6\u0147\3\2\2\2\u0df7\u0dfc\5\u014a\u00a6\2\u0df8\u0df9"+
		"\7\u020b\2\2\u0df9\u0dfb\5\u014a\u00a6\2\u0dfa\u0df8\3\2\2\2\u0dfb\u0dfe"+
		"\3\2\2\2\u0dfc\u0dfa\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u0149\3\2\2\2\u0dfe"+
		"\u0dfc\3\2\2\2\u0dff\u0e05\5\u014c\u00a7\2\u0e00\u0e01\7\u0209\2\2\u0e01"+
		"\u0e02\5\u014c\u00a7\2\u0e02\u0e03\7\u020a\2\2\u0e03\u0e05\3\2\2\2\u0e04"+
		"\u0dff\3\2\2\2\u0e04\u0e00\3\2\2\2\u0e05\u014b\3\2\2\2\u0e06\u0e0a\5\u014e"+
		"\u00a8\2\u0e07\u0e09\5\u0158\u00ad\2\u0e08\u0e07\3\2\2\2\u0e09\u0e0c\3"+
		"\2\2\2\u0e0a\u0e08\3\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b\u014d\3\2\2\2\u0e0c"+
		"\u0e0a\3\2\2\2\u0e0d\u0e0f\5\u0160\u00b1\2\u0e0e\u0e10\5\u017a\u00be\2"+
		"\u0e0f\u0e0e\3\2\2\2\u0e0f\u0e10\3\2\2\2\u0e10\u0e3c\3\2\2\2\u0e11\u0e13"+
		"\5\u01aa\u00d6\2\u0e12\u0e14\5\u017a\u00be\2\u0e13\u0e12\3\2\2\2\u0e13"+
		"\u0e14\3\2\2\2\u0e14\u0e3c\3\2\2\2\u0e15\u0e17\5\u0162\u00b2\2\u0e16\u0e18"+
		"\5\u017a\u00be\2\u0e17\u0e16\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18\u0e3c\3"+
		"\2\2\2\u0e19\u0e1e\5\u0166\u00b4\2\u0e1a\u0e1c\5\u017a\u00be\2\u0e1b\u0e1d"+
		"\5\u0186\u00c4\2\u0e1c\u0e1b\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u0e1f\3"+
		"\2\2\2\u0e1e\u0e1a\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e3c\3\2\2\2\u0e20"+
		"\u0e21\5\u0156\u00ac\2\u0e21\u0e22\5\u017a\u00be\2\u0e22\u0e3c\3\2\2\2"+
		"\u0e23\u0e25\5\u0168\u00b5\2\u0e24\u0e26\5\u017a\u00be\2\u0e25\u0e24\3"+
		"\2\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e3c\3\2\2\2\u0e27\u0e29\7\u01f1\2\2"+
		"\u0e28\u0e2a\5\u017a\u00be\2\u0e29\u0e28\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a"+
		"\u0e3c\3\2\2\2\u0e2b\u0e2c\7\u01f1\2\2\u0e2c\u0e2d\7\u0204\2\2\u0e2d\u0e32"+
		"\5\u0168\u00b5\2\u0e2e\u0e30\5\u017a\u00be\2\u0e2f\u0e31\5\u0186\u00c4"+
		"\2\u0e30\u0e2f\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e33\3\2\2\2\u0e32\u0e2e"+
		"\3\2\2\2\u0e32\u0e33\3\2\2\2\u0e33\u0e3c\3\2\2\2\u0e34\u0e3c\5\u0150\u00a9"+
		"\2\u0e35\u0e36\7\u020d\2\2\u0e36\u0e37\7\u020d\2\2\u0e37\u0e39\5\u0168"+
		"\u00b5\2\u0e38\u0e3a\5\u017a\u00be\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a\3"+
		"\2\2\2\u0e3a\u0e3c\3\2\2\2\u0e3b\u0e0d\3\2\2\2\u0e3b\u0e11\3\2\2\2\u0e3b"+
		"\u0e15\3\2\2\2\u0e3b\u0e19\3\2\2\2\u0e3b\u0e20\3\2\2\2\u0e3b\u0e23\3\2"+
		"\2\2\u0e3b\u0e27\3\2\2\2\u0e3b\u0e2b\3\2\2\2\u0e3b\u0e34\3\2\2\2\u0e3b"+
		"\u0e35\3\2\2\2\u0e3c\u014f\3\2\2\2\u0e3d\u0e3e\7\u0096\2\2\u0e3e\u0e3f"+
		"\7\u0209\2\2\u0e3f\u0e40\5\u0112\u008a\2\u0e40\u0e41\7\u020b\2\2\u0e41"+
		"\u0e44\5\u0112\u008a\2\u0e42\u0e43\7\u020b\2\2\u0e43\u0e45\5\u0112\u008a"+
		"\2\u0e44\u0e42\3\2\2\2\u0e44\u0e45\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e4c"+
		"\7\u020a\2\2\u0e47\u0e48\7\u00e7\2\2\u0e48\u0e49\7\u0209\2\2\u0e49\u0e4a"+
		"\5\u0152\u00aa\2\u0e4a\u0e4b\7\u020a\2\2\u0e4b\u0e4d\3\2\2\2\u0e4c\u0e47"+
		"\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d\u0151\3\2\2\2\u0e4e\u0e53\5\u0154\u00ab"+
		"\2\u0e4f\u0e50\7\u020b\2\2\u0e50\u0e52\5\u0154\u00ab\2\u0e51\u0e4f\3\2"+
		"\2\2\u0e52\u0e55\3\2\2\2\u0e53\u0e51\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54"+
		"\u0153\3\2\2\2\u0e55\u0e53\3\2\2\2\u0e56\u0e57\7\u01f3\2\2\u0e57\u0e59"+
		"\5\u01d8\u00ed\2\u0e58\u0e5a\7\u01f4\2\2\u0e59\u0e58\3\2\2\2\u0e59\u0e5a"+
		"\3\2\2\2\u0e5a\u0155\3\2\2\2\u0e5b\u0e5c\7(\2\2\u0e5c\u0e5d\7\u0209\2"+
		"\2\u0e5d\u0e5e\7)\2\2\u0e5e\u0e5f\5\u01ac\u00d7\2\u0e5f\u0e60\7\u020b"+
		"\2\2\u0e60\u0e61\t:\2\2\u0e61\u0e62\7\u020a\2\2\u0e62\u0157\3\2\2\2\u0e63"+
		"\u0e65\7u\2\2\u0e64\u0e63\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e6b\3\2"+
		"\2\2\u0e66\u0e68\t;\2\2\u0e67\u0e69\7\u009a\2\2\u0e68\u0e67\3\2\2\2\u0e68"+
		"\u0e69\3\2\2\2\u0e69\u0e6b\3\2\2\2\u0e6a\u0e64\3\2\2\2\u0e6a\u0e66\3\2"+
		"\2\2\u0e6b\u0e6d\3\2\2\2\u0e6c\u0e6e\t<\2\2\u0e6d\u0e6c\3\2\2\2\u0e6d"+
		"\u0e6e\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e70\7|\2\2\u0e70\u0e71\5\u014a"+
		"\u00a6\2\u0e71\u0e72\7\u0091\2\2\u0e72\u0e73\5\u0120\u0091\2\u0e73\u0e86"+
		"\3\2\2\2\u0e74\u0e75\7<\2\2\u0e75\u0e76\7|\2\2\u0e76\u0e86\5\u014a\u00a6"+
		"\2\u0e77\u0e78\7<\2\2\u0e78\u0e79\7\u00f6\2\2\u0e79\u0e86\5\u014a\u00a6"+
		"\2\u0e7a\u0e7b\7\u009a\2\2\u0e7b\u0e7c\7\u00f6\2\2\u0e7c\u0e86\5\u014a"+
		"\u00a6\2\u0e7d\u0e7e\7\u00a0\2\2\u0e7e\u0e7f\5\u015a\u00ae\2\u0e7f\u0e80"+
		"\5\u017a\u00be\2\u0e80\u0e86\3\2\2\2\u0e81\u0e82\7\u00db\2\2\u0e82\u0e83"+
		"\5\u015c\u00af\2\u0e83\u0e84\5\u017a\u00be\2\u0e84\u0e86\3\2\2\2\u0e85"+
		"\u0e6a\3\2\2\2\u0e85\u0e74\3\2\2\2\u0e85\u0e77\3\2\2\2\u0e85\u0e7a\3\2"+
		"\2\2\u0e85\u0e7d\3\2\2\2\u0e85\u0e81\3\2\2\2\u0e86\u0159\3\2\2\2\u0e87"+
		"\u0e88\7\u0209\2\2\u0e88\u0e89\5\u0190\u00c9\2\u0e89\u0e8a\7a\2\2\u0e8a"+
		"\u0e8b\5\u01b4\u00db\2\u0e8b\u0e8c\7r\2\2\u0e8c\u0e8d\5\u0186\u00c4\2"+
		"\u0e8d\u0e8e\7\u020a\2\2\u0e8e\u015b\3\2\2\2\u0e8f\u0e90\7\u0209\2\2\u0e90"+
		"\u0e91\5\u0112\u008a\2\u0e91\u0e92\7a\2\2\u0e92\u0e93\5\u01b4\u00db\2"+
		"\u0e93\u0e94\7r\2\2\u0e94\u0e95\7\u0209\2\2\u0e95\u0e96\5\u015e\u00b0"+
		"\2\u0e96\u0e97\7\u020a\2\2\u0e97\u0e98\7\u020a\2\2\u0e98\u015d\3\2\2\2"+
		"\u0e99\u0e9e\5\u01b4\u00db\2\u0e9a\u0e9b\7\u020b\2\2\u0e9b\u0e9d\5\u01b4"+
		"\u00db\2\u0e9c\u0e9a\3\2\2\2\u0e9d\u0ea0\3\2\2\2\u0e9e\u0e9c\3\2\2\2\u0e9e"+
		"\u0e9f\3\2\2\2\u0e9f\u015f\3\2\2\2\u0ea0\u0e9e\3\2\2\2\u0ea1\u0ea3\5\u01ac"+
		"\u00d7\2\u0ea2\u0ea4\5\u017e\u00c0\2\u0ea3\u0ea2\3\2\2\2\u0ea3\u0ea4\3"+
		"\2\2\2\u0ea4\u0161\3\2\2\2\u0ea5\u0ea6\7\u0095\2\2\u0ea6\u0ea7\7\u0209"+
		"\2\2\u0ea7\u0ea8\7\u01f4\2\2\u0ea8\u0ea9\7\u020b\2\2\u0ea9\u0eaa\7\u01f4"+
		"\2\2\u0eaa\u0eab\7\u020b\2\2\u0eab\u0eac\7\u01f4\2\2\u0eac\u0ec0\7\u020a"+
		"\2\2\u0ead\u0eae\7\u0095\2\2\u0eae\u0eaf\7\u0209\2\2\u0eaf\u0eb0\7\"\2"+
		"\2\u0eb0\u0eb1\7\u01f4\2\2\u0eb1\u0ebb\7\u020b\2\2\u0eb2\u0eb7\5\u0164"+
		"\u00b3\2\u0eb3\u0eb4\7\u020b\2\2\u0eb4\u0eb6\5\u0164\u00b3\2\u0eb5\u0eb3"+
		"\3\2\2\2\u0eb6\u0eb9\3\2\2\2\u0eb7\u0eb5\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8"+
		"\u0ebc\3\2\2\2\u0eb9\u0eb7\3\2\2\2\u0eba\u0ebc\5\u01e0\u00f1\2\u0ebb\u0eb2"+
		"\3\2\2\2\u0ebb\u0eba\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd\u0ebe\7\u020a\2"+
		"\2\u0ebe\u0ec0\3\2\2\2\u0ebf\u0ea5\3\2\2\2\u0ebf\u0ead\3\2\2\2\u0ec0\u0163"+
		"\3\2\2\2\u0ec1\u0ec2\5\u01e0\u00f1\2\u0ec2\u0ec3\7\u01f8\2\2\u0ec3\u0ec4"+
		"\t=\2\2\u0ec4\u0165\3\2\2\2\u0ec5\u0ed0\5\u0116\u008c\2\u0ec6\u0ec7\7"+
		"\u0209\2\2\u0ec7\u0ec8\5\u0116\u008c\2\u0ec8\u0ec9\7\u020a\2\2\u0ec9\u0ed0"+
		"\3\2\2\2\u0eca\u0ed0\5\u018a\u00c6\2\u0ecb\u0ecc\7\u0209\2\2\u0ecc\u0ecd"+
		"\5\u018a\u00c6\2\u0ecd\u0ece\7\u020a\2\2\u0ece\u0ed0\3\2\2\2\u0ecf\u0ec5"+
		"\3\2\2\2\u0ecf\u0ec6\3\2\2\2\u0ecf\u0eca\3\2\2\2\u0ecf\u0ecb\3\2\2\2\u0ed0"+
		"\u0167\3\2\2\2\u0ed1\u0f4c\5\u018e\u00c8\2\u0ed2\u0f4c\5\u0190\u00c9\2"+
		"\u0ed3\u0ed4\5\u01c4\u00e3\2\u0ed4\u0ed6\7\u0209\2\2\u0ed5\u0ed7\5\u018c"+
		"\u00c7\2\u0ed6\u0ed5\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8"+
		"\u0ed9\7\u020a\2\2\u0ed9\u0f4c\3\2\2\2\u0eda\u0edb\7\u0102\2\2\u0edb\u0edc"+
		"\7\u0209\2\2\u0edc\u0edd\7\u020e\2\2\u0edd\u0f4c\7\u020a\2\2\u0ede\u0edf"+
		"\7\u0105\2\2\u0edf\u0ee0\7\u0209\2\2\u0ee0\u0ee1\5\u0112\u008a\2\u0ee1"+
		"\u0ee2\7\31\2\2\u0ee2\u0ee3\5\u01d8\u00ed\2\u0ee3\u0ee4\7\u020a\2\2\u0ee4"+
		"\u0f4c\3\2\2\2\u0ee5\u0ee6\7:\2\2\u0ee6\u0ee7\7\u0209\2\2\u0ee7\u0ee8"+
		"\5\u01d8\u00ed\2\u0ee8\u0ee9\7\u020b\2\2\u0ee9\u0eec\5\u0112\u008a\2\u0eea"+
		"\u0eeb\7\u020b\2\2\u0eeb\u0eed\5\u0112\u008a\2\u0eec\u0eea\3\2\2\2\u0eec"+
		"\u0eed\3\2\2\2\u0eed\u0eee\3\2\2\2\u0eee\u0eef\7\u020a\2\2\u0eef\u0f4c"+
		"\3\2\2\2\u0ef0\u0ef1\7\u0109\2\2\u0ef1\u0ef2\7\u0209\2\2\u0ef2\u0ef3\7"+
		"\u020e\2\2\u0ef3\u0f4c\7\u020a\2\2\u0ef4\u0ef5\7.\2\2\u0ef5\u0ef6\7\u0209"+
		"\2\2\u0ef6\u0ef7\5\u018c\u00c7\2\u0ef7\u0ef8\7\u020a\2\2\u0ef8\u0f4c\3"+
		"\2\2\2\u0ef9\u0f4c\7@\2\2\u0efa\u0f4c\7A\2\2\u0efb\u0efc\7\u011a\2\2\u0efc"+
		"\u0efd\7\u0209\2\2\u0efd\u0efe\7\u01f3\2\2\u0efe\u0eff\7\u020b\2\2\u0eff"+
		"\u0f00\5\u0112\u008a\2\u0f00\u0f01\7\u020b\2\2\u0f01\u0f02\5\u0112\u008a"+
		"\2\u0f02\u0f03\7\u020a\2\2\u0f03\u0f4c\3\2\2\2\u0f04\u0f05\7\u011b\2\2"+
		"\u0f05\u0f06\7\u0209\2\2\u0f06\u0f07\7\u01f3\2\2\u0f07\u0f08\7\u020b\2"+
		"\2\u0f08\u0f09\5\u0112\u008a\2\u0f09\u0f0a\7\u020b\2\2\u0f0a\u0f0b\5\u0112"+
		"\u008a\2\u0f0b\u0f0c\7\u020a\2\2\u0f0c\u0f4c\3\2\2\2\u0f0d\u0f0e\7\u011c"+
		"\2\2\u0f0e\u0f0f\7\u0209\2\2\u0f0f\u0f10\7\u01f3\2\2\u0f10\u0f11\7\u020b"+
		"\2\2\u0f11\u0f12\5\u0112\u008a\2\u0f12\u0f13\7\u020a\2\2\u0f13\u0f4c\3"+
		"\2\2\2\u0f14\u0f15\7\u011d\2\2\u0f15\u0f16\7\u0209\2\2\u0f16\u0f17\7\u01f3"+
		"\2\2\u0f17\u0f18\7\u020b\2\2\u0f18\u0f19\5\u0112\u008a\2\u0f19\u0f1a\7"+
		"\u020a\2\2\u0f1a\u0f4c\3\2\2\2\u0f1b\u0f1c\7\u0144\2\2\u0f1c\u0f1d\7\u0209"+
		"\2\2\u0f1d\u0f4c\7\u020a\2\2\u0f1e\u0f1f\7\u0145\2\2\u0f1f\u0f20\7\u0209"+
		"\2\2\u0f20\u0f4c\7\u020a\2\2\u0f21\u0f22\7n\2\2\u0f22\u0f23\7\u0209\2"+
		"\2\u0f23\u0f26\5\u01d8\u00ed\2\u0f24\u0f25\7\u020b\2\2\u0f25\u0f27\7\u01f2"+
		"\2\2\u0f26\u0f24\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f2a\3\2\2\2\u0f28"+
		"\u0f29\7\u020b\2\2\u0f29\u0f2b\7\u01f2\2\2\u0f2a\u0f28\3\2\2\2\u0f2a\u0f2b"+
		"\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2d\7\u020a\2\2\u0f2d\u0f4c\3\2\2"+
		"\2\u0f2e\u0f4c\7\u0171\2\2\u0f2f\u0f30\7\u008d\2\2\u0f30\u0f31\7\u0209"+
		"\2\2\u0f31\u0f32\5\u0112\u008a\2\u0f32\u0f33\7\u020b\2\2\u0f33\u0f34\5"+
		"\u0112\u008a\2\u0f34\u0f35\7\u020a\2\2\u0f35\u0f4c\3\2\2\2\u0f36\u0f37"+
		"\7\u01c9\2\2\u0f37\u0f38\7\u0209\2\2\u0f38\u0f39\5\u0112\u008a\2\u0f39"+
		"\u0f3a\7\u020b\2\2\u0f3a\u0f3b\7\u01f2\2\2\u0f3b\u0f3c\7\u020b\2\2\u0f3c"+
		"\u0f3d\7\u01f2\2\2\u0f3d\u0f3e\7\u020b\2\2\u0f3e\u0f3f\5\u0112\u008a\2"+
		"\u0f3f\u0f40\7\u020a\2\2\u0f40\u0f4c\3\2\2\2\u0f41\u0f4c\7\u00c5\2\2\u0f42"+
		"\u0f4c\7\u00cc\2\2\u0f43\u0f44\7{\2\2\u0f44\u0f45\7\u0209\2\2\u0f45\u0f46"+
		"\5\u0112\u008a\2\u0f46\u0f47\7\u020b\2\2\u0f47\u0f48\5\u0112\u008a\2\u0f48"+
		"\u0f49\7\u020a\2\2\u0f49\u0f4c\3\2\2\2\u0f4a\u0f4c\5\u016a\u00b6\2\u0f4b"+
		"\u0ed1\3\2\2\2\u0f4b\u0ed2\3\2\2\2\u0f4b\u0ed3\3\2\2\2\u0f4b\u0eda\3\2"+
		"\2\2\u0f4b\u0ede\3\2\2\2\u0f4b\u0ee5\3\2\2\2\u0f4b\u0ef0\3\2\2\2\u0f4b"+
		"\u0ef4\3\2\2\2\u0f4b\u0ef9\3\2\2\2\u0f4b\u0efa\3\2\2\2\u0f4b\u0efb\3\2"+
		"\2\2\u0f4b\u0f04\3\2\2\2\u0f4b\u0f0d\3\2\2\2\u0f4b\u0f14\3\2\2\2\u0f4b"+
		"\u0f1b\3\2\2\2\u0f4b\u0f1e\3\2\2\2\u0f4b\u0f21\3\2\2\2\u0f4b\u0f2e\3\2"+
		"\2\2\u0f4b\u0f2f\3\2\2\2\u0f4b\u0f36\3\2\2\2\u0f4b\u0f41\3\2\2\2\u0f4b"+
		"\u0f42\3\2\2\2\u0f4b\u0f43\3\2\2\2\u0f4b\u0f4a\3\2\2\2\u0f4c\u0169\3\2"+
		"\2\2\u0f4d\u0f53\5\u016c\u00b7\2\u0f4e\u0f53\5\u016e\u00b8\2\u0f4f\u0f53"+
		"\5\u0170\u00b9\2\u0f50\u0f53\5\u0172\u00ba\2\u0f51\u0f53\5\u0174\u00bb"+
		"\2\u0f52\u0f4d\3\2\2\2\u0f52\u0f4e\3\2\2\2\u0f52\u0f4f\3\2\2\2\u0f52\u0f50"+
		"\3\2\2\2\u0f52\u0f51\3\2\2\2\u0f53\u016b\3\2\2\2\u0f54\u0f59\7\u01f1\2"+
		"\2\u0f55\u0f59\7\u01f3\2\2\u0f56\u0f59\7W\2\2\u0f57\u0f59\5\u016e\u00b8"+
		"\2\u0f58\u0f54\3\2\2\2\u0f58\u0f55\3\2\2\2\u0f58\u0f56\3\2\2\2\u0f58\u0f57"+
		"\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f5b\7\r\2\2\u0f5b\u0f5c\7\u01f4\2"+
		"\2\u0f5c\u0f5d\7\u020b\2\2\u0f5d\u0f5e\7\u01f4\2\2\u0f5e\u0f5f\7\u020a"+
		"\2\2\u0f5f\u016d\3\2\2\2\u0f60\u0f64\7\u01f1\2\2\u0f61\u0f64\7\u01f3\2"+
		"\2\u0f62\u0f64\5\u01aa\u00d6\2\u0f63\u0f60\3\2\2\2\u0f63\u0f61\3\2\2\2"+
		"\u0f63\u0f62\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f66\7\16\2\2\u0f66\u0f67"+
		"\7\u01f4\2\2\u0f67\u0f68\7\u020a\2\2\u0f68\u016f\3\2\2\2\u0f69\u0f6a\t"+
		">\2\2\u0f6a\u0f6b\7\17\2\2\u0f6b\u0f6c\7\u01f4\2\2\u0f6c\u0f6d\7\u020a"+
		"\2\2\u0f6d\u0171\3\2\2\2\u0f6e\u0f6f\t>\2\2\u0f6f\u0f70\7\20\2\2\u0f70"+
		"\u0f71\7\u01f4\2\2\u0f71\u0f72\7\u020a\2\2\u0f72\u0173\3\2\2\2\u0f73\u0f74"+
		"\t>\2\2\u0f74\u0f75\7\21\2\2\u0f75\u0f76\7\u01f4\2\2\u0f76\u0f77\7\u020a"+
		"\2\2\u0f77\u0175\3\2\2\2\u0f78\u0f79\7\u00e4\2\2\u0f79\u0f7a\5\u0112\u008a"+
		"\2\u0f7a\u0f7b\7\u00d1\2\2\u0f7b\u0f7c\5\u0112\u008a\2\u0f7c\u0177\3\2"+
		"\2\2\u0f7d\u0f7e\7\u00e4\2\2\u0f7e\u0f7f\5\u0120\u0091\2\u0f7f\u0f80\7"+
		"\u00d1\2\2\u0f80\u0f81\5\u0112\u008a\2\u0f81\u0179\3\2\2\2\u0f82\u0f84"+
		"\7\31\2\2\u0f83\u0f82\3\2\2\2\u0f83\u0f84\3\2\2\2\u0f84\u0f85\3\2\2\2"+
		"\u0f85\u0f86\5\u017c\u00bf\2\u0f86\u017b\3\2\2\2\u0f87\u0f89\5\u01e0\u00f1"+
		"\2\u0f88\u0f8a\5\u017e\u00c0\2\u0f89\u0f88\3\2\2\2\u0f89\u0f8a\3\2\2\2"+
		"\u0f8a\u017d\3\2\2\2\u0f8b\u0f8d\7\u00e7\2\2\u0f8c\u0f8b\3\2\2\2\u0f8c"+
		"\u0f8d\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e\u0f8f\7\u0209\2\2\u0f8f\u0f96"+
		"\5\u0182\u00c2\2\u0f90\u0f92\7\u020b\2\2\u0f91\u0f90\3\2\2\2\u0f91\u0f92"+
		"\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f95\5\u0182\u00c2\2\u0f94\u0f91\3"+
		"\2\2\2\u0f95\u0f98\3\2\2\2\u0f96\u0f94\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97"+
		"\u0f99\3\2\2\2\u0f98\u0f96\3\2\2\2\u0f99\u0f9a\7\u020a\2\2\u0f9a\u017f"+
		"\3\2\2\2\u0f9b\u0f9c\7\u00e7\2\2\u0f9c\u0f9d\7\u0209\2\2\u0f9d\u0fa4\5"+
		"\u0182\u00c2\2\u0f9e\u0fa0\7\u020b\2\2\u0f9f\u0f9e\3\2\2\2\u0f9f\u0fa0"+
		"\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa3\5\u0182\u00c2\2\u0fa2\u0f9f\3"+
		"\2\2\2\u0fa3\u0fa6\3\2\2\2\u0fa4\u0fa2\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5"+
		"\u0fa7\3\2\2\2\u0fa6\u0fa4\3\2\2\2\u0fa7\u0fa8\7\u020a\2\2\u0fa8\u0181"+
		"\3\2\2\2\u0fa9\u0fab\7\u017b\2\2\u0faa\u0fa9\3\2\2\2\u0faa\u0fab\3\2\2"+
		"\2\u0fab\u0fd2\3\2\2\2\u0fac\u0fad\7t\2\2\u0fad\u0fae\7\u0209\2\2\u0fae"+
		"\u0fb3\5\u0184\u00c3\2\u0faf\u0fb0\7\u020b\2\2\u0fb0\u0fb2\5\u0184\u00c3"+
		"\2\u0fb1\u0faf\3\2\2\2\u0fb2\u0fb5\3\2\2\2\u0fb3\u0fb1\3\2\2\2\u0fb3\u0fb4"+
		"\3\2\2\2\u0fb4\u0fb6\3\2\2\2\u0fb5\u0fb3\3\2\2\2\u0fb6\u0fb7\7\u020a\2"+
		"\2\u0fb7\u0fd3\3\2\2\2\u0fb8\u0fb9\7t\2\2\u0fb9\u0fba\7\u01f8\2\2\u0fba"+
		"\u0fd3\5\u0184\u00c3\2\u0fbb\u0fca\7b\2\2\u0fbc\u0fbd\7\u0209\2\2\u0fbd"+
		"\u0fbe\5\u0184\u00c3\2\u0fbe\u0fbf\7\u0209\2\2\u0fbf\u0fc4\7\u01f3\2\2"+
		"\u0fc0\u0fc1\7\u020b\2\2\u0fc1\u0fc3\7\u01f3\2\2\u0fc2\u0fc0\3\2\2\2\u0fc3"+
		"\u0fc6\3\2\2\2\u0fc4\u0fc2\3\2\2\2\u0fc4\u0fc5\3\2\2\2\u0fc5\u0fc7\3\2"+
		"\2\2\u0fc6\u0fc4\3\2\2\2\u0fc7\u0fc8\7\u020a\2\2\u0fc8\u0fc9\7\u020a\2"+
		"\2\u0fc9\u0fcb\3\2\2\2\u0fca\u0fbc\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fd3"+
		"\3\2\2\2\u0fcc\u0fd3\7\u01ba\2\2\u0fcd\u0fd3\7\u01c0\2\2\u0fce\u0fcf\7"+
		"\u01c1\2\2\u0fcf\u0fd0\7\u01f8\2\2\u0fd0\u0fd3\7\u01f2\2\2\u0fd1\u0fd3"+
		"\7\u01f3\2\2\u0fd2\u0fac\3\2\2\2\u0fd2\u0fb8\3\2\2\2\u0fd2\u0fbb\3\2\2"+
		"\2\u0fd2\u0fcc\3\2\2\2\u0fd2\u0fcd\3\2\2\2\u0fd2\u0fce\3\2\2\2\u0fd2\u0fd1"+
		"\3\2\2\2\u0fd3\u0183\3\2\2\2\u0fd4\u0fd7\5\u01e0\u00f1\2\u0fd5\u0fd7\7"+
		"\u01f2\2\2\u0fd6\u0fd4\3\2\2\2\u0fd6\u0fd5\3\2\2\2\u0fd7\u0185\3\2\2\2"+
		"\u0fd8\u0fd9\7\u0209\2\2\u0fd9\u0fde\5\u0188\u00c5\2\u0fda\u0fdb\7\u020b"+
		"\2\2\u0fdb\u0fdd\5\u0188\u00c5\2\u0fdc\u0fda\3\2\2\2\u0fdd\u0fe0\3\2\2"+
		"\2\u0fde\u0fdc\3\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf\u0fe1\3\2\2\2\u0fe0\u0fde"+
		"\3\2\2\2\u0fe1\u0fe2\7\u020a\2\2\u0fe2\u0187\3\2\2\2\u0fe3\u0fe6\5\u01e0"+
		"\u00f1\2\u0fe4\u0fe6\7\u01f4\2\2\u0fe5\u0fe3\3\2\2\2\u0fe5\u0fe4\3\2\2"+
		"\2\u0fe6\u0189\3\2\2\2\u0fe7\u0fe8\7\u00e0\2\2\u0fe8\u0fe9\7\u0209\2\2"+
		"\u0fe9\u0fea\5\u018c\u00c7\2\u0fea\u0ff2\7\u020a\2\2\u0feb\u0fec\7\u020b"+
		"\2\2\u0fec\u0fed\7\u0209\2\2\u0fed\u0fee\5\u018c\u00c7\2\u0fee\u0fef\7"+
		"\u020a\2\2\u0fef\u0ff1\3\2\2\2\u0ff0\u0feb\3\2\2\2\u0ff1\u0ff4\3\2\2\2"+
		"\u0ff2\u0ff0\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u018b\3\2\2\2\u0ff4\u0ff2"+
		"\3\2\2\2\u0ff5\u0ffa\5\u0112\u008a\2\u0ff6\u0ff7\7\u020b\2\2\u0ff7\u0ff9"+
		"\5\u0112\u008a\2\u0ff8\u0ff6\3\2\2\2\u0ff9\u0ffc\3\2\2\2\u0ffa\u0ff8\3"+
		"\2\2\2\u0ffa\u0ffb\3\2\2\2\u0ffb\u018d\3\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffd"+
		"\u0ffe\t?\2\2\u0ffe\u0fff\7\u0209\2\2\u0fff\u1000\7\u020a\2\2\u1000\u1008"+
		"\5\u0194\u00cb\2\u1001\u1002\7\u0180\2\2\u1002\u1003\7\u0209\2\2\u1003"+
		"\u1004\5\u0112\u008a\2\u1004\u1005\7\u020a\2\2\u1005\u1006\5\u0194\u00cb"+
		"\2\u1006\u1008\3\2\2\2\u1007\u0ffd\3\2\2\2\u1007\u1001\3\2\2\2\u1008\u018f"+
		"\3\2\2\2\u1009\u100a\t@\2\2\u100a\u100b\7\u0209\2\2\u100b\u100c\5\u0192"+
		"\u00ca\2\u100c\u100e\7\u020a\2\2\u100d\u100f\5\u0194\u00cb\2\u100e\u100d"+
		"\3\2\2\2\u100e\u100f\3\2\2\2\u100f\u102a\3\2\2\2\u1010\u1011\tA\2\2\u1011"+
		"\u1014\7\u0209\2\2\u1012\u1015\7\u020e\2\2\u1013\u1015\5\u0192\u00ca\2"+
		"\u1014\u1012\3\2\2\2\u1014\u1013\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u1018"+
		"\7\u020a\2\2\u1017\u1019\5\u0194\u00cb\2\u1018\u1017\3\2\2\2\u1018\u1019"+
		"\3\2\2\2\u1019\u102a\3\2\2\2\u101a\u101b\7\u010a\2\2\u101b\u101c\7\u0209"+
		"\2\2\u101c\u101d\5\u0192\u00ca\2\u101d\u101e\7\u020a\2\2\u101e\u102a\3"+
		"\2\2\2\u101f\u1020\7\u0148\2\2\u1020\u1021\7\u0209\2\2\u1021\u1022\5\u0112"+
		"\u008a\2\u1022\u1023\7\u020a\2\2\u1023\u102a\3\2\2\2\u1024\u1025\7\u0149"+
		"\2\2\u1025\u1026\7\u0209\2\2\u1026\u1027\5\u018c\u00c7\2\u1027\u1028\7"+
		"\u020a\2\2\u1028\u102a\3\2\2\2\u1029\u1009\3\2\2\2\u1029\u1010\3\2\2\2"+
		"\u1029\u101a\3\2\2\2\u1029\u101f\3\2\2\2\u1029\u1024\3\2\2\2\u102a\u0191"+
		"\3\2\2\2\u102b\u102d\t/\2\2\u102c\u102b\3\2\2\2\u102c\u102d\3\2\2\2\u102d"+
		"\u102e\3\2\2\2\u102e\u102f\5\u0112\u008a\2\u102f\u0193\3\2\2\2\u1030\u1031"+
		"\7\u009b\2\2\u1031\u1035\7\u0209\2\2\u1032\u1033\7\u018f\2\2\u1033\u1034"+
		"\7#\2\2\u1034\u1036\5\u018c\u00c7\2\u1035\u1032\3\2\2\2\u1035\u1036\3"+
		"\2\2\2\u1036\u1038\3\2\2\2\u1037\u1039\5\u0134\u009b\2\u1038\u1037\3\2"+
		"\2\2\u1038\u1039\3\2\2\2\u1039\u103b\3\2\2\2\u103a\u103c\5\u0196\u00cc"+
		"\2\u103b\u103a\3\2\2\2\u103b\u103c\3\2\2\2\u103c\u103d\3\2\2\2\u103d\u103e"+
		"\7\u020a\2\2\u103e\u0195\3\2\2\2\u103f\u1040\tB\2\2\u1040\u1041\5\u0198"+
		"\u00cd\2\u1041\u0197\3\2\2\2\u1042\u1049\5\u019c\u00cf\2\u1043\u1044\7"+
		"\37\2\2\u1044\u1045\5\u019a\u00ce\2\u1045\u1046\7\26\2\2\u1046\u1047\5"+
		"\u019a\u00ce\2\u1047\u1049\3\2\2\2\u1048\u1042\3\2\2\2\u1048\u1043\3\2"+
		"\2\2\u1049\u0199\3\2\2\2\u104a\u104d\5\u019c\u00cf\2\u104b\u104d\5\u019e"+
		"\u00d0\2\u104c\u104a\3\2\2\2\u104c\u104b\3\2\2\2\u104d\u019b\3\2\2\2\u104e"+
		"\u104f\7\u01dc\2\2\u104f\u1055\7\u0192\2\2\u1050\u1051\7\u01f2\2\2\u1051"+
		"\u1055\7\u0192\2\2\u1052\u1053\7=\2\2\u1053\u1055\7\u01ae\2\2\u1054\u104e"+
		"\3\2\2\2\u1054\u1050\3\2\2\2\u1054\u1052\3\2\2\2\u1055\u019d\3\2\2\2\u1056"+
		"\u1057\7\u01dc\2\2\u1057\u105b\7\u013e\2\2\u1058\u1059\7\u01f2\2\2\u1059"+
		"\u105b\7\u013e\2\2\u105a\u1056\3\2\2\2\u105a\u1058\3\2\2\2\u105b\u019f"+
		"\3\2\2\2\u105c\u105d\7\u013c\2\2\u105d\u1062\5\u01a2\u00d2\2\u105e\u105f"+
		"\7\u020b\2\2\u105f\u1061\5\u01a2\u00d2\2\u1060\u105e\3\2\2\2\u1061\u1064"+
		"\3\2\2\2\u1062\u1060\3\2\2\2\u1062\u1063\3\2\2\2\u1063\u107f\3\2\2\2\u1064"+
		"\u1062\3\2\2\2\u1065\u1066\7\u0123\2\2\u1066\u1069\7\u01f8\2\2\u1067\u106a"+
		"\5\u01e0\u00f1\2\u1068\u106a\7\u01f4\2\2\u1069\u1067\3\2\2\2\u1069\u1068"+
		"\3\2\2\2\u106a\u107f\3\2\2\2\u106b\u106c\7\u0122\2\2\u106c\u106f\7\u01f8"+
		"\2\2\u106d\u1070\5\u01e0\u00f1\2\u106e\u1070\7\u01f4\2\2\u106f\u106d\3"+
		"\2\2\2\u106f\u106e\3\2\2\2\u1070\u107f\3\2\2\2\u1071\u1072\7\u0177\2\2"+
		"\u1072\u1073\7\u01f8\2\2\u1073\u107f\t\7\2\2\u1074\u1075\7\u01d6\2\2\u1075"+
		"\u1076\7\u01f8\2\2\u1076\u107f\t\7\2\2\u1077\u1078\7\u01d9\2\2\u1078\u1079"+
		"\7\u01f8\2\2\u1079\u107f\7\u01f2\2\2\u107a\u107b\7\u0120\2\2\u107b\u107f"+
		"\t\7\2\2\u107c\u107d\7\u01d7\2\2\u107d\u107f\t\7\2\2\u107e\u105c\3\2\2"+
		"\2\u107e\u1065\3\2\2\2\u107e\u106b\3\2\2\2\u107e\u1071\3\2\2\2\u107e\u1074"+
		"\3\2\2\2\u107e\u1077\3\2\2\2\u107e\u107a\3\2\2\2\u107e\u107c\3\2\2\2\u107f"+
		"\u01a1\3\2\2\2\u1080\u1087\7\u0209\2\2\u1081\u1082\7\u017c\2\2\u1082\u1083"+
		"\7\u01f8\2\2\u1083\u1088\tC\2\2\u1084\u1085\7\u0129\2\2\u1085\u1086\7"+
		"\u01f8\2\2\u1086\u1088\7\u01f4\2\2\u1087\u1081\3\2\2\2\u1087\u1084\3\2"+
		"\2\2\u1088\u1089\3\2\2\2\u1089\u108a\7\u020a\2\2\u108a\u01a3\3\2\2\2\u108b"+
		"\u108e\5\u01a6\u00d4\2\u108c\u108e\5\u01a8\u00d5\2\u108d\u108b\3\2\2\2"+
		"\u108d\u108c\3\2\2\2\u108e\u01a5\3\2\2\2\u108f\u1090\7\u013a\2\2\u1090"+
		"\u1093\5\u01e0\u00f1\2\u1091\u1092\7\65\2\2\u1092\u1094\7\u013c\2\2\u1093"+
		"\u1091\3\2\2\2\u1093\u1094\3\2\2\2\u1094\u1096\3\2\2\2\u1095\u1097\7H"+
		"\2\2\u1096\u1095\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u109a\3\2\2\2\u1098"+
		"\u1099\7\65\2\2\u1099\u109b\7\u016e\2\2\u109a\u1098\3\2\2\2\u109a\u109b"+
		"\3\2\2\2\u109b\u109c\3\2\2\2\u109c\u10a1\5\u01a8\u00d5\2\u109d\u109e\7"+
		"\u020b\2\2\u109e\u10a0\5\u01a8\u00d5\2\u109f\u109d\3\2\2\2\u10a0\u10a3"+
		"\3\2\2\2\u10a1\u109f\3\2\2\2\u10a1\u10a2\3\2\2\2\u10a2\u01a7\3\2\2\2\u10a3"+
		"\u10a1\3\2\2\2\u10a4\u10a5\7\u0209\2\2\u10a5\u10a6\7\u0176\2\2\u10a6\u10a9"+
		"\7\u01f8\2\2\u10a7\u10aa\5\u01e0\u00f1\2\u10a8\u10aa\7\u01f4\2\2\u10a9"+
		"\u10a7\3\2\2\2\u10a9\u10a8\3\2\2\2\u10aa\u10ac\3\2\2\2\u10ab\u10ad\7\u020b"+
		"\2\2\u10ac\u10ab\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae"+
		"\u10af\7_\2\2\u10af\u10b0\7\u01f8\2\2\u10b0\u10b2\7\u01f4\2\2\u10b1\u10b3"+
		"\7\u020b\2\2\u10b2\u10b1\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3\u10ba\3\2\2"+
		"\2\u10b4\u10b5\7\u01bf\2\2\u10b5\u10b6\7\u01f8\2\2\u10b6\u10b8\5\u01e8"+
		"\u00f5\2\u10b7\u10b9\7\u020b\2\2\u10b8\u10b7\3\2\2\2\u10b8\u10b9\3\2\2"+
		"\2\u10b9\u10bb\3\2\2\2\u10ba\u10b4\3\2\2\2\u10ba\u10bb\3\2\2\2\u10bb\u10c5"+
		"\3\2\2\2\u10bc\u10bd\7\u016b\2\2\u10bd\u10c0\7\u01f8\2\2\u10be\u10c1\5"+
		"\u01e8\u00f5\2\u10bf\u10c1\7\u01df\2\2\u10c0\u10be\3\2\2\2\u10c0\u10bf"+
		"\3\2\2\2\u10c1\u10c3\3\2\2\2\u10c2\u10c4\7\u020b\2\2\u10c3\u10c2\3\2\2"+
		"\2\u10c3\u10c4\3\2\2\2\u10c4\u10c6\3\2\2\2\u10c5\u10bc\3\2\2\2\u10c5\u10c6"+
		"\3\2\2\2\u10c6\u10cd\3\2\2\2\u10c7\u10c8\7\u013b\2\2\u10c8\u10c9\7\u01f8"+
		"\2\2\u10c9\u10cb\5\u01e8\u00f5\2\u10ca\u10cc\7\u020b\2\2\u10cb\u10ca\3"+
		"\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u10ce\3\2\2\2\u10cd\u10c7\3\2\2\2\u10cd"+
		"\u10ce\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u10d0\7\u020a\2\2\u10d0\u01a9"+
		"\3\2\2\2\u10d1\u10d2\5\u01e0\u00f1\2\u10d2\u10d3\7\u0204\2\2\u10d3\u10d4"+
		"\5\u01e0\u00f1\2\u10d4\u10d5\7\u0204\2\2\u10d5\u10d6\5\u01e0\u00f1\2\u10d6"+
		"\u10d7\7\u0204\2\2\u10d7\u10e3\3\2\2\2\u10d8\u10d9\5\u01e0\u00f1\2\u10d9"+
		"\u10db\7\u0204\2\2\u10da\u10dc\5\u01e0\u00f1\2\u10db\u10da\3\2\2\2\u10db"+
		"\u10dc\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10de\7\u0204\2\2\u10de\u10e3"+
		"\3\2\2\2\u10df\u10e0\5\u01e0\u00f1\2\u10e0\u10e1\7\u0204\2\2\u10e1\u10e3"+
		"\3\2\2\2\u10e2\u10d1\3\2\2\2\u10e2\u10d8\3\2\2\2\u10e2\u10df\3\2\2\2\u10e2"+
		"\u10e3\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e5\5\u01e0\u00f1\2\u10e5\u01ab"+
		"\3\2\2\2\u10e6\u10e7\5\u01e0\u00f1\2\u10e7\u10e9\7\u0204\2\2\u10e8\u10ea"+
		"\5\u01e0\u00f1\2\u10e9\u10e8\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10eb\3"+
		"\2\2\2\u10eb\u10ec\7\u0204\2\2\u10ec\u10f1\3\2\2\2\u10ed\u10ee\5\u01e0"+
		"\u00f1\2\u10ee\u10ef\7\u0204\2\2\u10ef\u10f1\3\2\2\2\u10f0\u10e6\3\2\2"+
		"\2\u10f0\u10ed\3\2\2\2\u10f0\u10f1\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u10f3"+
		"\5\u01e0\u00f1\2\u10f3\u01ad\3\2\2\2\u10f4\u10f5\5\u01e0\u00f1\2\u10f5"+
		"\u10f6\7\u0204\2\2\u10f6\u10f8\3\2\2\2\u10f7\u10f4\3\2\2\2\u10f7\u10f8"+
		"\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u10fa\5\u01e0\u00f1\2\u10fa\u01af\3"+
		"\2\2\2\u10fb\u10fc\5\u01e0\u00f1\2\u10fc\u10fe\7\u0204\2\2\u10fd\u10ff"+
		"\5\u01e0\u00f1\2\u10fe\u10fd\3\2\2\2\u10fe\u10ff\3\2\2\2\u10ff\u1100\3"+
		"\2\2\2\u1100\u1101\7\u0204\2\2\u1101\u1106\3\2\2\2\u1102\u1103\5\u01e0"+
		"\u00f1\2\u1103\u1104\7\u0204\2\2\u1104\u1106\3\2\2\2\u1105\u10fb\3\2\2"+
		"\2\u1105\u1102\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u1108"+
		"\5\u01e0\u00f1\2\u1108\u01b1\3\2\2\2\u1109\u110c\5\u01aa\u00d6\2\u110a"+
		"\u110c\7\u01f1\2\2\u110b\u1109\3\2\2\2\u110b\u110a\3\2\2\2\u110c\u01b3"+
		"\3\2\2\2\u110d\u110e\5\u01ac\u00d7\2\u110e\u110f\7\u0204\2\2\u110f\u1111"+
		"\3\2\2\2\u1110\u110d\3\2\2\2\u1110\u1111\3\2\2\2\u1111\u1112\3\2\2\2\u1112"+
		"\u1113\5\u01e0\u00f1\2\u1113\u01b5\3\2\2\2\u1114\u1116\5\u01e0\u00f1\2"+
		"\u1115\u1117\t\65\2\2\u1116\u1115\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u111f"+
		"\3\2\2\2\u1118\u1119\7\u020b\2\2\u1119\u111b\5\u01e0\u00f1\2\u111a\u111c"+
		"\t\65\2\2\u111b\u111a\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u111e\3\2\2\2"+
		"\u111d\u1118\3\2\2\2\u111e\u1121\3\2\2\2\u111f\u111d\3\2\2\2\u111f\u1120"+
		"\3\2\2\2\u1120\u01b7\3\2\2\2\u1121\u111f\3\2\2\2\u1122\u1127\5\u01e0\u00f1"+
		"\2\u1123\u1124\7\u020b\2\2\u1124\u1126\5\u01e0\u00f1\2\u1125\u1123\3\2"+
		"\2\2\u1126\u1129\3\2\2\2\u1127\u1125\3\2\2\2\u1127\u1128\3\2\2\2\u1128"+
		"\u01b9\3\2\2\2\u1129\u1127\3\2\2\2\u112a\u112d\5\u01e0\u00f1\2\u112b\u112d"+
		"\7\u01f1\2\2\u112c\u112a\3\2\2\2\u112c\u112b\3\2\2\2\u112d\u01bb\3\2\2"+
		"\2\u112e\u112f\t\7\2\2\u112f\u01bd\3\2\2\2\u1130\u1131\tD\2\2\u1131\u01bf"+
		"\3\2\2\2\u1132\u1134\7\u008b\2\2\u1133\u1132\3\2\2\2\u1133\u1134\3\2\2"+
		"\2\u1134\u1135\3\2\2\2\u1135\u1136\7\u008c\2\2\u1136\u01c1\3\2\2\2\u1137"+
		"\u113f\5\u01c0\u00e1\2\u1138\u1139\7H\2\2\u1139\u113c\5\u0114\u008b\2"+
		"\u113a\u113b\7\u00e7\2\2\u113b\u113d\7\u00e0\2\2\u113c\u113a\3\2\2\2\u113c"+
		"\u113d\3\2\2\2\u113d\u113f\3\2\2\2\u113e\u1137\3\2\2\2\u113e\u1138\3\2"+
		"\2\2\u113f\u01c3\3\2\2\2\u1140\u1146\5\u01b0\u00d9\2\u1141\u1146\7\u00b7"+
		"\2\2\u1142\u1146\7\177\2\2\u1143\u1146\7\u0102\2\2\u1144\u1146\7\u0109"+
		"\2\2\u1145\u1140\3\2\2\2\u1145\u1141\3\2\2\2\u1145\u1142\3\2\2\2\u1145"+
		"\u1143\3\2\2\2\u1145\u1144\3\2\2\2\u1146\u01c5\3\2\2\2\u1147\u1148\7\36"+
		"\2\2\u1148\u1149\79\2\2\u1149\u114a\7\u01d3\2\2\u114a\u114b\7\u0209\2"+
		"\2\u114b\u114c\7\u01f1\2\2\u114c\u114d\7\u020a\2\2\u114d\u114e\7\u01d4"+
		"\2\2\u114e\u114f\7\u01f8\2\2\u114f\u1151\5\66\34\2\u1150\u1152\7\u020c"+
		"\2\2\u1151\u1150\3\2\2\2\u1151\u1152\3\2\2\2\u1152\u01c7\3\2\2\2\u1153"+
		"\u1154\7\36\2\2\u1154\u1156\7\u0128\2\2\u1155\u1157\79\2\2\u1156\u1155"+
		"\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u1159\7\u01f1\2"+
		"\2\u1159\u115a\7f\2\2\u115a\u115b\7\u00c4\2\2\u115b\u115c\5\u01cc\u00e7"+
		"\2\u115c\u115d\7\u00d2\2\2\u115d\u115e\7\u00c4\2\2\u115e\u1161\5\u01cc"+
		"\u00e7\2\u115f\u1160\7\u020b\2\2\u1160\u1162\7\u01f4\2\2\u1161\u115f\3"+
		"\2\2\2\u1161\u1162\3\2\2\2\u1162\u1163\3\2\2\2\u1163\u1164\7\u0091\2\2"+
		"\u1164\u1165\78\2\2\u1165\u117c\5\u01ca\u00e6\2\u1166\u116d\7\u00e7\2"+
		"\2\u1167\u1168\tE\2\2\u1168\u1169\7\u01f8\2\2\u1169\u116b\7\u01f1\2\2"+
		"\u116a\u116c\7\u020b\2\2\u116b\u116a\3\2\2\2\u116b\u116c\3\2\2\2\u116c"+
		"\u116e\3\2\2\2\u116d\u1167\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u1175\3\2"+
		"\2\2\u116f\u1170\7\u0080\2\2\u1170\u1171\7\u01f8\2\2\u1171\u1173\t\2\2"+
		"\2\u1172\u1174\7\u020b\2\2\u1173\u1172\3\2\2\2\u1173\u1174\3\2\2\2\u1174"+
		"\u1176\3\2\2\2\u1175\u116f\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u117a\3\2"+
		"\2\2\u1177\u1178\7\u0132\2\2\u1178\u1179\7\u01f8\2\2\u1179\u117b\t\7\2"+
		"\2\u117a\u1177\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117d\3\2\2\2\u117c\u1166"+
		"\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u117f\3\2\2\2\u117e\u1180\7\u020c\2"+
		"\2\u117f\u117e\3\2\2\2\u117f\u1180\3\2\2\2\u1180\u01c9\3\2\2\2\u1181\u1184"+
		"\5\u01e0\u00f1\2\u1182\u1184\5\u0112\u008a\2\u1183\u1181\3\2\2\2\u1183"+
		"\u1182\3\2\2\2\u1184\u01cb\3\2\2\2\u1185\u1188\5\u01e0\u00f1\2\u1186\u1188"+
		"\5\u0112\u008a\2\u1187\u1185\3\2\2\2\u1187\u1186\3\2\2\2\u1188\u01cd\3"+
		"\2\2\2\u1189\u118a\7S\2\2\u118a\u118b\79\2\2\u118b\u118d\7\u01f1\2\2\u118c"+
		"\u118e\7\u020c\2\2\u118d\u118c\3\2\2\2\u118d\u118e\3\2\2\2\u118e\u119b"+
		"\3\2\2\2\u118f\u1196\7\u00e7\2\2\u1190\u1191\7V\2\2\u1191\u1192\7\u01f8"+
		"\2\2\u1192\u1193\t\3\2\2\u1193\u1194\7\22\2\2\u1194\u1195\7\u01f8\2\2"+
		"\u1195\u1197\t\3\2\2\u1196\u1190\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u1199"+
		"\3\2\2\2\u1198\u119a\7\u010b\2\2\u1199\u1198\3\2\2\2\u1199\u119a\3\2\2"+
		"\2\u119a\u119c\3\2\2\2\u119b\u118f\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u01cf"+
		"\3\2\2\2\u119d\u119f\7\u00e3\2\2\u119e\u119d\3\2\2\2\u119e\u119f\3\2\2"+
		"\2\u119f\u11a0\3\2\2\2\u11a0\u11a1\7\u0209\2\2\u11a1\u11a2\5\u01d2\u00ea"+
		"\2\u11a2\u11a8\7\u020a\2\2\u11a3\u11a5\7\u020b\2\2\u11a4\u11a3\3\2\2\2"+
		"\u11a4\u11a5\3\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u11a7\7\u01d4\2\2\u11a7"+
		"\u11a9\5\66\34\2\u11a8\u11a4\3\2\2\2\u11a8\u11a9\3\2\2\2\u11a9\u11ab\3"+
		"\2\2\2\u11aa\u11ac\7\u020c\2\2\u11ab\u11aa\3\2\2\2\u11ab\u11ac\3\2\2\2"+
		"\u11ac\u01d1\3\2\2\2\u11ad\u11ae\7i\2\2\u11ae\u11af\79\2\2\u11af\u11b0"+
		"\7l\2\2\u11b0\u11b1\t\3\2\2\u11b1\u11b2\7f\2\2\u11b2\u11b4\5\u01d4\u00eb"+
		"\2\u11b3\u11b5\7\u020c\2\2\u11b4\u11b3\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5"+
		"\u01d3\3\2\2\2\u11b6\u11b7\5\u01e0\u00f1\2\u11b7\u11b8\7\u0204\2\2\u11b8"+
		"\u11b9\5\u01e0\u00f1\2\u11b9\u11ba\7\u0204\2\2\u11ba\u11bb\5\u01e0\u00f1"+
		"\2\u11bb\u11be\3\2\2\2\u11bc\u11be\5\u01e0\u00f1\2\u11bd\u11b6\3\2\2\2"+
		"\u11bd\u11bc\3\2\2\2\u11be\u01d5\3\2\2\2\u11bf\u11c0\7\u01b8\2\2\u11c0"+
		"\u11c1\7\u0091\2\2\u11c1\u11c2\79\2\2\u11c2\u11c3\t\3\2\2\u11c3\u11c4"+
		"\7\u016c\2\2\u11c4\u11c5\7\u01da\2\2\u11c5\u11c9\5\u0112\u008a\2\u11c6"+
		"\u11c7\7\u0209\2\2\u11c7\u11c8\t\3\2\2\u11c8\u11ca\7\u020a\2\2\u11c9\u11c6"+
		"\3\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb\u11cd\7\u020c\2"+
		"\2\u11cc\u11cb\3\2\2\2\u11cc\u11cd\3\2\2\2\u11cd\u01d7\3\2\2\2\u11ce\u11d0"+
		"\5\u01e0\u00f1\2\u11cf\u11d1\7n\2\2\u11d0\u11cf\3\2\2\2\u11d0\u11d1\3"+
		"\2\2\2\u11d1\u11d9\3\2\2\2\u11d2\u11d3\7\u0209\2\2\u11d3\u11d6\tF\2\2"+
		"\u11d4\u11d5\7\u020b\2\2\u11d5\u11d7\7\u01f2\2\2\u11d6\u11d4\3\2\2\2\u11d6"+
		"\u11d7\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11da\7\u020a\2\2\u11d9\u11d2"+
		"\3\2\2\2\u11d9\u11da\3\2\2\2\u11da\u01d9\3\2\2\2\u11db\u11df\7\u008c\2"+
		"\2\u11dc\u11df\7H\2\2\u11dd\u11df\5\u01dc\u00ef\2\u11de\u11db\3\2\2\2"+
		"\u11de\u11dc\3\2\2\2\u11de\u11dd\3\2\2\2\u11df\u01db\3\2\2\2\u11e0\u11f0"+
		"\7\u01f4\2\2\u11e1\u11f0\7\u01f5\2\2\u11e2\u11e4\5\u01de\u00f0\2\u11e3"+
		"\u11e2\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11f0\7\u01f2"+
		"\2\2\u11e6\u11e8\5\u01de\u00f0\2\u11e7\u11e6\3\2\2\2\u11e7\u11e8\3\2\2"+
		"\2\u11e8\u11e9\3\2\2\2\u11e9\u11f0\t\60\2\2\u11ea\u11ec\5\u01de\u00f0"+
		"\2\u11eb\u11ea\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u11ed\3\2\2\2\u11ed\u11ee"+
		"\7\u0208\2\2\u11ee\u11f0\tG\2\2\u11ef\u11e0\3\2\2\2\u11ef\u11e1\3\2\2"+
		"\2\u11ef\u11e3\3\2\2\2\u11ef\u11e7\3\2\2\2\u11ef\u11eb\3\2\2\2\u11f0\u01dd"+
		"\3\2\2\2\u11f1\u11f2\t+\2\2\u11f2\u01df\3\2\2\2\u11f3\u11f7\5\u01e2\u00f2"+
		"\2\u11f4\u11f7\7\u01ef\2\2\u11f5\u11f7\7\u01f0\2\2\u11f6\u11f3\3\2\2\2"+
		"\u11f6\u11f4\3\2\2\2\u11f6\u11f5\3\2\2\2\u11f7\u01e1\3\2\2\2\u11f8\u11f9"+
		"\tH\2\2\u11f9\u01e3\3\2\2\2\u11fa\u120a\7\u01f8\2\2\u11fb\u120a\7\u01f9"+
		"\2\2\u11fc\u120a\7\u01fa\2\2\u11fd\u11fe\7\u01fa\2\2\u11fe\u120a\7\u01f8"+
		"\2\2\u11ff\u1200\7\u01f9\2\2\u1200\u120a\7\u01f8\2\2\u1201\u1202\7\u01fa"+
		"\2\2\u1202\u120a\7\u01f9\2\2\u1203\u1204\7\u01fb\2\2\u1204\u120a\7\u01f8"+
		"\2\2\u1205\u1206\7\u01fb\2\2\u1206\u120a\7\u01f9\2\2\u1207\u1208\7\u01fb"+
		"\2\2\u1208\u120a\7\u01fa\2\2\u1209\u11fa\3\2\2\2\u1209\u11fb\3\2\2\2\u1209"+
		"\u11fc\3\2\2\2\u1209\u11fd\3\2\2\2\u1209\u11ff\3\2\2\2\u1209\u1201\3\2"+
		"\2\2\u1209\u1203\3\2\2\2\u1209\u1205\3\2\2\2\u1209\u1207\3\2\2\2\u120a"+
		"\u01e5\3\2\2\2\u120b\u120c\tI\2\2\u120c\u01e7\3\2\2\2\u120d\u120f\7\u01f2"+
		"\2\2\u120e\u1210\tJ\2\2\u120f\u120e\3\2\2\2\u120f\u1210\3\2\2\2\u1210"+
		"\u01e9\3\2\2\2\u0292\u01ed\u01f6\u01fb\u01ff\u0207\u020e\u0223\u0227\u022a"+
		"\u022e\u0232\u0236\u023b\u0240\u0247\u024a\u024e\u0251\u0259\u025c\u0261"+
		"\u0264\u0269\u026e\u0271\u0276\u027a\u027d\u0281\u0284\u0287\u028e\u0292"+
		"\u0294\u0299\u02a6\u02ac\u02af\u02b1\u02c1\u02c7\u02ca\u02cf\u02d6\u02d8"+
		"\u02de\u02e0\u02e5\u02ea\u02ed\u02f2\u02f5\u02fa\u02fd\u0304\u0306\u0309"+
		"\u030f\u0312\u0315\u0318\u031e\u0322\u032a\u0331\u0337\u0339\u0344\u0349"+
		"\u034f\u0353\u035d\u0365\u0371\u0374\u037c\u037e\u0381\u0385\u0388\u0392"+
		"\u0398\u03a0\u03a4\u03a8\u03b1\u03b7\u03bb\u03be\u03c9\u03cd\u03d4\u03d9"+
		"\u03dc\u03e4\u03e6\u03e9\u03ed\u03f0\u03f4\u03fb\u03ff\u0401\u0403\u0406"+
		"\u0409\u040c\u0412\u0415\u041d\u041f\u0422\u0426\u0429\u042f\u0432\u0436"+
		"\u0439\u043c\u0443\u0446\u044d\u0453\u0457\u0461\u0464\u0467\u046b\u046e"+
		"\u0471\u0474\u0478\u047b\u0483\u0485\u0489\u048c\u0494\u0498\u049c\u04a3"+
		"\u04a7\u04a9\u04ab\u04ae\u04b1\u04b4\u04bc\u04c2\u04c8\u04ca\u04ce\u04d1"+
		"\u04d4\u04d9\u04de\u04e1\u04e9\u04ed\u04f4\u04f7\u0500\u0503\u0507\u050f"+
		"\u0512\u0516\u0519\u0527\u052b\u052e\u0532\u0535\u053c\u053f\u0546\u054a"+
		"\u054c\u0554\u0557\u055b\u0562\u056f\u0572\u0578\u057f\u0584\u0589\u0590"+
		"\u059b\u05a3\u05a6\u05ae\u05bf\u05c6\u05cb\u05ce\u05d8\u05db\u05de\u05ec"+
		"\u05ef\u05f2\u05f8\u0606\u0609\u060c\u0612\u0618\u0620\u0623\u0627\u062b"+
		"\u062e\u0633\u0641\u0651\u0655\u065b\u065d\u0660\u0668\u066e\u0674\u0679"+
		"\u067c\u0685\u068f\u0698\u06a0\u06a3\u06aa\u06ad\u06da\u06dd\u06e3\u06ef"+
		"\u06f1\u06f4\u070c\u0717\u071f\u072a\u072f\u0732\u073a\u0744\u075e\u0764"+
		"\u076f\u0782\u078a\u0791\u07a8\u07b5\u07bb\u07c0\u07ca\u07cd\u07d3\u07da"+
		"\u07de\u07e2\u07e8\u07ef\u07f3\u07f9\u0800\u0807\u080a\u0810\u0817\u081b"+
		"\u0822\u082b\u082f\u0835\u083c\u0840\u0849\u0851\u0857\u085d\u086e\u0872"+
		"\u087a\u087e\u0886\u088a\u088f\u0893\u089a\u08a0\u08a2\u08a6\u08aa\u08ae"+
		"\u08b2\u08b8\u08bc\u08be\u08c3\u08c7\u08ce\u08d1\u08d4\u08dd\u08e2\u08e7"+
		"\u08ea\u08ec\u08f0\u08f4\u08f7\u08fb\u0901\u0906\u090d\u090f\u0913\u091b"+
		"\u0921\u0925\u0928\u0931\u0934\u093a\u0941\u0946\u094e\u0953\u095f\u0961"+
		"\u096c\u0973\u097d\u0993\u099f\u09ae\u09b3\u09ba\u09bd\u09c1\u09c3\u09d4"+
		"\u09e3\u09eb\u09f4\u09fc\u0a05\u0a10\u0a14\u0a16\u0a18\u0a1e\u0a23\u0a2a"+
		"\u0a37\u0a39\u0a3b\u0a3e\u0a41\u0a48\u0a4b\u0a51\u0a56\u0a58\u0a5b\u0a61"+
		"\u0a69\u0a6b\u0a6e\u0a72\u0a75\u0a7b\u0a7e\u0a82\u0a85\u0a8b\u0a8e\u0a90"+
		"\u0a94\u0a99\u0aa1\u0aa5\u0aa8\u0aad\u0ab5\u0aba\u0abd\u0ac7\u0ad2\u0ad7"+
		"\u0adc\u0ae2\u0ae6\u0ae9\u0aed\u0af1\u0af9\u0afe\u0b00\u0b03\u0b08\u0b0d"+
		"\u0b12\u0b15\u0b18\u0b1e\u0b26\u0b2e\u0b31\u0b34\u0b38\u0b3d\u0b40\u0b46"+
		"\u0b4a\u0b50\u0b58\u0b5e\u0b60\u0b63\u0b72\u0b75\u0b77\u0b82\u0b8d\u0b96"+
		"\u0ba0\u0baa\u0bac\u0bae\u0bb1\u0bb4\u0bbf\u0bc1\u0bc3\u0bc6\u0bcb\u0bd6"+
		"\u0bdf\u0be2\u0be5\u0bee\u0bf1\u0bf4\u0bfb\u0bfe\u0c0c\u0c0f\u0c16\u0c26"+
		"\u0c2a\u0c37\u0c3b\u0c43\u0c47\u0c59\u0c6c\u0c6e\u0c79\u0c80\u0c87\u0c8f"+
		"\u0c98\u0c9c\u0ca6\u0cad\u0cb5\u0cbd\u0cc1\u0cd7\u0ce0\u0ce6\u0cec\u0cf2"+
		"\u0cfc\u0d03\u0d08\u0d0d\u0d11\u0d18\u0d1c\u0d1f\u0d24\u0d28\u0d2c\u0d31"+
		"\u0d38\u0d3b\u0d3f\u0d44\u0d48\u0d51\u0d58\u0d61\u0d6d\u0d6f\u0d76\u0d7c"+
		"\u0d81\u0d86\u0d89\u0d90\u0d9b\u0dbd\u0dcd\u0dd4\u0dd6\u0ddd\u0de3\u0de8"+
		"\u0df0\u0df3\u0df5\u0dfc\u0e04\u0e0a\u0e0f\u0e13\u0e17\u0e1c\u0e1e\u0e25"+
		"\u0e29\u0e30\u0e32\u0e39\u0e3b\u0e44\u0e4c\u0e53\u0e59\u0e64\u0e68\u0e6a"+
		"\u0e6d\u0e85\u0e9e\u0ea3\u0eb7\u0ebb\u0ebf\u0ecf\u0ed6\u0eec\u0f26\u0f2a"+
		"\u0f4b\u0f52\u0f58\u0f63\u0f83\u0f89\u0f8c\u0f91\u0f96\u0f9f\u0fa4\u0faa"+
		"\u0fb3\u0fc4\u0fca\u0fd2\u0fd6\u0fde\u0fe5\u0ff2\u0ffa\u1007\u100e\u1014"+
		"\u1018\u1029\u102c\u1035\u1038\u103b\u1048\u104c\u1054\u105a\u1062\u1069"+
		"\u106f\u107e\u1087\u108d\u1093\u1096\u109a\u10a1\u10a9\u10ac\u10b2\u10b8"+
		"\u10ba\u10c0\u10c3\u10c5\u10cb\u10cd\u10db\u10e2\u10e9\u10f0\u10f7\u10fe"+
		"\u1105\u110b\u1110\u1116\u111b\u111f\u1127\u112c\u1133\u113c\u113e\u1145"+
		"\u1151\u1156\u1161\u116b\u116d\u1173\u1175\u117a\u117c\u117f\u1183\u1187"+
		"\u118d\u1196\u1199\u119b\u119e\u11a4\u11a8\u11ab\u11b4\u11bd\u11c9\u11cc"+
		"\u11d0\u11d6\u11d9\u11de\u11e3\u11e7\u11eb\u11ef\u11f6\u1209\u120f";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}