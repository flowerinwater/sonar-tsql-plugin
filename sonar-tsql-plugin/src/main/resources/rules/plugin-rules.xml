<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<sql-rules repoName="tsql plugin custom rules" repoKey="tsqlPluginRepo">
    <rule>
        <key>C001</key>
        <name>WAITFOR is used</name>
        <internalKey>C001</internalKey>
        <description>WAITFOR is used.&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;WAITFOR '10:00:00';&lt;/code&gt;&lt;/pre&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Waitfor_statementContext</textItem>
            </names>
            <textToFind/>
            <parentRules/>
            <childrenRules/>
            <siblingsRules/>
            <usesRules/>
            <ruleViolationMessage>WAITFOR is used.</ruleViolationMessage>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>ClassOnly</ruleMatchType>
            <ruleResultType>FailIfFound</ruleResultType>
            <textCheckType>Default</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>WAITFOR '10:00:00';</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples/>
        </ruleImplementation>
    </rule>
    <rule>
        <key>C002</key>
        <name>SELECT * is used</name>
        <internalKey>C002</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;SELECT * is used. Please list names.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT * from dbo.test;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surname from dbo.test;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surname, 1 * 3 from dbo.test;&lt;/code&gt;&lt;/pre&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Select_list_elemContext</textItem>
            </names>
            <textToFind>
                <textItem>*</textItem>
            </textToFind>
            <parentRules/>
            <childrenRules/>
            <siblingsRules/>
            <usesRules/>
            <ruleViolationMessage>SELECT * was used</ruleViolationMessage>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>TextAndClass</ruleMatchType>
            <ruleResultType>FailIfFound</ruleResultType>
            <textCheckType>Strict</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>SELECT * from dbo.test;</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>SELECT name, surname from dbo.test;</ruleCodeExample>
                <ruleCodeExample>SELECT name, surname, 1 * 3 from dbo.test;</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
    </rule>
    <rule>
        <key>C003</key>
        <name>INSERT statement without columns listed</name>
        <internalKey>C003</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;INSERT statement does not have columns listed. Always use a column list in your INSERT statements.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;INSERT INTO dbo.test VALUES (1,2);&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;INSERT INTO dbo.test (a,b) VALUES (1,2);&lt;/code&gt;&lt;/pre&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Insert_statementContext</textItem>
            </names>
            <textToFind/>
            <parentRules/>
            <childrenRules>
                <ruleImplementation>
                    <names>
                        <textItem>Column_name_listContext</textItem>
                    </names>
                    <textToFind/>
                    <parentRules/>
                    <childrenRules/>
                    <siblingsRules/>
                    <usesRules/>
                    <ruleViolationMessage>Column list is not specified in an insert statement.</ruleViolationMessage>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>ClassOnly</ruleMatchType>
                    <ruleResultType>FailIfNotFound</ruleResultType>
                    <textCheckType>Default</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
            </childrenRules>
            <siblingsRules/>
            <usesRules/>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>ClassOnly</ruleMatchType>
            <ruleResultType>Default</ruleResultType>
            <textCheckType>Default</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>INSERT INTO dbo.test VALUES (1,2);</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>INSERT INTO dbo.test (a,b) VALUES (1,2);</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
    </rule>
    <rule>
        <key>C004</key>
        <name>ORDER BY clause contains positional references</name>
        <internalKey>C004</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;Do not use column numbers in the ORDER BY clause. Always use column names in an order by clause. Avoid positional references.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT * from dbo.test order by 1;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT * from dbo.test order by name;&lt;/code&gt;&lt;/pre&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Order_by_clauseContext</textItem>
            </names>
            <textToFind/>
            <parentRules/>
            <childrenRules>
                <ruleImplementation>
                    <names>
                        <textItem>ConstantContext</textItem>
                    </names>
                    <textToFind/>
                    <parentRules/>
                    <childrenRules/>
                    <siblingsRules/>
                    <usesRules/>
                    <ruleViolationMessage>Positional reference is used instead of column name in order by clause.</ruleViolationMessage>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>ClassOnly</ruleMatchType>
                    <ruleResultType>FailIfFound</ruleResultType>
                    <textCheckType>Default</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
            </childrenRules>
            <siblingsRules/>
            <usesRules/>
            <ruleViolationMessage></ruleViolationMessage>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>ClassOnly</ruleMatchType>
            <ruleResultType>Default</ruleResultType>
            <textCheckType>Default</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>SELECT * from dbo.test order by 1;</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>SELECT * from dbo.test order by name;</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
    </rule>
    <rule>
        <key>C005</key>
        <name>EXECUTE/EXEC for dynamic query is used</name>
        <internalKey>C005</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;EXECUTE/EXEC for dynamic query was used. It is better to use sp_executesql for dynamic queries.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;EXEC ('SELECT 1');&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;EXEC (@sQueryText);&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;EXECUTE sp_executesql N'select 1';&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;exec sys.sp_test  @test = 'Publisher';&lt;/code&gt;&lt;/pre&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Execute_statementContext</textItem>
            </names>
            <textToFind/>
            <parentRules/>
            <childrenRules>
                <ruleImplementation>
                    <names>
                        <textItem>ConstantContext</textItem>
                        <textItem>Primitive_expressionContext</textItem>
                    </names>
                    <textToFind/>
                    <parentRules/>
                    <childrenRules/>
                    <siblingsRules/>
                    <usesRules/>
                    <ruleViolationMessage>EXECUTE/EXEC for dynamic query is used. It is better to use sp_executesql for dynamic queries.</ruleViolationMessage>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>ClassOnly</ruleMatchType>
                    <ruleResultType>FailIfFound</ruleResultType>
                    <textCheckType>Default</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
                <ruleImplementation>
                    <names>
                        <textItem>Func_proc_nameContext</textItem>
                    </names>
                    <textToFind/>
                    <parentRules/>
                    <childrenRules/>
                    <siblingsRules/>
                    <usesRules/>
                    <ruleViolationMessage>EXECUTE/EXEC for dynamic query is used. It is better to use sp_executesql for dynamic queries.</ruleViolationMessage>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>ClassOnly</ruleMatchType>
                    <ruleResultType>SkipIfFound</ruleResultType>
                    <textCheckType>Default</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
            </childrenRules>
            <siblingsRules/>
            <usesRules/>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>ClassOnly</ruleMatchType>
            <ruleResultType>Default</ruleResultType>
            <textCheckType>Default</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>EXEC ('SELECT 1');</ruleCodeExample>
                <ruleCodeExample>EXEC (@sQueryText);</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>EXECUTE sp_executesql N'select 1';</ruleCodeExample>
                <ruleCodeExample>exec sys.sp_test  @test = 'Publisher';</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
    </rule>
    <rule>
        <key>C007</key>
        <name>NOLOCK hint used</name>
        <internalKey>C007</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;Use of NOLOCK might cause data inconsistency problems.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surnam from dbo.test WITH (NOLOCK);&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surnam from dbo.test;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Source&lt;/h4&gt;&lt;a href='http://sqlmag.com/t-sql/t-sql-best-practices-part-1'&gt;http://sqlmag.com/t-sql/t-sql-best-practices-part-1&lt;/a&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Table_hintContext</textItem>
            </names>
            <textToFind>
                <textItem>NOLOCK</textItem>
            </textToFind>
            <parentRules/>
            <childrenRules/>
            <siblingsRules/>
            <usesRules/>
            <ruleViolationMessage>NOLOCK hint was used</ruleViolationMessage>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>TextAndClass</ruleMatchType>
            <ruleResultType>FailIfFound</ruleResultType>
            <textCheckType>Contains</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>SELECT name, surnam from dbo.test WITH (NOLOCK);</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>SELECT name, surnam from dbo.test;</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
        <source>http://sqlmag.com/t-sql/t-sql-best-practices-part-1</source>
    </rule>
    <rule>
        <key>C006</key>
        <name>Non schema qualified object name</name>
        <internalKey>C006</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;Always use schema-qualified object names to speed up resolution and improve query plan reuse.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT * from test order by 1;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;SELECT OrderID, OrderDate FROM Orders&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;with cte as(select a, b,c from dbo.test) SELECT a from cte; select * from test.dbo&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;SELECT * from dbo.test order by name;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;SELECT * from main.dbo.test order by name;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Source&lt;/h4&gt;&lt;a href='http://sqlmag.com/t-sql/t-sql-best-practices-part-1'&gt;http://sqlmag.com/t-sql/t-sql-best-practices-part-1&lt;/a&gt;</description>
        <ruleImplementation>
            <names>
                <textItem>Table_sourceContext</textItem>
            </names>
            <textToFind/>
            <parentRules>
                <ruleImplementation>
                    <names>
                        <textItem>Table_name_with_hintContext</textItem>
                    </names>
                    <textToFind/>
                    <parentRules/>
                    <childrenRules>
                        <ruleImplementation>
                            <names>
                                <textItem>Simple_idContext</textItem>
                            </names>
                            <textToFind/>
                            <parentRules>
                                <ruleImplementation>
                                    <names>
                                        <textItem>Common_table_expressionContext</textItem>
                                    </names>
                                    <textToFind/>
                                    <parentRules/>
                                    <childrenRules>
                                        <ruleImplementation>
                                            <names>
                                                <textItem>Simple_idContext</textItem>
                                            </names>
                                            <textToFind/>
                                            <parentRules/>
                                            <childrenRules/>
                                            <siblingsRules/>
                                            <usesRules/>
                                            <times>0</times>
                                            <ruleMode>Default</ruleMode>
                                            <ruleMatchType>Full</ruleMatchType>
                                            <ruleResultType>SkipIfFound</ruleResultType>
                                            <textCheckType>Strict</textCheckType>
                                            <violatingRulesCodeExamples/>
                                            <compliantRulesCodeExamples/>
                                        </ruleImplementation>
                                    </childrenRules>
                                    <siblingsRules/>
                                    <usesRules/>
                                    <times>0</times>
                                    <ruleMode>Default</ruleMode>
                                    <ruleMatchType>ClassOnly</ruleMatchType>
                                    <ruleResultType>Default</ruleResultType>
                                    <textCheckType>Default</textCheckType>
                                    <violatingRulesCodeExamples/>
                                    <compliantRulesCodeExamples/>
                                </ruleImplementation>
                            </parentRules>
                            <childrenRules/>
                            <siblingsRules/>
                            <usesRules/>
                            <ruleViolationMessage>Always use schema-qualified object names</ruleViolationMessage>
                            <times>2</times>
                            <ruleMode>Default</ruleMode>
                            <ruleMatchType>ClassOnly</ruleMatchType>
                            <ruleResultType>FailIfLessFound</ruleResultType>
                            <textCheckType>Default</textCheckType>
                            <violatingRulesCodeExamples/>
                            <compliantRulesCodeExamples/>
                        </ruleImplementation>
                    </childrenRules>
                    <siblingsRules/>
                    <usesRules/>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>ClassOnly</ruleMatchType>
                    <ruleResultType>Default</ruleResultType>
                    <textCheckType>Default</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
            </parentRules>
            <childrenRules/>
            <siblingsRules/>
            <usesRules/>
            <ruleViolationMessage>Always use schema-qualified object names</ruleViolationMessage>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>ClassOnly</ruleMatchType>
            <ruleResultType>Default</ruleResultType>
            <textCheckType>Default</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>SELECT * from test order by 1;</ruleCodeExample>
                <ruleCodeExample>SELECT OrderID, OrderDate FROM Orders</ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>with cte as(select a, b,c from dbo.test) SELECT a from cte; select * from test.dbo</ruleCodeExample>
                <ruleCodeExample>SELECT * from dbo.test order by name;</ruleCodeExample>
                <ruleCodeExample>SELECT * from main.dbo.test order by name;</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
        <source>http://sqlmag.com/t-sql/t-sql-best-practices-part-1</source>
    </rule>
    <rule>
        <key>C009</key>
        <name>Non-sargable statement used</name>
        <internalKey>C009</internalKey>
        <description>&lt;h2&gt;Description&lt;/h2&gt;&lt;p&gt;Use of non-sargeable arguments might cause performance problems.&lt;/p&gt;&lt;h2&gt;Code examples&lt;/h2&gt;&lt;h3&gt;Non-compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surname from dbo.test where year(date) &gt; 2008&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surname from dbo.test where name like '%red' &lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Compliant&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;SELECT name, surname from dbo.test where date between 2008-10-10 and 2010-10-10;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Source&lt;/h4&gt;&lt;a href='http://sqlmag.com/t-sql/t-sql-best-practices-part-1'&gt;http://sqlmag.com/t-sql/t-sql-best-practices-part-1&lt;/a&gt;</description>
        <status>BETA</status>
        <ruleImplementation>
            <names>
                <textItem>Search_conditionContext</textItem>
            </names>
            <textToFind/>
            <parentRules/>
            <childrenRules>
                <ruleImplementation>
                    <names>
                        <textItem>Function_callContext</textItem>
                    </names>
                    <textToFind/>
                    <parentRules/>
                    <childrenRules>
                        <ruleImplementation>
                            <names>
                                <textItem>Column_ref_expressionContext</textItem>
                            </names>
                            <textToFind/>
                            <parentRules/>
                            <childrenRules/>
                            <siblingsRules/>
                            <usesRules/>
                            <ruleViolationMessage>Non-sargeable argument found - column referenced in a function</ruleViolationMessage>
                            <times>0</times>
                            <ruleMode>Default</ruleMode>
                            <ruleMatchType>ClassOnly</ruleMatchType>
                            <ruleResultType>FailIfFound</ruleResultType>
                            <textCheckType>Default</textCheckType>
                            <violatingRulesCodeExamples/>
                            <compliantRulesCodeExamples/>
                        </ruleImplementation>
                    </childrenRules>
                    <siblingsRules/>
                    <usesRules/>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>ClassOnly</ruleMatchType>
                    <ruleResultType>Default</ruleResultType>
                    <textCheckType>Default</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
                <ruleImplementation>
                    <names>
                        <textItem>PredicateContext</textItem>
                    </names>
                    <textToFind>
                        <textItem>LIKE</textItem>
                    </textToFind>
                    <parentRules/>
                    <childrenRules>
                        <ruleImplementation>
                            <names>
                                <textItem>TerminalNodeImpl</textItem>
                            </names>
                            <textToFind>
                                <textItem>N?[',‘]%(.*?)'</textItem>
                            </textToFind>
                            <parentRules/>
                            <childrenRules/>
                            <siblingsRules/>
                            <usesRules/>
                            <ruleViolationMessage>Non-sargeable argument found - predicate starts with wildcard</ruleViolationMessage>
                            <times>0</times>
                            <ruleMode>Default</ruleMode>
                            <ruleMatchType>TextAndClass</ruleMatchType>
                            <ruleResultType>FailIfFound</ruleResultType>
                            <textCheckType>Regexp</textCheckType>
                            <violatingRulesCodeExamples/>
                            <compliantRulesCodeExamples/>
                        </ruleImplementation>
                    </childrenRules>
                    <siblingsRules/>
                    <usesRules/>
                    <times>0</times>
                    <ruleMode>Default</ruleMode>
                    <ruleMatchType>TextAndClass</ruleMatchType>
                    <ruleResultType>Default</ruleResultType>
                    <textCheckType>Contains</textCheckType>
                    <violatingRulesCodeExamples/>
                    <compliantRulesCodeExamples/>
                </ruleImplementation>
            </childrenRules>
            <siblingsRules/>
            <usesRules/>
            <times>0</times>
            <ruleMode>Default</ruleMode>
            <ruleMatchType>ClassOnly</ruleMatchType>
            <ruleResultType>Default</ruleResultType>
            <textCheckType>Default</textCheckType>
            <violatingRulesCodeExamples>
                <ruleCodeExample>SELECT name, surname from dbo.test where year(date) &gt; 2008</ruleCodeExample>
                <ruleCodeExample>SELECT name, surname from dbo.test where name like '%red' </ruleCodeExample>
            </violatingRulesCodeExamples>
            <compliantRulesCodeExamples>
                <ruleCodeExample>SELECT name, surname from dbo.test where date between 2008-10-10 and 2010-10-10;</ruleCodeExample>
            </compliantRulesCodeExamples>
        </ruleImplementation>
        <source>http://sqlmag.com/t-sql/t-sql-best-practices-part-1</source>
    </rule>
</sql-rules>